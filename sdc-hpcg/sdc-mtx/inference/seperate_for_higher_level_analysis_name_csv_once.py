#!/usr/bin/env python

import os
import pandas as pd

# ==== Folder Paths ====
input_folder = "data"
output_folder = "selected_108pmcs"

# Create output folder if it doesn't exist
os.makedirs(output_folder, exist_ok=True)

# ==== Define the counters you want to extract (manually listed) ====
selected_counters = [
    'UOPS_RETIRED.MACRO_FUSED','BRANCH-LOADS','BR_INST_RETIRED.COND_NTAKEN',
    'BR_INST_RETIRED.NOT_TAKEN','BR_INST_RETIRED.ALL_BRANCHES',
    'MEM_INST_RETIRED.ALL_LOADS','BR_INST_RETIRED.COND',
    'BR_INST_RETIRED.ALL_BRANCHES_PEBS','BR_INST_RETIRED.CONDITIONAL',
    'INSTRUCTIONS','INST_RETIRED.ANY_P','DTLB-LOADS','MEM-STORES',
    'MEM_INST_RETIRED.ANY','INST_RETIRED.ANY','BR_INST_RETIRED.NEAR_TAKEN',
    'UOPS_RETIRED.RETIRE_SLOTS','L1-DCACHE-LOADS','DTLB-STORES',
    'TOPDOWN-SLOTS-RETIRED','MEM_INST_RETIRED.ALL_STORES','L1-DCACHE-STORES',
    'LD_BLOCKS.NO_SR','MEM_LOAD_RETIRED.L1_HIT','ARITH.DIVIDER_ACTIVE',
    'UOPS_EXECUTED.X87','BR_MISP_EXEC.INDIRECT','CACHE-MISSES',
    'UOPS_EXECUTED.CORE','SYSCALLS:SYS_ENTER_READ','UOPS_EXECUTED.THREAD',
    'TOPDOWN-SLOTS-ISSUED','UOPS_DISPATCHED_PORT.PORT_2',
    'UOPS_DISPATCHED_PORT.PORT_4','UOPS_DISPATCHED_PORT.PORT_3',
    'RAW_SYSCALLS:SYS_ENTER','ILD_STALL.LCP',
    'DTLB_LOAD_MISSES.WALK_COMPLETED_1G','UOPS_ISSUED.ANY',
    'INST_RETIRED.PREC_DIST','UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC',
    'SYSCALLS:SYS_EXIT_READ','RAW_SYSCALLS:SYS_EXIT',
    'MEM_INST_RETIRED.STLB_MISS_STORES','DECODE.LCP',
    'UOPS_EXECUTED.CORE_CYCLES_GE_3','UOPS_DISPATCHED_PORT.PORT_6',
    'UOPS_DISPATCHED_PORT.PORT_1','UNC_CHA_LLC_VICTIMS.TOTAL_E',
    'UNC_CHA_LLC_VICTIMS.S_STATE','UNC_CHA_LLC_VICTIMS.REMOTE_E',
    'UNC_CHA_LLC_VICTIMS.E_STATE','IDQ.MITE_UOPS',
    'FRONTEND_RETIRED.ANY_DSB_MISS','DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M',
    'DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M','DTLB_LOAD_MISSES.WALK_COMPLETED',
    'UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC','UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC',
    'UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC','UOPS_EXECUTED.CORE_CYCLES_GE_2',
    'UNC_UPI_TXL_FLITS.ALL_NULL','UNC_UPI_TXL_BASIC_HDR_MATCH.WB',
    'UNC_UPI_RXL_BASIC_HDR_MATCH.WB','UNC_M3UPI_TXR_VERT_OCCUPANCY.AD_AG0',
    'UNC_M3UPI_TXC_BL_FLQ_INSERTS.VN0_WB','UNC_M3UPI_RXC_CRD_OCC.FLITS_IN_FIFO',
    'UNC_M2M_VERT_RING_AD_IN_USE.UP_EVEN','UNC_M2M_TXR_HORZ_OCCUPANCY.BL_BNC',
    'UNC_M2M_RXR_BYPASS.IV_BNC','UNC_M_RD_CAS_RANK0.BANKG2',
    'UNC_M_RD_CAS_RANK0.BANK11','UNC_H_VERT_RING_BL_IN_USE.DN_EVEN',
    'UNC_H_VERT_RING_AK_IN_USE.UP_ODD','UNC_H_TXR_VERT_NACK.IV',
    'UNC_H_TXR_VERT_ADS_USED.BL_AG1','UNC_H_TXR_HORZ_NACK.IV_BNC',
    'UNC_H_TXR_HORZ_CYCLES_FULL.BL_BNC','UNC_H_TXR_HORZ_BYPASS.BL_CRD',
    'UNC_H_RXR_OCCUPANCY.BL_BNC','UNC_H_RING_BOUNCES_HORZ.BL',
    'UNC_H_HITME_LOOKUP.WRITE','UNC_H_CORE_SNP.EVICT_ONE',
    'UNC_H_CORE_SNP.ANY_ONE','UNC_H_AG1_BL_CREDITS_ACQUIRED.TGR0',
    'UNC_CHA_TXR_HORZ_NACK.AK_BNC','UNC_CHA_TXR_HORZ_CYCLES_NE.BL_BNC',
    'UNC_CHA_REQUESTS.WRITES_REMOTE','UNC_CHA_LLC_VICTIMS.REMOTE_M',
    'UNC_CHA_LLC_VICTIMS.LOCAL_S','UNC_CHA_LLC_VICTIMS.LOCAL_E',
    'UNC_CHA_DIR_UPDATE.TOR','UNC_CHA_CORE_SNP.EVICT_ONE',
    'UNC_CHA_AG1_BL_CRD_OCCUPANCY.TGR0','UNC_C_LLC_VICTIMS.S_STATE',
    'UNC_C_LLC_VICTIMS.E_STATE',
    'OFFCORE_RESPONSE.DEMAND_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD',
    'OFFCORE_RESPONSE.ALL_PF_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD',
    'OFFCORE_RESPONSE.ALL_DATA_RD.L3_MISS.REMOTE_HIT_FORWARD',
    'MEM_LOAD_L3_MISS_RETIRED.REMOTE_FWD','MEM_LOAD_L3_MISS_RETIRED.REMOTE_DRAM',
    'MEM_LOAD_L3_HIT_RETIRED.XSNP_NONE','IDQ.MITE_CYCLES',
    'IDQ.ALL_MITE_CYCLES_4_UOPS','EXE_ACTIVITY.EXE_BOUND_0_PORTS',
    'DTLB-LOAD-MISSES','DTLB_LOAD_MISSES.WALK_ACTIVE','BRANCH-MISSES'
]

# ==== Process all CSV files ====
for filename in os.listdir(input_folder):
    if filename.endswith(".csv"):
        input_path = os.path.join(input_folder, filename)
        try:
            df = pd.read_csv(input_path)
            first_two_cols = df.columns[:2].tolist()
            existing_counters = [col for col in selected_counters if col in df.columns]

            if not existing_counters:
                print(f"[WARN] No selected counters found in {filename}")
                continue

            df_subset = df[first_two_cols + existing_counters]
            output_path = os.path.join(output_folder, filename)
            df_subset.to_csv(output_path, index=False)
            print(f"[OK] Saved: {output_path}")
        except Exception as e:
            print(f"[ERROR] Failed to process {filename}: {e}")
