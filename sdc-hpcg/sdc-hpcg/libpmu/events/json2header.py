#!/usr/bin/env python

import os
import json
from sys import argv

class CounterConfig:
    def __init__(self, name, event, umask, cmask=0):
        self.name = name
        self.event = event
        self.umask = umask
        self.cmask = cmask

    def __str__(self):
        return f"{{.event = {self.event}, .umask = {self.umask}, .cmask = {self.cmask}}},"

def parse_events(events):
    cc = []
    for event in events["Events"]:
        event_name = event["EventName"]
        try:
            event_code = int(event["EventCode"], base=16)
            umask = int(event["UMask"], base=16)
        except:
            print(f"Failed to parse {event_name}")
            continue
        cmask = 0
        if "CounterMask" in event.keys():
            cmask = event["CounterMask"]
        cc.append(CounterConfig(event_name, event_code, umask, cmask))
    return cc

def eventlen2const(f, name, events):
    f.write(f"#define {name} ({len(events)})\n")

def events2array(f, name, events):
    f.write(f"\n\nstatic union counter_config {name}[] = {{\n")
    for event in events:
        f.write(f"\t{str(event)}\n")
    f.write("};\n")

def events2enum(f, name, events):
    f.write(f"\n\nenum {name} {{\n")
    for i, event in enumerate(events):
        name = event.name.replace(".", "_")
        if i == 0:
            f.write(f"\t{name} = 0,\n")
        else:
            f.write(f"\t{name},\n")
    f.write("};\n")

def events2strings(f, name, events):
    f.write(f"\n\nconst char *{name}[] = {{\n")
    for i, event in enumerate(events):
        f.write(f"\t\"{event.name}\",\n")
    f.write("};\n")

if __name__ == "__main__":
    uarch = argv[1]

    out = open("events.h", "w")
    out.write("// Autogenerated. Do not Modify.\n")
    out.write("#ifndef EVENTS_H\n")
    out.write("#define EVENTS_H\n\n")

    out.write("#include <pmu.h>\n\n")

    with open(os.path.join(uarch, "core.json"), "r") as f:
        core = json.loads(f.read())

    with open(os.path.join(uarch, "uncore.json"), "r") as f:
        uncore = json.loads(f.read())

    core_events = parse_events(core)
    uncore_events = parse_events(uncore)

    eventlen2const(out, "NCORE", core_events)
    eventlen2const(out, "NUNCORE", uncore_events)

    events2enum(out, "CORE_EVENTS", core_events)
    events2strings(out, "core_strings", core_events)
    events2array(out, "core_events", core_events)

    events2enum(out, "UNCORE", uncore_events)
    events2strings(out, "uncore_strings", uncore_events)
    events2array(out, "uncore_events", uncore_events)

    out.write("\n#endif /*EVENTS_H*/")
    out.close()
