EventName,EventAlias,EventType,Unit,Topic,Encoding,ScaleUnit,BriefDescription,PublicDescription
branch-instructions,branches,Hardware event,,,,,,
branch-misses,,Hardware event,,,,,,
bus-cycles,,Hardware event,,,,,,
cache-misses,,Hardware event,,,,,,
cache-references,,Hardware event,,,,,,
cpu-cycles,cycles,Hardware event,,,,,,
instructions,,Hardware event,,,,,,
ref-cycles,,Hardware event,,,,,,
alignment-faults,,Software event,,,,,,
bpf-output,,Software event,,,,,,
cgroup-switches,,Software event,,,,,,
context-switches,cs,Software event,,,,,,
cpu-clock,,Software event,,,,,,
cpu-migrations,migrations,Software event,,,,,,
dummy,,Software event,,,,,,
emulation-faults,,Software event,,,,,,
major-faults,,Software event,,,,,,
minor-faults,,Software event,,,,,,
page-faults,faults,Software event,,,,,,
task-clock,,Software event,,,,,,
duration_time,,Tool event,tool,,,,,
user_time,,Tool event,tool,,,,,
system_time,,Tool event,tool,,,,,
L1-dcache-loads,cpu/L1-dcache-loads/,Hardware cache event,cache,cpu,,,,
L1-dcache-load-misses,cpu/L1-dcache-load-misses/,Hardware cache event,cache,cpu,,,,
L1-dcache-stores,cpu/L1-dcache-stores/,Hardware cache event,cache,cpu,,,,
L1-icache-load-misses,cpu/L1-icache-load-misses/,Hardware cache event,cache,cpu,,,,
LLC-loads,cpu/LLC-loads/,Hardware cache event,cache,cpu,,,,
LLC-load-misses,cpu/LLC-load-misses/,Hardware cache event,cache,cpu,,,,
LLC-stores,cpu/LLC-stores/,Hardware cache event,cache,cpu,,,,
LLC-store-misses,cpu/LLC-store-misses/,Hardware cache event,cache,cpu,,,,
dTLB-loads,cpu/dTLB-loads/,Hardware cache event,cache,cpu,,,,
dTLB-load-misses,cpu/dTLB-load-misses/,Hardware cache event,cache,cpu,,,,
dTLB-stores,cpu/dTLB-stores/,Hardware cache event,cache,cpu,,,,
dTLB-store-misses,cpu/dTLB-store-misses/,Hardware cache event,cache,cpu,,,,
iTLB-loads,cpu/iTLB-loads/,Hardware cache event,cache,cpu,,,,
iTLB-load-misses,cpu/iTLB-load-misses/,Hardware cache event,cache,cpu,,,,
branch-loads,cpu/branch-loads/,Hardware cache event,cache,cpu,,,,
branch-load-misses,cpu/branch-load-misses/,Hardware cache event,cache,cpu,,,,
node-loads,cpu/node-loads/,Hardware cache event,cache,cpu,,,,
node-load-misses,cpu/node-load-misses/,Hardware cache event,cache,cpu,,,,
node-stores,cpu/node-stores/,Hardware cache event,cache,cpu,,,,
node-store-misses,cpu/node-store-misses/,Hardware cache event,cache,cpu,,,,
branch-instructions,cpu/branch-instructions/,Kernel PMU event,cpu,,cpu/event=0xc4/,,,
branch-misses,cpu/branch-misses/,Kernel PMU event,cpu,,cpu/event=0xc5/,,,
bus-cycles,cpu/bus-cycles/,Kernel PMU event,cpu,,"cpu/event=0x3c,umask=0x1/",,,
cache-misses,cpu/cache-misses/,Kernel PMU event,cpu,,"cpu/event=0x2e,umask=0x41/",,,
cache-references,cpu/cache-references/,Kernel PMU event,cpu,,"cpu/event=0x2e,umask=0x4f/",,,
cpu-cycles,cpu/cpu-cycles/,Kernel PMU event,cpu,,cpu/event=0x3c/,,,
instructions,cpu/instructions/,Kernel PMU event,cpu,,cpu/event=0xc0/,,,
mem-loads,cpu/mem-loads/,Kernel PMU event,cpu,,"cpu/event=0xcd,umask=0x1,ldlat=0x3/",,,
mem-stores,cpu/mem-stores/,Kernel PMU event,cpu,,"cpu/event=0xd0,umask=0x82/",,,
ref-cycles,cpu/ref-cycles/,Kernel PMU event,cpu,,"cpu/event=0,umask=0x3/",,,
topdown-fetch-bubbles,cpu/topdown-fetch-bubbles/,Kernel PMU event,cpu,,"cpu/event=0x9c,umask=0x1/",,,
topdown-recovery-bubbles,cpu/topdown-recovery-bubbles/,Kernel PMU event,cpu,,"cpu/event=0xd,umask=0x3,cmask=0x1,any=0x1/",2,,
topdown-slots-issued,cpu/topdown-slots-issued/,Kernel PMU event,cpu,,"cpu/event=0xe,umask=0x1/",,,
topdown-slots-retired,cpu/topdown-slots-retired/,Kernel PMU event,cpu,,"cpu/event=0xc2,umask=0x2/",,,
topdown-total-slots,cpu/topdown-total-slots/,Kernel PMU event,cpu,,"cpu/event=0x3c,umask=0,any=0x1/",2,,
msr/aperf/,,Kernel PMU event,msr,,msr/event=0x1/,,,
msr/cpu_thermal_margin/,,Kernel PMU event,msr,,msr/event=0x7/,1C,,
msr/mperf/,,Kernel PMU event,msr,,msr/event=0x2/,,,
msr/smi/,,Kernel PMU event,msr,,msr/event=0x4/,,,
msr/tsc/,,Kernel PMU event,msr,,msr/event=0/,,,
uncore_imc_0/cas_count_read/,,Kernel PMU event,uncore_imc_0,,"uncore_imc_0/event=0x4,umask=0x3/",6.10352E-05MiB,,
uncore_imc_0/cas_count_write/,,Kernel PMU event,uncore_imc_0,,"uncore_imc_0/event=0x4,umask=0xc/",6.10352E-05MiB,,
uncore_imc_0/clockticks/,,Kernel PMU event,uncore_imc_0,,"uncore_imc_0/event=0,umask=0/",,,
uncore_imc_1/cas_count_read/,,Kernel PMU event,uncore_imc_1,,"uncore_imc_1/event=0x4,umask=0x3/",6.10352E-05MiB,,
uncore_imc_1/cas_count_write/,,Kernel PMU event,uncore_imc_1,,"uncore_imc_1/event=0x4,umask=0xc/",6.10352E-05MiB,,
uncore_imc_1/clockticks/,,Kernel PMU event,uncore_imc_1,,"uncore_imc_1/event=0,umask=0/",,,
uncore_imc_4/cas_count_read/,,Kernel PMU event,uncore_imc_4,,"uncore_imc_4/event=0x4,umask=0x3/",6.10352E-05MiB,,
uncore_imc_4/cas_count_write/,,Kernel PMU event,uncore_imc_4,,"uncore_imc_4/event=0x4,umask=0xc/",6.10352E-05MiB,,
uncore_imc_4/clockticks/,,Kernel PMU event,uncore_imc_4,,"uncore_imc_4/event=0,umask=0/",,,
uncore_imc_5/cas_count_read/,,Kernel PMU event,uncore_imc_5,,"uncore_imc_5/event=0x4,umask=0x3/",6.10352E-05MiB,,
uncore_imc_5/cas_count_write/,,Kernel PMU event,uncore_imc_5,,"uncore_imc_5/event=0x4,umask=0xc/",6.10352E-05MiB,,
uncore_imc_5/clockticks/,,Kernel PMU event,uncore_imc_5,,"uncore_imc_5/event=0,umask=0/",,,
l1d.replacement,,Kernel PMU event,cpu,cache,"cpu/event=0x51,period=0x1e8483,umask=0x1/",,L1D data line replacements,"This event counts when new data lines are brought into the L1 Data cache, which cause other lines to be evicted from the cache"
l1d_pend_miss.fb_full,,Kernel PMU event,cpu,cache,"cpu/event=0x48,cmask=0x1,period=0x1e8483,umask=0x2/",,Cycles a demand request was blocked due to Fill Buffers unavailability,Cycles a demand request was blocked due to Fill Buffers unavailability
l1d_pend_miss.pending,,Kernel PMU event,cpu,cache,"cpu/event=0x48,period=0x1e8483,umask=0x1/",,L1D miss outstanding duration in cycles,Increments the number of outstanding L1D misses every cycle. Set Cmask = 1 and Edge =1 to count occurrences
l1d_pend_miss.pending_cycles,,Kernel PMU event,cpu,cache,"cpu/event=0x48,cmask=0x1,period=0x1e8483,umask=0x1/",,Cycles with L1D load Misses outstanding,Cycles with L1D load Misses outstanding
l1d_pend_miss.pending_cycles_any,,Kernel PMU event,cpu,cache,"cpu/event=0x48,any=0x1,cmask=0x1,period=0x1e8483,umask=0x1/",,Cycles with L1D load Misses outstanding from any thread on physical core,Cycles with L1D load Misses outstanding from any thread on physical core
l1d_pend_miss.request_fb_full,,Kernel PMU event,cpu,cache,"cpu/event=0x48,period=0x1e8483,umask=0x2/",,"Number of times a request needed a FB entry but there was no entry available for it. That is the FB unavailability was dominant reason for blocking the request. A request includes cacheable/uncacheable demands that is load, store or SW prefetch. HWP are e","Number of times a request needed a FB entry but there was no entry available for it. That is the FB unavailability was dominant reason for blocking the request. A request includes cacheable/uncacheable demands that is load, store or SW prefetch. HWP are e"
l2_demand_rqsts.wb_hit,,Kernel PMU event,cpu,cache,"cpu/event=0x27,period=0x30d43,umask=0x50/",,Not rejected writebacks that hit L2 cache,Not rejected writebacks that hit L2 cache
l2_lines_in.all,,Kernel PMU event,cpu,cache,"cpu/event=0xf1,period=0x186a3,umask=0x7/",,L2 cache lines filling L2,This event counts the number of L2 cache lines brought into the L2 cache.  Lines are filled into the L2 cache when there was an L2 miss
l2_lines_in.e,,Kernel PMU event,cpu,cache,"cpu/event=0xf1,period=0x186a3,umask=0x4/",,L2 cache lines in E state filling L2,L2 cache lines in E state filling L2
l2_lines_in.i,,Kernel PMU event,cpu,cache,"cpu/event=0xf1,period=0x186a3,umask=0x1/",,L2 cache lines in I state filling L2,L2 cache lines in I state filling L2
l2_lines_in.s,,Kernel PMU event,cpu,cache,"cpu/event=0xf1,period=0x186a3,umask=0x2/",,L2 cache lines in S state filling L2,L2 cache lines in S state filling L2
l2_lines_out.demand_clean,,Kernel PMU event,cpu,cache,"cpu/event=0xf2,period=0x186a3,umask=0x5/",,Clean L2 cache lines evicted by demand,Clean L2 cache lines evicted by demand
l2_lines_out.demand_dirty,,Kernel PMU event,cpu,cache,"cpu/event=0xf2,period=0x186a3,umask=0x6/",,Dirty L2 cache lines evicted by demand,Dirty L2 cache lines evicted by demand
l2_rqsts.all_code_rd,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xe4/",,L2 code requests,Counts all L2 code requests
l2_rqsts.all_demand_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xe1/",,"Demand Data Read requests  Spec update: HSD78, HSM80","Counts any demand and L1 HW prefetch data load requests to L2  Spec update: HSD78, HSM80"
l2_rqsts.all_demand_miss,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0x27/",,"Demand requests that miss L2 cache  Spec update: HSD78, HSM80","Demand requests that miss L2 cache  Spec update: HSD78, HSM80"
l2_rqsts.all_demand_references,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xe7/",,"Demand requests to L2 cache  Spec update: HSD78, HSM80","Demand requests to L2 cache  Spec update: HSD78, HSM80"
l2_rqsts.all_pf,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xf8/",,Requests from L2 hardware prefetchers,Counts all L2 HW prefetcher requests
l2_rqsts.all_rfo,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xe2/",,RFO requests to L2 cache,Counts all L2 store RFO requests
l2_rqsts.code_rd_hit,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xc4/",,"L2 cache hits when fetching instructions, code reads",Number of instruction fetches that hit the L2 cache
l2_rqsts.code_rd_miss,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0x24/",,L2 cache misses when fetching instructions,Number of instruction fetches that missed the L2 cache
l2_rqsts.demand_data_rd_hit,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xc1/",,"Demand Data Read requests that hit L2 cache  Spec update: HSD78, HSM80","Counts the number of demand Data Read requests, initiated by load instructions, that hit L2 cache  Spec update: HSD78, HSM80"
l2_rqsts.demand_data_rd_miss,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0x21/",,"Demand Data Read miss L2, no rejects  Spec update: HSD78, HSM80","Demand data read requests that missed L2, no rejects  Spec update: HSD78, HSM80"
l2_rqsts.l2_pf_hit,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xd0/",,L2 prefetch requests that hit L2 cache,Counts all L2 HW prefetcher requests that hit L2
l2_rqsts.l2_pf_miss,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0x30/",,L2 prefetch requests that miss L2 cache,Counts all L2 HW prefetcher requests that missed L2
l2_rqsts.miss,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0x3f/",,"All requests that miss L2 cache  Spec update: HSD78, HSM80","All requests that missed L2  Spec update: HSD78, HSM80"
l2_rqsts.references,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xff/",,"All L2 requests  Spec update: HSD78, HSM80","All requests to L2 cache  Spec update: HSD78, HSM80"
l2_rqsts.rfo_hit,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0xc2/",,RFO requests that hit L2 cache,Counts the number of store RFO requests that hit the L2 cache
l2_rqsts.rfo_miss,,Kernel PMU event,cpu,cache,"cpu/event=0x24,period=0x30d43,umask=0x22/",,RFO requests that miss L2 cache,Counts the number of store RFO requests that miss the L2 cache
l2_trans.all_pf,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x8/",,L2 or L3 HW prefetches that access L2 cache,"Any MLC or L3 HW prefetch accessing L2, including rejects"
l2_trans.all_requests,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x80/",,Transactions accessing L2 pipe,Transactions accessing L2 pipe
l2_trans.code_rd,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x4/",,L2 cache accesses when fetching instructions,L2 cache accesses when fetching instructions
l2_trans.demand_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x1/",,Demand Data Read requests that access L2 cache,Demand data read requests that access L2 cache
l2_trans.l1d_wb,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x10/",,L1D writebacks that access L2 cache,L1D writebacks that access L2 cache
l2_trans.l2_fill,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x20/",,L2 fill requests that access L2 cache,L2 fill requests that access L2 cache
l2_trans.l2_wb,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x40/",,L2 writebacks that access L2 cache,L2 writebacks that access L2 cache
l2_trans.rfo,,Kernel PMU event,cpu,cache,"cpu/event=0xf0,period=0x30d43,umask=0x2/",,RFO requests that access L2 cache,RFO requests that access L2 cache
lock_cycles.cache_lock_duration,,Kernel PMU event,cpu,cache,"cpu/event=0x63,period=0x1e8483,umask=0x2/",,Cycles when L1D is locked,Cycles in which the L1D is locked
longest_lat_cache.miss,,Kernel PMU event,cpu,cache,"cpu/event=0x2e,period=0x186a3,umask=0x41/",,Core-originated cacheable demand requests missed L3,This event counts each cache miss condition for references to the last level cache
longest_lat_cache.reference,,Kernel PMU event,cpu,cache,"cpu/event=0x2e,period=0x186a3,umask=0x4f/",,Core-originated cacheable demand requests that refer to L3,This event counts requests originating from the core that reference a cache line in the last level cache
mem_load_uops_l3_hit_retired.xsnp_hit,,Kernel PMU event,cpu,cache,"cpu/event=0xd2,period=0x4e2b,umask=0x2/",,"Retired load uops which data sources were L3 and cross-core snoop hits in on-pkg core cache  Supports address when precise.  Spec update: HSD29, HSD25, HSM26, HSM30 (Precise event)","Retired load uops which data sources were L3 and cross-core snoop hits in on-pkg core cache  Supports address when precise.  Spec update: HSD29, HSD25, HSM26, HSM30 (Precise event)"
mem_load_uops_l3_hit_retired.xsnp_hitm,,Kernel PMU event,cpu,cache,"cpu/event=0xd2,period=0x4e2b,umask=0x4/",,"Retired load uops which data sources were HitM responses from shared L3  Supports address when precise.  Spec update: HSD29, HSD25, HSM26, HSM30 (Precise event)","Retired load uops which data sources were HitM responses from shared L3  Supports address when precise.  Spec update: HSD29, HSD25, HSM26, HSM30 (Precise event)"
mem_load_uops_l3_hit_retired.xsnp_miss,,Kernel PMU event,cpu,cache,"cpu/event=0xd2,period=0x4e2b,umask=0x1/",,"Retired load uops which data sources were L3 hit and cross-core snoop missed in on-pkg core cache  Supports address when precise.  Spec update: HSD29, HSD25, HSM26, HSM30 (Precise event)","Retired load uops which data sources were L3 hit and cross-core snoop missed in on-pkg core cache  Supports address when precise.  Spec update: HSD29, HSD25, HSM26, HSM30 (Precise event)"
mem_load_uops_l3_hit_retired.xsnp_none,,Kernel PMU event,cpu,cache,"cpu/event=0xd2,period=0x186a3,umask=0x8/",,"Retired load uops which data sources were hits in L3 without snoops required  Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM26, HSM30 (Precise event)","Retired load uops which data sources were hits in L3 without snoops required  Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM26, HSM30 (Precise event)"
mem_load_uops_l3_miss_retired.local_dram,,Kernel PMU event,cpu,cache,"cpu/event=0xd3,period=0x186a3,umask=0x1/",,"Data from local DRAM either Snoop not needed or Snoop Miss (RspI)  Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM30 (Precise event)","This event counts retired load uops where the data came from local DRAM. This does not include hardware prefetches  Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM30 (Precise event)"
mem_load_uops_l3_miss_retired.remote_dram,,Kernel PMU event,cpu,cache,"cpu/event=0xd3,period=0x186a3,umask=0x4/",,"Retired load uop whose Data Source was: remote DRAM either Snoop not needed or Snoop Miss (RspI)  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Retired load uop whose Data Source was: remote DRAM either Snoop not needed or Snoop Miss (RspI)  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_load_uops_l3_miss_retired.remote_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xd3,period=0x186a3,umask=0x20/",,Retired load uop whose Data Source was: forwarded from remote cache  Supports address when precise.  Spec update: HSM30 (Precise event),Retired load uop whose Data Source was: forwarded from remote cache  Supports address when precise.  Spec update: HSM30 (Precise event)
mem_load_uops_l3_miss_retired.remote_hitm,,Kernel PMU event,cpu,cache,"cpu/event=0xd3,period=0x186a3,umask=0x10/",,Retired load uop whose Data Source was: Remote cache HITM  Supports address when precise.  Spec update: HSM30 (Precise event),Retired load uop whose Data Source was: Remote cache HITM  Supports address when precise.  Spec update: HSM30 (Precise event)
mem_load_uops_retired.hit_lfb,,Kernel PMU event,cpu,cache,"cpu/event=0xd1,period=0x186a3,umask=0x40/",,Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready  Supports address when precise.  Spec update: HSM30 (Precise event),Retired load uops which data sources were load uops missed L1 but hit FB due to preceding miss to the same cache line with data not ready  Supports address when precise.  Spec update: HSM30 (Precise event)
mem_load_uops_retired.l1_hit,,Kernel PMU event,cpu,cache,"cpu/event=0xd1,period=0x1e8483,umask=0x1/",,"Retired load uops with L1 cache hits as data sources  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Retired load uops with L1 cache hits as data sources  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_load_uops_retired.l1_miss,,Kernel PMU event,cpu,cache,"cpu/event=0xd1,period=0x186a3,umask=0x8/",,Retired load uops misses in L1 cache as data sources  Supports address when precise.  Spec update: HSM30 (Precise event),Retired load uops missed L1 cache as data sources  Supports address when precise.  Spec update: HSM30 (Precise event)
mem_load_uops_retired.l2_hit,,Kernel PMU event,cpu,cache,"cpu/event=0xd1,period=0x186a3,umask=0x2/",,"Retired load uops with L2 cache hits as data sources  Supports address when precise.  Spec update: HSD76, HSD29, HSM30 (Precise event)","Retired load uops with L2 cache hits as data sources  Supports address when precise.  Spec update: HSD76, HSD29, HSM30 (Precise event)"
mem_load_uops_retired.l2_miss,,Kernel PMU event,cpu,cache,"cpu/event=0xd1,period=0xc365,umask=0x10/",,"Miss in mid-level (L2) cache. Excludes Unknown data-source  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Retired load uops missed L2. Unknown data source excluded  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_load_uops_retired.l3_hit,,Kernel PMU event,cpu,cache,"cpu/event=0xd1,period=0xc365,umask=0x4/",,"Retired load uops which data sources were data hits in L3 without snoops required  Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM26, HSM30 (Precise event)","Retired load uops with L3 cache hits as data sources  Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM26, HSM30 (Precise event)"
mem_load_uops_retired.l3_miss,,Kernel PMU event,cpu,cache,"cpu/event=0xd1,period=0x186a3,umask=0x20/",,"Miss in last-level (L3) cache. Excludes Unknown data-source  Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM26, HSM30 (Precise event)","Retired load uops missed L3. Excludes unknown data source   Supports address when precise.  Spec update: HSD74, HSD29, HSD25, HSM26, HSM30 (Precise event)"
mem_uops_retired.all_loads,,Kernel PMU event,cpu,cache,"cpu/event=0xd0,period=0x1e8483,umask=0x81/",,"Retired load uops  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Counts all retired load uops. This event accounts for SW prefetch uops of PREFETCHNTA or PREFETCHT0/1/2 or PREFETCHW  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_uops_retired.all_stores,,Kernel PMU event,cpu,cache,"cpu/event=0xd0,period=0x1e8483,umask=0x82/",,"Retired store uops  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Counts all retired store uops  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_uops_retired.lock_loads,,Kernel PMU event,cpu,cache,"cpu/event=0xd0,period=0x186a3,umask=0x21/",,"Retired load uops with locked access  Supports address when precise.  Spec update: HSD76, HSD29, HSM30 (Precise event)","Retired load uops with locked access  Supports address when precise.  Spec update: HSD76, HSD29, HSM30 (Precise event)"
mem_uops_retired.split_loads,,Kernel PMU event,cpu,cache,"cpu/event=0xd0,period=0x186a3,umask=0x41/",,"Retired load uops that split across a cacheline boundary  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Retired load uops that split across a cacheline boundary  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_uops_retired.split_stores,,Kernel PMU event,cpu,cache,"cpu/event=0xd0,period=0x186a3,umask=0x42/",,"Retired store uops that split across a cacheline boundary  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Retired store uops that split across a cacheline boundary  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_uops_retired.stlb_miss_loads,,Kernel PMU event,cpu,cache,"cpu/event=0xd0,period=0x186a3,umask=0x11/",,"Retired load uops that miss the STLB  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Retired load uops that miss the STLB  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
mem_uops_retired.stlb_miss_stores,,Kernel PMU event,cpu,cache,"cpu/event=0xd0,period=0x186a3,umask=0x12/",,"Retired store uops that miss the STLB  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)","Retired store uops that miss the STLB  Supports address when precise.  Spec update: HSD29, HSM30 (Precise event)"
offcore_requests.all_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0xb0,period=0x186a3,umask=0x8/",,Demand and prefetch data reads,Data read requests sent to uncore (demand and prefetch)
offcore_requests.demand_code_rd,,Kernel PMU event,cpu,cache,"cpu/event=0xb0,period=0x186a3,umask=0x2/",,Cacheable and noncacheable code read requests,Demand code read requests sent to uncore
offcore_requests.demand_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0xb0,period=0x186a3,umask=0x1/",,"Demand Data Read requests sent to uncore  Spec update: HSD78, HSM80","Demand data read requests sent to uncore  Spec update: HSD78, HSM80"
offcore_requests.demand_rfo,,Kernel PMU event,cpu,cache,"cpu/event=0xb0,period=0x186a3,umask=0x4/",,"Demand RFO requests including regular RFOs, locks, ItoM","Demand RFO read requests sent to uncore, including regular RFOs, locks, ItoM"
offcore_requests_buffer.sq_full,,Kernel PMU event,cpu,cache,"cpu/event=0xb2,period=0x1e8483,umask=0x1/",,Offcore requests buffer cannot take more entries for this thread core,Offcore requests buffer cannot take more entries for this thread core
offcore_requests_outstanding.all_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0x60,period=0x1e8483,umask=0x8/",,"Offcore outstanding cacheable Core Data Read transactions in SuperQueue (SQ), queue to uncore  Spec update: HSD62, HSD61, HSM63","Offcore outstanding cacheable data read transactions in SQ to uncore. Set Cmask=1 to count cycles  Spec update: HSD62, HSD61, HSM63"
offcore_requests_outstanding.cycles_with_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0x60,cmask=0x1,period=0x1e8483,umask=0x8/",,"Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore  Spec update: HSD62, HSD61, HSM63","Cycles when offcore outstanding cacheable Core Data Read transactions are present in SuperQueue (SQ), queue to uncore  Spec update: HSD62, HSD61, HSM63"
offcore_requests_outstanding.cycles_with_demand_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0x60,cmask=0x1,period=0x1e8483,umask=0x1/",,"Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore  Spec update: HSD78, HSD62, HSD61, HSM63, HSM80","Cycles when offcore outstanding Demand Data Read transactions are present in SuperQueue (SQ), queue to uncore  Spec update: HSD78, HSD62, HSD61, HSM63, HSM80"
offcore_requests_outstanding.cycles_with_demand_rfo,,Kernel PMU event,cpu,cache,"cpu/event=0x60,cmask=0x1,period=0x1e8483,umask=0x4/",,"Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle  Spec update: HSD62, HSD61, HSM63","Offcore outstanding demand rfo reads transactions in SuperQueue (SQ), queue to uncore, every cycle  Spec update: HSD62, HSD61, HSM63"
offcore_requests_outstanding.demand_code_rd,,Kernel PMU event,cpu,cache,"cpu/event=0x60,period=0x1e8483,umask=0x2/",,"Offcore outstanding code reads transactions in SuperQueue (SQ), queue to uncore, every cycle  Spec update: HSD62, HSD61, HSM63","Offcore outstanding Demand code Read transactions in SQ to uncore. Set Cmask=1 to count cycles  Spec update: HSD62, HSD61, HSM63"
offcore_requests_outstanding.demand_data_rd,,Kernel PMU event,cpu,cache,"cpu/event=0x60,period=0x1e8483,umask=0x1/",,"Offcore outstanding Demand Data Read transactions in uncore queue  Spec update: HSD78, HSD62, HSD61, HSM63, HSM80","Offcore outstanding demand data read transactions in SQ to uncore. Set Cmask=1 to count cycles  Spec update: HSD78, HSD62, HSD61, HSM63, HSM80"
offcore_requests_outstanding.demand_data_rd_ge_6,,Kernel PMU event,cpu,cache,"cpu/event=0x60,cmask=0x6,period=0x1e8483,umask=0x1/",,"Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue  Spec update: HSD78, HSD62, HSD61, HSM63, HSM80","Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue  Spec update: HSD78, HSD62, HSD61, HSM63, HSM80"
offcore_requests_outstanding.demand_rfo,,Kernel PMU event,cpu,cache,"cpu/event=0x60,period=0x1e8483,umask=0x4/",,"Offcore outstanding RFO store transactions in SuperQueue (SQ), queue to uncore  Spec update: HSD62, HSD61, HSM63","Offcore outstanding RFO store transactions in SQ to uncore. Set Cmask=1 to count cycles  Spec update: HSD62, HSD61, HSM63"
offcore_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1/",,"Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction","Offcore response can be programmed only with a specific pair of event select and counter MSR, and with specific event codes and predefine mask bit value in a dedicated MSR to specify attributes of the offcore transaction"
offcore_response.all_code_rd.llc_hit.hit_other_core_no_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0244/",,Counts all demand & prefetch code reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded,Counts all demand & prefetch code reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded
offcore_response.all_data_rd.llc_hit.hit_other_core_no_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0091/",,Counts all demand & prefetch data reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded,Counts all demand & prefetch data reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded
offcore_response.all_data_rd.llc_hit.hitm_other_core,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0091/",,Counts all demand & prefetch data reads hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded,Counts all demand & prefetch data reads hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded
offcore_response.all_reads.llc_hit.hit_other_core_no_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c07f7/",,Counts all data/code/rfo reads (demand & prefetch) hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded,Counts all data/code/rfo reads (demand & prefetch) hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded
offcore_response.all_reads.llc_hit.hitm_other_core,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c07f7/",,Counts all data/code/rfo reads (demand & prefetch) hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded,Counts all data/code/rfo reads (demand & prefetch) hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded
offcore_response.all_requests.llc_hit.any_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x803c8fff/",,Counts all requests hit in the L3,Counts all requests hit in the L3
offcore_response.all_rfo.llc_hit.hit_other_core_no_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0122/",,Counts all demand & prefetch RFOs hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded,Counts all demand & prefetch RFOs hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded
offcore_response.all_rfo.llc_hit.hitm_other_core,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0122/",,Counts all demand & prefetch RFOs hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded,Counts all demand & prefetch RFOs hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded
offcore_response.demand_code_rd.llc_hit.hit_other_core_no_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0004/",,Counts all demand code reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded,Counts all demand code reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded
offcore_response.demand_code_rd.llc_hit.hitm_other_core,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0004/",,Counts all demand code reads hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded,Counts all demand code reads hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded
offcore_response.demand_data_rd.llc_hit.hit_other_core_no_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0001/",,Counts demand data reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded,Counts demand data reads hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded
offcore_response.demand_data_rd.llc_hit.hitm_other_core,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0001/",,Counts demand data reads hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded,Counts demand data reads hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded
offcore_response.demand_rfo.llc_hit.hit_other_core_no_fwd,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0002/",,Counts all demand data writes (RFOs) hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded,Counts all demand data writes (RFOs) hit in the L3 and the snoops to sibling cores hit in either E/S state and the line is not forwarded
offcore_response.demand_rfo.llc_hit.hitm_other_core,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3c0002/",,Counts all demand data writes (RFOs) hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded,Counts all demand data writes (RFOs) hit in the L3 and the snoop to one of the sibling cores hits the line in M state and the line is forwarded
offcore_response.pf_l2_code_rd.llc_hit.any_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x803c0040/",,Counts all prefetch (that bring data to LLC only) code reads hit in the L3,Counts all prefetch (that bring data to LLC only) code reads hit in the L3
offcore_response.pf_l2_data_rd.llc_hit.any_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x803c0010/",,Counts prefetch (that bring data to L2) data reads hit in the L3,Counts prefetch (that bring data to L2) data reads hit in the L3
offcore_response.pf_l2_rfo.llc_hit.any_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x803c0020/",,Counts all prefetch (that bring data to L2) RFOs hit in the L3,Counts all prefetch (that bring data to L2) RFOs hit in the L3
offcore_response.pf_llc_code_rd.llc_hit.any_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x803c0200/",,Counts prefetch (that bring data to LLC only) code reads hit in the L3,Counts prefetch (that bring data to LLC only) code reads hit in the L3
offcore_response.pf_llc_data_rd.llc_hit.any_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x803c0080/",,Counts all prefetch (that bring data to LLC only) data reads hit in the L3,Counts all prefetch (that bring data to LLC only) data reads hit in the L3
offcore_response.pf_llc_rfo.llc_hit.any_response,,Kernel PMU event,cpu,cache,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x803c0100/",,Counts all prefetch (that bring data to LLC only) RFOs hit in the L3,Counts all prefetch (that bring data to LLC only) RFOs hit in the L3
sq_misc.split_lock,,Kernel PMU event,cpu,cache,"cpu/event=0xf4,period=0x186a3,umask=0x10/",,Split locks in SQ,Split locks in SQ
avx_insts.all,,Kernel PMU event,cpu,floating point,"cpu/event=0xc6,period=0x1e8483,umask=0x7/",,"Approximate counts of AVX & AVX2 256-bit instructions, including non-arithmetic instructions, loads, and stores.  May count non-AVX instructions that employ 256-bit operations, including (but not necessarily limited to) rep string instructions that use 256-bit loads and stores for optimized performance, XSAVE* and XRSTOR*, and operations that transition the x87 FPU data registers between x87 and MMX",Note that a whole rep string only counts AVX_INST.ALL once
fp_assist.any,,Kernel PMU event,cpu,floating point,"cpu/event=0xca,cmask=0x1,period=0x186a3,umask=0x1e/",,Cycles with any input/output SSE or FP assist,Cycles with any input/output SSE* or FP assists
fp_assist.simd_input,,Kernel PMU event,cpu,floating point,"cpu/event=0xca,period=0x186a3,umask=0x10/",,Number of SIMD FP assists due to input values,Number of SIMD FP assists due to input values
fp_assist.simd_output,,Kernel PMU event,cpu,floating point,"cpu/event=0xca,period=0x186a3,umask=0x8/",,Number of SIMD FP assists due to Output values,Number of SIMD FP assists due to output values
fp_assist.x87_input,,Kernel PMU event,cpu,floating point,"cpu/event=0xca,period=0x186a3,umask=0x4/",,Number of X87 assists due to input value,Number of X87 FP assists due to input values
fp_assist.x87_output,,Kernel PMU event,cpu,floating point,"cpu/event=0xca,period=0x186a3,umask=0x2/",,Number of X87 assists due to output value,Number of X87 FP assists due to output values
move_elimination.simd_eliminated,,Kernel PMU event,cpu,floating point,"cpu/event=0x58,period=0xf4243,umask=0x2/",,Number of SIMD Move Elimination candidate uops that were eliminated,Number of SIMD move elimination candidate uops that were eliminated
move_elimination.simd_not_eliminated,,Kernel PMU event,cpu,floating point,"cpu/event=0x58,period=0xf4243,umask=0x8/",,Number of SIMD Move Elimination candidate uops that were not eliminated,Number of SIMD move elimination candidate uops that were not eliminated
other_assists.avx_to_sse,,Kernel PMU event,cpu,floating point,"cpu/event=0xc1,period=0x186a3,umask=0x8/",,"Number of transitions from AVX-256 to legacy SSE when penalty applicable  Spec update: HSD56, HSM57","Number of transitions from AVX-256 to legacy SSE when penalty applicable  Spec update: HSD56, HSM57"
other_assists.sse_to_avx,,Kernel PMU event,cpu,floating point,"cpu/event=0xc1,period=0x186a3,umask=0x10/",,"Number of transitions from SSE to AVX-256 when penalty applicable  Spec update: HSD56, HSM57","Number of transitions from SSE to AVX-256 when penalty applicable  Spec update: HSD56, HSM57"
baclears.any,,Kernel PMU event,cpu,frontend,"cpu/event=0xe6,period=0x186a3,umask=0x1f/",,"Counts the total number when the front end is resteered, mainly when the BPU cannot provide a correct prediction and this is corrected by other branch handling mechanisms at the front end",Number of front end re-steers due to BPU misprediction
dsb2mite_switches.penalty_cycles,,Kernel PMU event,cpu,frontend,"cpu/event=0xab,period=0x1e8483,umask=0x2/",,Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles,Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles
icache.hit,,Kernel PMU event,cpu,frontend,"cpu/event=0x80,period=0x1e8483,umask=0x1/",,"Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches","Number of Instruction Cache, Streaming Buffer and Victim Cache Reads. both cacheable and noncacheable, including UC fetches"
icache.ifdata_stall,,Kernel PMU event,cpu,frontend,"cpu/event=0x80,period=0x1e8483,umask=0x4/",,Cycles where a code fetch is stalled due to L1 instruction-cache miss,Cycles where a code fetch is stalled due to L1 instruction-cache miss
icache.ifetch_stall,,Kernel PMU event,cpu,frontend,"cpu/event=0x80,period=0x1e8483,umask=0x4/",,Cycles where a code fetch is stalled due to L1 instruction-cache miss,Cycles where a code fetch is stalled due to L1 instruction-cache miss
icache.misses,,Kernel PMU event,cpu,frontend,"cpu/event=0x80,period=0x30d43,umask=0x2/",,"Number of Instruction Cache, Streaming Buffer and Victim Cache Misses. Includes Uncacheable accesses",This event counts Instruction Cache (ICACHE) misses
idq.all_dsb_cycles_4_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x4,period=0x1e8483,umask=0x18/",,Cycles Decode Stream Buffer (DSB) is delivering 4 Uops,Counts cycles DSB is delivered four uops. Set Cmask = 4
idq.all_dsb_cycles_any_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,period=0x1e8483,umask=0x18/",,Cycles Decode Stream Buffer (DSB) is delivering any Uop,Counts cycles DSB is delivered at least one uops. Set Cmask = 1
idq.all_mite_cycles_4_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x4,period=0x1e8483,umask=0x24/",,Cycles MITE is delivering 4 Uops,Counts cycles MITE is delivered four uops. Set Cmask = 4
idq.all_mite_cycles_any_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,period=0x1e8483,umask=0x24/",,Cycles MITE is delivering any Uop,Counts cycles MITE is delivered at least one uop. Set Cmask = 1
idq.dsb_cycles,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,period=0x1e8483,umask=0x8/",,Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path,Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from Decode Stream Buffer (DSB) path
idq.dsb_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,period=0x1e8483,umask=0x8/",,Uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path,Increment each cycle. # of uops delivered to IDQ from DSB path. Set Cmask = 1 to count cycles
idq.empty,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,period=0x1e8483,umask=0x2/",,Instruction Decode Queue (IDQ) empty cycles  Spec update: HSD135,Counts cycles the IDQ is empty  Spec update: HSD135
idq.mite_all_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,period=0x1e8483,umask=0x3c/",,Uops delivered to Instruction Decode Queue (IDQ) from MITE path,Number of uops delivered to IDQ from any path
idq.mite_cycles,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,period=0x1e8483,umask=0x4/",,Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path,Cycles when uops are being delivered to Instruction Decode Queue (IDQ) from MITE path
idq.mite_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,period=0x1e8483,umask=0x4/",,Uops delivered to Instruction Decode Queue (IDQ) from MITE path,Increment each cycle # of uops delivered to IDQ from MITE path. Set Cmask = 1 to count cycles
idq.ms_cycles,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,period=0x1e8483,umask=0x30/",,Cycles when uops are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequencer (MS) is busy,"This event counts cycles during which the microcode sequencer assisted the Front-end in delivering uops.  Microcode assists are used for complex instructions or scenarios that can't be handled by the standard decoder.  Using other instructions, if possible, will usually improve performance"
idq.ms_dsb_cycles,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,period=0x1e8483,umask=0x10/",,Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequencer (MS) is busy,Cycles when uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequencer (MS) is busy
idq.ms_dsb_occur,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,edge=0x1,period=0x1e8483,umask=0x10/",,Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequencer (MS) is busy,Deliveries to Instruction Decode Queue (IDQ) initiated by Decode Stream Buffer (DSB) while Microcode Sequencer (MS) is busy
idq.ms_dsb_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,period=0x1e8483,umask=0x10/",,Uops initiated by Decode Stream Buffer (DSB) that are being delivered to Instruction Decode Queue (IDQ) while Microcode Sequencer (MS) is busy,Increment each cycle # of uops delivered to IDQ when MS_busy by DSB. Set Cmask = 1 to count cycles. Add Edge=1 to count # of delivery
idq.ms_mite_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,period=0x1e8483,umask=0x20/",,Uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while Microcode Sequencer (MS) is busy,Increment each cycle # of uops delivered to IDQ when MS_busy by MITE. Set Cmask = 1 to count cycles
idq.ms_switches,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,cmask=0x1,edge=0x1,period=0x1e8483,umask=0x30/",,Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer,Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer
idq.ms_uops,,Kernel PMU event,cpu,frontend,"cpu/event=0x79,period=0x1e8483,umask=0x30/",,Uops delivered to Instruction Decode Queue (IDQ) while Microcode Sequencer (MS) is busy,"This event counts uops delivered by the Front-end with the assistance of the microcode sequencer.  Microcode assists are used for complex instructions or scenarios that can't be handled by the standard decoder.  Using other instructions, if possible, will usually improve performance"
idq_uops_not_delivered.core,,Kernel PMU event,cpu,frontend,"cpu/event=0x9c,period=0x1e8483,umask=0x1/",,Uops not delivered to Resource Allocation Table (RAT) per thread when backend of the machine is not stalled  Spec update: HSD135,This event count the number of undelivered (unallocated) uops from the Front-end to the Resource Allocation Table (RAT) while the Back-end of the processor is not stalled. The Front-end can allocate up to 4 uops per cycle so this event can increment 0-4 times per cycle depending on the number of unallocated uops. This event is counted on a per-core basis  Spec update: HSD135
idq_uops_not_delivered.cycles_0_uops_deliv.core,,Kernel PMU event,cpu,frontend,"cpu/event=0x9c,cmask=0x4,period=0x1e8483,umask=0x1/",,Cycles per thread when 4 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled  Spec update: HSD135,This event counts the number cycles during which the Front-end allocated exactly zero uops to the Resource Allocation Table (RAT) while the Back-end of the processor is not stalled.  This event is counted on a per-core basis  Spec update: HSD135
idq_uops_not_delivered.cycles_fe_was_ok,,Kernel PMU event,cpu,frontend,"cpu/event=0x9c,cmask=0x1,inv=0x1,period=0x1e8483,umask=0x1/",,Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE  Spec update: HSD135,Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE  Spec update: HSD135
idq_uops_not_delivered.cycles_le_1_uop_deliv.core,,Kernel PMU event,cpu,frontend,"cpu/event=0x9c,cmask=0x3,period=0x1e8483,umask=0x1/",,Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled  Spec update: HSD135,Cycles per thread when 3 or more uops are not delivered to Resource Allocation Table (RAT) when backend of the machine is not stalled  Spec update: HSD135
idq_uops_not_delivered.cycles_le_2_uop_deliv.core,,Kernel PMU event,cpu,frontend,"cpu/event=0x9c,cmask=0x2,period=0x1e8483,umask=0x1/",,Cycles with less than 2 uops delivered by the front end  Spec update: HSD135,Cycles with less than 2 uops delivered by the front end  Spec update: HSD135
idq_uops_not_delivered.cycles_le_3_uop_deliv.core,,Kernel PMU event,cpu,frontend,"cpu/event=0x9c,cmask=0x1,period=0x1e8483,umask=0x1/",,Cycles with less than 3 uops delivered by the front end  Spec update: HSD135,Cycles with less than 3 uops delivered by the front end  Spec update: HSD135
hle_retired.aborted,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x4/",,Number of times an HLE execution aborted due to any reasons (multiple categories may count as one) (Precise event),Number of times an HLE execution aborted due to any reasons (multiple categories may count as one) (Precise event)
hle_retired.aborted_misc1,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x8/",,"Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts)","Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts)"
hle_retired.aborted_misc2,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x10/",,Number of times an HLE execution aborted due to uncommon conditions,Number of times an HLE execution aborted due to uncommon conditions
hle_retired.aborted_misc3,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x20/",,Number of times an HLE execution aborted due to HLE-unfriendly instructions,Number of times an HLE execution aborted due to HLE-unfriendly instructions
hle_retired.aborted_misc4,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x40/",,Number of times an HLE execution aborted due to incompatible memory type  Spec update: HSD65,Number of times an HLE execution aborted due to incompatible memory type  Spec update: HSD65
hle_retired.aborted_misc5,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x80/",,Number of times an HLE execution aborted due to none of the previous 4 categories (e.g. interrupts),Number of times an HLE execution aborted due to none of the previous 4 categories (e.g. interrupts)
hle_retired.commit,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x2/",,Number of times an HLE execution successfully committed,Number of times an HLE execution successfully committed
hle_retired.start,,Kernel PMU event,cpu,memory,"cpu/event=0xc8,period=0x1e8483,umask=0x1/",,Number of times an HLE execution started,Number of times an HLE execution started
machine_clears.memory_ordering,,Kernel PMU event,cpu,memory,"cpu/event=0xc3,period=0x186a3,umask=0x2/",,Counts the number of machine clears due to memory order conflicts,This event counts the number of memory ordering machine clears detected. Memory ordering machine clears can result from memory address aliasing or snoops from another hardware thread or core to data inflight in the pipeline.  Machine clears can have a significant performance impact if they are happening frequently
mem_trans_retired.load_latency_gt_128,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0x3f1,umask=0x1,ldlat=0x80/",,"Randomly selected loads with latency value being above 128  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 128  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
mem_trans_retired.load_latency_gt_16,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0x4e2b,umask=0x1,ldlat=0x10/",,"Randomly selected loads with latency value being above 16  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 16  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
mem_trans_retired.load_latency_gt_256,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0x1f7,umask=0x1,ldlat=0x100/",,"Randomly selected loads with latency value being above 256  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 256  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
mem_trans_retired.load_latency_gt_32,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0x186a3,umask=0x1,ldlat=0x20/",,"Randomly selected loads with latency value being above 32  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 32  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
mem_trans_retired.load_latency_gt_4,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0x186a3,umask=0x1,ldlat=0x4/",,"Randomly selected loads with latency value being above 4  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 4  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
mem_trans_retired.load_latency_gt_512,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0x65,umask=0x1,ldlat=0x200/",,"Randomly selected loads with latency value being above 512  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 512  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
mem_trans_retired.load_latency_gt_64,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0x7d3,umask=0x1,ldlat=0x40/",,"Randomly selected loads with latency value being above 64  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 64  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
mem_trans_retired.load_latency_gt_8,,Kernel PMU event,cpu,memory,"cpu/event=0xcd,period=0xc365,umask=0x1,ldlat=0x8/",,"Randomly selected loads with latency value being above 8  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)","Randomly selected loads with latency value being above 8  Supports address when precise.  Spec update: HSD76, HSD25, HSM26 (Must be precise)"
misalign_mem_ref.loads,,Kernel PMU event,cpu,memory,"cpu/event=0x5,period=0x1e8483,umask=0x1/",,Speculative cache line split load uops dispatched to L1 cache,Speculative cache-line split load uops dispatched to L1D
misalign_mem_ref.stores,,Kernel PMU event,cpu,memory,"cpu/event=0x5,period=0x1e8483,umask=0x2/",,Speculative cache line split STA uops dispatched to L1 cache,Speculative cache-line split store-address uops dispatched to L1D
offcore_response.all_code_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00244/",,Counts all demand & prefetch code reads miss in the L3,Counts all demand & prefetch code reads miss in the L3
offcore_response.all_code_rd.llc_miss.local_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x400244/",,Counts all demand & prefetch code reads miss the L3 and the data is returned from local dram,Counts all demand & prefetch code reads miss the L3 and the data is returned from local dram
offcore_response.all_data_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00091/",,Counts all demand & prefetch data reads miss in the L3,Counts all demand & prefetch data reads miss in the L3
offcore_response.all_data_rd.llc_miss.local_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x400091/",,Counts all demand & prefetch data reads miss the L3 and the data is returned from local dram,Counts all demand & prefetch data reads miss the L3 and the data is returned from local dram
offcore_response.all_data_rd.llc_miss.remote_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3f800091/",,Counts all demand & prefetch data reads miss the L3 and the data is returned from remote dram,Counts all demand & prefetch data reads miss the L3 and the data is returned from remote dram
offcore_response.all_data_rd.llc_miss.remote_hit_forward,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3fc00091/",,Counts all demand & prefetch data reads miss the L3 and clean or shared data is transferred from remote cache,Counts all demand & prefetch data reads miss the L3 and clean or shared data is transferred from remote cache
offcore_response.all_data_rd.llc_miss.remote_hitm,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3fc00091/",,Counts all demand & prefetch data reads miss the L3 and the modified data is transferred from remote cache,Counts all demand & prefetch data reads miss the L3 and the modified data is transferred from remote cache
offcore_response.all_reads.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc007f7/",,Counts all data/code/rfo reads (demand & prefetch) miss in the L3,Counts all data/code/rfo reads (demand & prefetch) miss in the L3
offcore_response.all_reads.llc_miss.local_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x4007f7/",,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and the data is returned from local dram,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and the data is returned from local dram
offcore_response.all_reads.llc_miss.remote_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3f8007f7/",,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and the data is returned from remote dram,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and the data is returned from remote dram
offcore_response.all_reads.llc_miss.remote_hit_forward,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3fc007f7/",,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and clean or shared data is transferred from remote cache,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and clean or shared data is transferred from remote cache
offcore_response.all_reads.llc_miss.remote_hitm,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3fc007f7/",,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and the modified data is transferred from remote cache,Counts all data/code/rfo reads (demand & prefetch) miss the L3 and the modified data is transferred from remote cache
offcore_response.all_requests.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc08fff/",,Counts all requests miss in the L3,Counts all requests miss in the L3
offcore_response.all_rfo.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00122/",,Counts all demand & prefetch RFOs miss in the L3,Counts all demand & prefetch RFOs miss in the L3
offcore_response.all_rfo.llc_miss.local_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x400122/",,Counts all demand & prefetch RFOs miss the L3 and the data is returned from local dram,Counts all demand & prefetch RFOs miss the L3 and the data is returned from local dram
offcore_response.demand_code_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00004/",,Counts all demand code reads miss in the L3,Counts all demand code reads miss in the L3
offcore_response.demand_code_rd.llc_miss.local_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x400004/",,Counts all demand code reads miss the L3 and the data is returned from local dram,Counts all demand code reads miss the L3 and the data is returned from local dram
offcore_response.demand_data_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00001/",,Counts demand data reads miss in the L3,Counts demand data reads miss in the L3
offcore_response.demand_data_rd.llc_miss.local_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x400001/",,Counts demand data reads miss the L3 and the data is returned from local dram,Counts demand data reads miss the L3 and the data is returned from local dram
offcore_response.demand_rfo.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00002/",,Counts all demand data writes (RFOs) miss in the L3,Counts all demand data writes (RFOs) miss in the L3
offcore_response.demand_rfo.llc_miss.local_dram,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x400002/",,Counts all demand data writes (RFOs) miss the L3 and the data is returned from local dram,Counts all demand data writes (RFOs) miss the L3 and the data is returned from local dram
offcore_response.demand_rfo.llc_miss.remote_hitm,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0x3fc00002/",,Counts all demand data writes (RFOs) miss the L3 and the modified data is transferred from remote cache,Counts all demand data writes (RFOs) miss the L3 and the modified data is transferred from remote cache
offcore_response.pf_l2_code_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00040/",,Counts all prefetch (that bring data to LLC only) code reads miss in the L3,Counts all prefetch (that bring data to LLC only) code reads miss in the L3
offcore_response.pf_l2_data_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00010/",,Counts prefetch (that bring data to L2) data reads miss in the L3,Counts prefetch (that bring data to L2) data reads miss in the L3
offcore_response.pf_l2_rfo.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00020/",,Counts all prefetch (that bring data to L2) RFOs miss in the L3,Counts all prefetch (that bring data to L2) RFOs miss in the L3
offcore_response.pf_llc_code_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00200/",,Counts prefetch (that bring data to LLC only) code reads miss in the L3,Counts prefetch (that bring data to LLC only) code reads miss in the L3
offcore_response.pf_llc_data_rd.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00080/",,Counts all prefetch (that bring data to LLC only) data reads miss in the L3,Counts all prefetch (that bring data to LLC only) data reads miss in the L3
offcore_response.pf_llc_rfo.llc_miss.any_response,,Kernel PMU event,cpu,memory,"cpu/event=0xb7,period=0x186a3,umask=0x1,offcore_rsp=0xbfc00100/",,Counts all prefetch (that bring data to LLC only) RFOs miss in the L3,Counts all prefetch (that bring data to LLC only) RFOs miss in the L3
rtm_retired.aborted,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x4/",,Number of times an RTM execution aborted due to any reasons (multiple categories may count as one) (Precise event),Number of times an RTM execution aborted due to any reasons (multiple categories may count as one) (Precise event)
rtm_retired.aborted_misc1,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x8/",,Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts),Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts)
rtm_retired.aborted_misc2,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x10/",,"Number of times an RTM execution aborted due to various memory events (e.g., read/write capacity and conflicts)","Number of times an RTM execution aborted due to various memory events (e.g., read/write capacity and conflicts)"
rtm_retired.aborted_misc3,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x20/",,Number of times an RTM execution aborted due to HLE-unfriendly instructions,Number of times an RTM execution aborted due to HLE-unfriendly instructions
rtm_retired.aborted_misc4,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x40/",,Number of times an RTM execution aborted due to incompatible memory type  Spec update: HSD65,Number of times an RTM execution aborted due to incompatible memory type  Spec update: HSD65
rtm_retired.aborted_misc5,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x80/",,Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt),Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt)
rtm_retired.commit,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x2/",,Number of times an RTM execution successfully committed,Number of times an RTM execution successfully committed
rtm_retired.start,,Kernel PMU event,cpu,memory,"cpu/event=0xc9,period=0x1e8483,umask=0x1/",,Number of times an RTM execution started,Number of times an RTM execution started
tx_exec.misc1,,Kernel PMU event,cpu,memory,"cpu/event=0x5d,period=0x1e8483,umask=0x1/",,"Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort","Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort"
tx_exec.misc2,,Kernel PMU event,cpu,memory,"cpu/event=0x5d,period=0x1e8483,umask=0x2/",,"Counts the number of times a class of instructions (e.g., vzeroupper) that may cause a transactional abort was executed inside a transactional region","Counts the number of times a class of instructions (e.g., vzeroupper) that may cause a transactional abort was executed inside a transactional region"
tx_exec.misc3,,Kernel PMU event,cpu,memory,"cpu/event=0x5d,period=0x1e8483,umask=0x4/",,Counts the number of times an instruction execution caused the transactional nest count supported to be exceeded,Counts the number of times an instruction execution caused the transactional nest count supported to be exceeded
tx_exec.misc4,,Kernel PMU event,cpu,memory,"cpu/event=0x5d,period=0x1e8483,umask=0x8/",,Counts the number of times a XBEGIN instruction was executed inside an HLE transactional region,Counts the number of times a XBEGIN instruction was executed inside an HLE transactional region
tx_exec.misc5,,Kernel PMU event,cpu,memory,"cpu/event=0x5d,period=0x1e8483,umask=0x10/",,Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region,Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region
tx_mem.abort_capacity_write,,Kernel PMU event,cpu,memory,"cpu/event=0x54,period=0x1e8483,umask=0x2/",,Number of times a transactional abort was signaled due to a data capacity limitation for transactional writes,Number of times a transactional abort was signaled due to a data capacity limitation for transactional writes
tx_mem.abort_conflict,,Kernel PMU event,cpu,memory,"cpu/event=0x54,period=0x1e8483,umask=0x1/",,Number of times a transactional abort was signaled due to a data conflict on a transactionally accessed address,Number of times a transactional abort was signaled due to a data conflict on a transactionally accessed address
tx_mem.abort_hle_elision_buffer_mismatch,,Kernel PMU event,cpu,memory,"cpu/event=0x54,period=0x1e8483,umask=0x10/",,Number of times an HLE transactional execution aborted due to XRELEASE lock not satisfying the address and value requirements in the elision buffer,Number of times an HLE transactional execution aborted due to XRELEASE lock not satisfying the address and value requirements in the elision buffer
tx_mem.abort_hle_elision_buffer_not_empty,,Kernel PMU event,cpu,memory,"cpu/event=0x54,period=0x1e8483,umask=0x8/",,Number of times an HLE transactional execution aborted due to NoAllocatedElisionBuffer being non-zero,Number of times an HLE transactional execution aborted due to NoAllocatedElisionBuffer being non-zero
tx_mem.abort_hle_elision_buffer_unsupported_alignment,,Kernel PMU event,cpu,memory,"cpu/event=0x54,period=0x1e8483,umask=0x20/",,Number of times an HLE transactional execution aborted due to an unsupported read alignment from the elision buffer,Number of times an HLE transactional execution aborted due to an unsupported read alignment from the elision buffer
tx_mem.abort_hle_store_to_elided_lock,,Kernel PMU event,cpu,memory,"cpu/event=0x54,period=0x1e8483,umask=0x4/",,Number of times a HLE transactional region aborted due to a non XRELEASE prefixed instruction writing to an elided lock in the elision buffer,Number of times a HLE transactional region aborted due to a non XRELEASE prefixed instruction writing to an elided lock in the elision buffer
tx_mem.hle_elision_buffer_full,,Kernel PMU event,cpu,memory,"cpu/event=0x54,period=0x1e8483,umask=0x40/",,Number of times HLE lock could not be elided due to ElisionBufferAvailable being zero,Number of times HLE lock could not be elided due to ElisionBufferAvailable being zero
cpl_cycles.ring0,,Kernel PMU event,cpu,other,"cpu/event=0x5c,period=0x1e8483,umask=0x1/",,Unhalted core cycles when the thread is in ring 0,Unhalted core cycles when the thread is in ring 0
cpl_cycles.ring0_trans,,Kernel PMU event,cpu,other,"cpu/event=0x5c,cmask=0x1,edge=0x1,period=0x186a3,umask=0x1/",,Number of intervals between processor halts while thread is in ring 0,Number of intervals between processor halts while thread is in ring 0
cpl_cycles.ring123,,Kernel PMU event,cpu,other,"cpu/event=0x5c,period=0x1e8483,umask=0x2/",,"Unhalted core cycles when thread is in rings 1, 2, or 3",Unhalted core cycles when the thread is not in ring 0
lock_cycles.split_lock_uc_lock_duration,,Kernel PMU event,cpu,other,"cpu/event=0x63,period=0x1e8483,umask=0x1/",,Cycles when L1 and L2 are locked due to UC or split lock,"Cycles in which the L1D and L2 are locked, due to a UC lock or split lock"
arith.divider_uops,,Kernel PMU event,cpu,pipeline,"cpu/event=0x14,period=0x1e8483,umask=0x2/",,"Any uop executed by the Divider. (This includes all divide uops, sqrt, ...)","Any uop executed by the Divider. (This includes all divide uops, sqrt, ...)"
br_inst_exec.all_branches,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0xff/",,Speculative and retired  branches,Counts all near executed branches (not necessarily retired)
br_inst_exec.all_conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0xc1/",,Speculative and retired macro-conditional branches,Speculative and retired macro-conditional branches
br_inst_exec.all_direct_jmp,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0xc2/",,Speculative and retired macro-unconditional branches excluding calls and indirects,Speculative and retired macro-unconditional branches excluding calls and indirects
br_inst_exec.all_direct_near_call,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0xd0/",,Speculative and retired direct near calls,Speculative and retired direct near calls
br_inst_exec.all_indirect_jump_non_call_ret,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0xc4/",,Speculative and retired indirect branches excluding calls and returns,Speculative and retired indirect branches excluding calls and returns
br_inst_exec.all_indirect_near_return,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0xc8/",,Speculative and retired indirect return branches,Speculative and retired indirect return branches
br_inst_exec.nontaken_conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0x41/",,Not taken macro-conditional branches,Not taken macro-conditional branches
br_inst_exec.taken_conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0x81/",,Taken speculative and retired macro-conditional branches,Taken speculative and retired macro-conditional branches
br_inst_exec.taken_direct_jump,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0x82/",,Taken speculative and retired macro-conditional branch instructions excluding calls and indirects,Taken speculative and retired macro-conditional branch instructions excluding calls and indirects
br_inst_exec.taken_direct_near_call,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0x90/",,Taken speculative and retired direct near calls,Taken speculative and retired direct near calls
br_inst_exec.taken_indirect_jump_non_call_ret,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0x84/",,Taken speculative and retired indirect branches excluding calls and returns,Taken speculative and retired indirect branches excluding calls and returns
br_inst_exec.taken_indirect_near_call,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0xa0/",,Taken speculative and retired indirect calls,Taken speculative and retired indirect calls
br_inst_exec.taken_indirect_near_return,,Kernel PMU event,cpu,pipeline,"cpu/event=0x88,period=0x30d43,umask=0x88/",,Taken speculative and retired indirect branches with return mnemonic,Taken speculative and retired indirect branches with return mnemonic
br_inst_retired.all_branches,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x61a89/",,All (macro) branch instructions retired,Branch instructions at retirement
br_inst_retired.all_branches_pebs,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x61a89,umask=0x4/",,All (macro) branch instructions retired (Must be precise),All (macro) branch instructions retired (Must be precise)
br_inst_retired.conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x61a89,umask=0x1/",,Conditional branch instructions retired (Precise event),Counts the number of conditional branch instructions retired (Precise event)
br_inst_retired.far_branch,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x186a3,umask=0x40/",,Far branch instructions retired,Number of far branches retired
br_inst_retired.near_call,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x186a3,umask=0x2/",,Direct and indirect near call instructions retired (Precise event),Direct and indirect near call instructions retired (Precise event)
br_inst_retired.near_call_r3,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x186a3,umask=0x2/",,Direct and indirect macro near call instructions retired (captured in ring 3) (Precise event),Direct and indirect macro near call instructions retired (captured in ring 3) (Precise event)
br_inst_retired.near_return,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x186a3,umask=0x8/",,Return instructions retired (Precise event),Counts the number of near return instructions retired (Precise event)
br_inst_retired.near_taken,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x61a89,umask=0x20/",,Taken branch instructions retired (Precise event),Number of near taken branches retired (Precise event)
br_inst_retired.not_taken,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc4,period=0x61a89,umask=0x10/",,Not taken branch instructions retired,Counts the number of not taken branch instructions retired
br_misp_exec.all_branches,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0xff/",,Speculative and retired mispredicted macro conditional branches,Counts all near executed branches (not necessarily retired)
br_misp_exec.all_conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0xc1/",,Speculative and retired mispredicted macro conditional branches,Speculative and retired mispredicted macro conditional branches
br_misp_exec.all_indirect_jump_non_call_ret,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0xc4/",,Mispredicted indirect branches excluding calls and returns,Mispredicted indirect branches excluding calls and returns
br_misp_exec.indirect,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0xe4/",,Speculative mispredicted indirect branches,Counts speculatively miss-predicted indirect branches at execution time. Counts for indirect near CALL or JMP instructions (RET excluded)
br_misp_exec.nontaken_conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0x41/",,Not taken speculative and retired mispredicted macro conditional branches,Not taken speculative and retired mispredicted macro conditional branches
br_misp_exec.taken_conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0x81/",,Taken speculative and retired mispredicted macro conditional branches,Taken speculative and retired mispredicted macro conditional branches
br_misp_exec.taken_indirect_jump_non_call_ret,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0x84/",,Taken speculative and retired mispredicted indirect branches excluding calls and returns,Taken speculative and retired mispredicted indirect branches excluding calls and returns
br_misp_exec.taken_indirect_near_call,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0xa0/",,Taken speculative and retired mispredicted indirect calls,Taken speculative and retired mispredicted indirect calls
br_misp_exec.taken_return_near,,Kernel PMU event,cpu,pipeline,"cpu/event=0x89,period=0x30d43,umask=0x88/",,Taken speculative and retired mispredicted indirect branches with return mnemonic,Taken speculative and retired mispredicted indirect branches with return mnemonic
br_misp_retired.all_branches,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc5,period=0x61a89/",,All mispredicted macro branch instructions retired,Mispredicted branch instructions at retirement
br_misp_retired.all_branches_pebs,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc5,period=0x61a89,umask=0x4/",,Mispredicted macro branch instructions retired (Must be precise),This event counts all mispredicted branch instructions retired. This is a precise event (Must be precise)
br_misp_retired.conditional,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc5,period=0x61a89,umask=0x1/",,Mispredicted conditional branch instructions retired (Precise event),Mispredicted conditional branch instructions retired (Precise event)
br_misp_retired.near_taken,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc5,period=0x61a89,umask=0x20/",,number of near branch instructions retired that were mispredicted and taken (Precise event),Number of near branch instructions retired that were taken but mispredicted (Precise event)
cpu_clk_thread_unhalted.one_thread_active,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,period=0x186a3,umask=0x2/",,Count XClk pulses when this thread is unhalted and the other thread is halted,Count XClk pulses when this thread is unhalted and the other thread is halted
cpu_clk_thread_unhalted.ref_xclk,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,period=0x186a3,umask=0x1/",,Reference cycles when the thread is unhalted (counts at 100 MHz rate),Increments at the frequency of XCLK (100 MHz) when not halted
cpu_clk_thread_unhalted.ref_xclk_any,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,any=0x1,period=0x186a3,umask=0x1/",,Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate),Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate)
cpu_clk_unhalted.one_thread_active,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,period=0x186a3,umask=0x2/",,Count XClk pulses when this thread is unhalted and the other thread is halted,Count XClk pulses when this thread is unhalted and the other thread is halted
cpu_clk_unhalted.ref_tsc,,Kernel PMU event,cpu,pipeline,"cpu/event=0,period=0x1e8483,umask=0x3/",,Reference cycles when the core is not in halt state,"This event counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state"
cpu_clk_unhalted.ref_xclk,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,period=0x186a3,umask=0x1/",,Reference cycles when the thread is unhalted (counts at 100 MHz rate),Reference cycles when the thread is unhalted. (counts at 100 MHz rate)
cpu_clk_unhalted.ref_xclk_any,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,any=0x1,period=0x186a3,umask=0x1/",,Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate),Reference cycles when the at least one thread on the physical core is unhalted (counts at 100 MHz rate)
cpu_clk_unhalted.thread,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,period=0x1e8483/",,Core cycles when the thread is not in halt state,This event counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling
cpu_clk_unhalted.thread_any,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,any=0x1,period=0x1e8483/",,Core cycles when at least one thread on the physical core is not in halt state,Core cycles when at least one thread on the physical core is not in halt state
cpu_clk_unhalted.thread_p,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,period=0x1e8483/",,Thread cycles when thread is not in halt state,Counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling
cpu_clk_unhalted.thread_p_any,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3c,any=0x1,period=0x1e8483/",,Core cycles when at least one thread on the physical core is not in halt state,Core cycles when at least one thread on the physical core is not in halt state
cycle_activity.cycles_l1d_pending,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa3,cmask=0x8,period=0x1e8483,umask=0x8/",,Cycles with pending L1 cache miss loads,Cycles with pending L1 data cache miss loads. Set Cmask=8 to count cycle
cycle_activity.cycles_l2_pending,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa3,cmask=0x1,period=0x1e8483,umask=0x1/",,"Cycles with pending L2 cache miss loads  Spec update: HSD78, HSM63, HSM80","Cycles with pending L2 miss loads. Set Cmask=2 to count cycle  Spec update: HSD78, HSM63, HSM80"
cycle_activity.cycles_ldm_pending,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa3,cmask=0x2,period=0x1e8483,umask=0x2/",,Cycles with pending memory loads,Cycles with pending memory loads. Set Cmask=2 to count cycle
cycle_activity.cycles_no_execute,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa3,cmask=0x4,period=0x1e8483,umask=0x4/",,This event increments by 1 for every cycle where there was no execute for this thread,This event counts cycles during which no instructions were executed in the execution stage of the pipeline
cycle_activity.stalls_l1d_pending,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa3,cmask=0xc,period=0x1e8483,umask=0xc/",,Execution stalls due to L1 data cache misses,Execution stalls due to L1 data cache miss loads. Set Cmask=0CH
cycle_activity.stalls_l2_pending,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa3,cmask=0x5,period=0x1e8483,umask=0x5/",,"Execution stalls due to L2 cache misses  Spec update: HSM63, HSM80","Number of loads missed L2  Spec update: HSM63, HSM80"
cycle_activity.stalls_ldm_pending,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa3,cmask=0x6,period=0x1e8483,umask=0x6/",,Execution stalls due to memory subsystem,This event counts cycles during which no instructions were executed in the execution stage of the pipeline and there were memory instructions pending (waiting for data)
ild_stall.iq_full,,Kernel PMU event,cpu,pipeline,"cpu/event=0x87,period=0x1e8483,umask=0x4/",,Stall cycles because IQ is full,Stall cycles due to IQ is full
ild_stall.lcp,,Kernel PMU event,cpu,pipeline,"cpu/event=0x87,period=0x1e8483,umask=0x1/",,Stalls caused by changing prefix length of the instruction,This event counts cycles where the decoder is stalled on an instruction with a length changing prefix (LCP)
inst_retired.any,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc0,period=0x1e8483/",,"Instructions retired from execution  Spec update: HSD140, HSD143","This event counts the number of instructions retired from execution. For instructions that consist of multiple micro-ops, this event counts the retirement of the last micro-op of the instruction. Counting continues during hardware interrupts, traps, and inside interrupt handlers. INST_RETIRED.ANY is counted by a designated fixed counter, leaving the programmable counters available for other events. Faulting executions of GETSEC/VM entry/VM Exit/MWait will not count as retired instructions  Spec update: HSD140, HSD143"
inst_retired.any_p,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc0,period=0x1e8483/",,"Number of instructions retired. General Counter   - architectural event  Spec update: HSD11, HSD140","Number of instructions at retirement  Spec update: HSD11, HSD140"
inst_retired.prec_dist,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc0,period=0x1e8483,umask=0x1/",,Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution  Spec update: HSD140 (Must be precise),Precise instruction retired event with HW to reduce effect of PEBS shadow in IP distribution  Spec update: HSD140 (Must be precise)
inst_retired.x87,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc0,period=0x1e8483,umask=0x2/",,FP operations retired. X87 FP operations that have no exceptions: Counts also flows that have several X87 or flows that use X87 uops in the exception handling,"This is a non-precise version (that is, does not use PEBS) of the event that counts FP operations retired. For X87 FP operations that have no exceptions counting also includes flows that have several X87, or flows that use X87 uops in the exception handling"
int_misc.recovery_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xd,cmask=0x1,period=0x1e8483,umask=0x3/",,Core cycles the allocator was stalled due to recovery from earlier clear event for this thread (e.g. misprediction or memory nuke),"This event counts the number of cycles spent waiting for a recovery after an event such as a processor nuke, JEClear, assist, hle/rtm abort etc"
int_misc.recovery_cycles_any,,Kernel PMU event,cpu,pipeline,"cpu/event=0xd,any=0x1,cmask=0x1,period=0x1e8483,umask=0x3/",,Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke),Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke)
ld_blocks.no_sr,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3,period=0x186a3,umask=0x8/",,The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use,The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use
ld_blocks.store_forward,,Kernel PMU event,cpu,pipeline,"cpu/event=0x3,period=0x186a3,umask=0x2/",,loads blocked by overlapping with store buffer that cannot be forwarded,"This event counts loads that followed a store to the same address, where the data could not be forwarded inside the pipeline from the store to the load.  The most common reason why store forwarding would be blocked is when a load's address range overlaps with a preceding smaller uncompleted store. The penalty for blocked store forwarding is that the load must wait for the store to write its value to the cache before it can be issued"
ld_blocks_partial.address_alias,,Kernel PMU event,cpu,pipeline,"cpu/event=0x7,period=0x186a3,umask=0x1/",,False dependencies in MOB due to partial compare on address,"Aliasing occurs when a load is issued after a store and their memory addresses are offset by 4K.  This event counts the number of loads that aliased with a preceding store, resulting in an extended address check in the pipeline which can have a performance impact"
load_hit_pre.hw_pf,,Kernel PMU event,cpu,pipeline,"cpu/event=0x4c,period=0x186a3,umask=0x2/",,Not software-prefetch load dispatches that hit FB allocated for hardware prefetch,Non-SW-prefetch load dispatches that hit fill buffer allocated for H/W prefetch
load_hit_pre.sw_pf,,Kernel PMU event,cpu,pipeline,"cpu/event=0x4c,period=0x186a3,umask=0x1/",,Not software-prefetch load dispatches that hit FB allocated for software prefetch,Non-SW-prefetch load dispatches that hit fill buffer allocated for S/W prefetch
lsd.cycles_4_uops,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa8,cmask=0x4,period=0x1e8483,umask=0x1/",,"Cycles 4 Uops delivered by the LSD, but didn't come from the decoder","Cycles 4 Uops delivered by the LSD, but didn't come from the decoder"
lsd.cycles_active,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa8,cmask=0x1,period=0x1e8483,umask=0x1/",,"Cycles Uops delivered by the LSD, but didn't come from the decoder","Cycles Uops delivered by the LSD, but didn't come from the decoder"
lsd.uops,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa8,period=0x1e8483,umask=0x1/",,Number of Uops delivered by the LSD,Number of uops delivered by the LSD
machine_clears.count,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc3,cmask=0x1,edge=0x1,period=0x186a3,umask=0x1/",,Number of machine clears (nukes) of any type,Number of machine clears (nukes) of any type
machine_clears.cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc3,period=0x1e8483,umask=0x1/",,Cycles there was a Nuke. Account for both thread-specific and All Thread Nukes,Cycles there was a Nuke. Account for both thread-specific and All Thread Nukes
machine_clears.maskmov,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc3,period=0x186a3,umask=0x20/",,This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0,This event counts the number of executed Intel AVX masked load operations that refer to an illegal address range with the mask bits set to 0
machine_clears.smc,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc3,period=0x186a3,umask=0x4/",,Self-modifying code (SMC) detected,"This event is incremented when self-modifying code (SMC) is detected, which causes a machine clear.  Machine clears can have a significant performance impact if they are happening frequently"
move_elimination.int_eliminated,,Kernel PMU event,cpu,pipeline,"cpu/event=0x58,period=0xf4243,umask=0x1/",,Number of integer Move Elimination candidate uops that were eliminated,Number of integer move elimination candidate uops that were eliminated
move_elimination.int_not_eliminated,,Kernel PMU event,cpu,pipeline,"cpu/event=0x58,period=0xf4243,umask=0x4/",,Number of integer Move Elimination candidate uops that were not eliminated,Number of integer move elimination candidate uops that were not eliminated
other_assists.any_wb_assist,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc1,period=0x186a3,umask=0x40/",,Number of times any microcode assist is invoked by HW upon uop writeback,Number of microcode assists invoked by HW upon uop writeback
resource_stalls.any,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa2,period=0x1e8483,umask=0x1/",,Resource-related stall cycles  Spec update: HSD135,Cycles allocation is stalled due to resource related reason  Spec update: HSD135
resource_stalls.rob,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa2,period=0x1e8483,umask=0x10/",,Cycles stalled due to re-order buffer full,Cycles stalled due to re-order buffer full
resource_stalls.rs,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa2,period=0x1e8483,umask=0x4/",,Cycles stalled due to no eligible RS entry available,Cycles stalled due to no eligible RS entry available
resource_stalls.sb,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa2,period=0x1e8483,umask=0x8/",,Cycles stalled due to no store buffers available. (not including draining form sync),This event counts cycles during which no instructions were allocated because no Store Buffers (SB) were available
rob_misc_events.lbr_inserts,,Kernel PMU event,cpu,pipeline,"cpu/event=0xcc,period=0x1e8483,umask=0x20/",,Count cases of saving new LBR,Count cases of saving new LBR records by hardware
rs_events.empty_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0x5e,period=0x1e8483,umask=0x1/",,Cycles when Reservation Station (RS) is empty for the thread,"This event counts cycles when the Reservation Station ( RS ) is empty for the thread. The RS is a structure that buffers allocated micro-ops from the Front-end. If there are many cycles when the RS is empty, it may represent an underflow of instructions delivered from the Front-end"
rs_events.empty_end,,Kernel PMU event,cpu,pipeline,"cpu/event=0x5e,cmask=0x1,edge=0x1,inv=0x1,period=0x30d43,umask=0x1/",,Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues,Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate Frontend Latency Bound issues
uops_dispatched_port.port_0,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x1/",,Cycles per thread when uops are executed in port 0,Cycles per thread when uops are executed in port 0
uops_dispatched_port.port_1,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x2/",,Cycles per thread when uops are executed in port 1,Cycles per thread when uops are executed in port 1
uops_dispatched_port.port_2,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x4/",,Cycles per thread when uops are executed in port 2,Cycles per thread when uops are executed in port 2
uops_dispatched_port.port_3,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x8/",,Cycles per thread when uops are executed in port 3,Cycles per thread when uops are executed in port 3
uops_dispatched_port.port_4,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x10/",,Cycles per thread when uops are executed in port 4,Cycles per thread when uops are executed in port 4
uops_dispatched_port.port_5,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x20/",,Cycles per thread when uops are executed in port 5,Cycles per thread when uops are executed in port 5
uops_dispatched_port.port_6,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x40/",,Cycles per thread when uops are executed in port 6,Cycles per thread when uops are executed in port 6
uops_dispatched_port.port_7,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x80/",,Cycles per thread when uops are executed in port 7,Cycles per thread when uops are executed in port 7
uops_executed.core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,period=0x1e8483,umask=0x2/",,"Number of uops executed on the core  Spec update: HSD30, HSM31","Counts total number of uops to be executed per-core each cycle  Spec update: HSD30, HSM31"
uops_executed.core_cycles_ge_1,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x1,period=0x1e8483,umask=0x2/",,"Cycles at least 1 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31","Cycles at least 1 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31"
uops_executed.core_cycles_ge_2,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x2,period=0x1e8483,umask=0x2/",,"Cycles at least 2 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31","Cycles at least 2 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31"
uops_executed.core_cycles_ge_3,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x3,period=0x1e8483,umask=0x2/",,"Cycles at least 3 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31","Cycles at least 3 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31"
uops_executed.core_cycles_ge_4,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x4,period=0x1e8483,umask=0x2/",,"Cycles at least 4 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31","Cycles at least 4 micro-op is executed from any thread on physical core  Spec update: HSD30, HSM31"
uops_executed.core_cycles_none,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,inv=0x1,period=0x1e8483,umask=0x2/",,"Cycles with no micro-ops executed from any thread on physical core  Spec update: HSD30, HSM31","Cycles with no micro-ops executed from any thread on physical core  Spec update: HSD30, HSM31"
uops_executed.cycles_ge_1_uop_exec,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x1,period=0x1e8483,umask=0x1/",,"Cycles where at least 1 uop was executed per-thread  Spec update: HSD144, HSD30, HSM31","This events counts the cycles where at least one uop was executed. It is counted per thread  Spec update: HSD144, HSD30, HSM31"
uops_executed.cycles_ge_2_uops_exec,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x2,period=0x1e8483,umask=0x1/",,"Cycles where at least 2 uops were executed per-thread  Spec update: HSD144, HSD30, HSM31","This events counts the cycles where at least two uop were executed. It is counted per thread  Spec update: HSD144, HSD30, HSM31"
uops_executed.cycles_ge_3_uops_exec,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x3,period=0x1e8483,umask=0x1/",,"Cycles where at least 3 uops were executed per-thread  Spec update: HSD144, HSD30, HSM31","This events counts the cycles where at least three uop were executed. It is counted per thread  Spec update: HSD144, HSD30, HSM31"
uops_executed.cycles_ge_4_uops_exec,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x4,period=0x1e8483,umask=0x1/",,"Cycles where at least 4 uops were executed per-thread  Spec update: HSD144, HSD30, HSM31","Cycles where at least 4 uops were executed per-thread  Spec update: HSD144, HSD30, HSM31"
uops_executed.stall_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xb1,cmask=0x1,inv=0x1,period=0x1e8483,umask=0x1/",,"Counts number of cycles no uops were dispatched to be executed on this thread  Spec update: HSD144, HSD30, HSM31","Counts number of cycles no uops were dispatched to be executed on this thread  Spec update: HSD144, HSD30, HSM31"
uops_executed_port.port_0,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x1/",,Cycles per thread when uops are executed in port 0,Cycles which a uop is dispatched on port 0 in this thread
uops_executed_port.port_0_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x1/",,Cycles per core when uops are executed in port 0,Cycles per core when uops are executed in port 0
uops_executed_port.port_1,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x2/",,Cycles per thread when uops are executed in port 1,Cycles which a uop is dispatched on port 1 in this thread
uops_executed_port.port_1_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x2/",,Cycles per core when uops are executed in port 1,Cycles per core when uops are executed in port 1
uops_executed_port.port_2,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x4/",,Cycles per thread when uops are executed in port 2,Cycles which a uop is dispatched on port 2 in this thread
uops_executed_port.port_2_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x4/",,Cycles per core when uops are dispatched to port 2,Cycles per core when uops are dispatched to port 2
uops_executed_port.port_3,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x8/",,Cycles per thread when uops are executed in port 3,Cycles which a uop is dispatched on port 3 in this thread
uops_executed_port.port_3_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x8/",,Cycles per core when uops are dispatched to port 3,Cycles per core when uops are dispatched to port 3
uops_executed_port.port_4,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x10/",,Cycles per thread when uops are executed in port 4,Cycles which a uop is dispatched on port 4 in this thread
uops_executed_port.port_4_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x10/",,Cycles per core when uops are executed in port 4,Cycles per core when uops are executed in port 4
uops_executed_port.port_5,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x20/",,Cycles per thread when uops are executed in port 5,Cycles which a uop is dispatched on port 5 in this thread
uops_executed_port.port_5_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x20/",,Cycles per core when uops are executed in port 5,Cycles per core when uops are executed in port 5
uops_executed_port.port_6,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x40/",,Cycles per thread when uops are executed in port 6,Cycles which a uop is dispatched on port 6 in this thread
uops_executed_port.port_6_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x40/",,Cycles per core when uops are executed in port 6,Cycles per core when uops are executed in port 6
uops_executed_port.port_7,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,period=0x1e8483,umask=0x80/",,Cycles per thread when uops are executed in port 7,Cycles which a uop is dispatched on port 7 in this thread
uops_executed_port.port_7_core,,Kernel PMU event,cpu,pipeline,"cpu/event=0xa1,any=0x1,period=0x1e8483,umask=0x80/",,Cycles per core when uops are dispatched to port 7,Cycles per core when uops are dispatched to port 7
uops_issued.any,,Kernel PMU event,cpu,pipeline,"cpu/event=0xe,period=0x1e8483,umask=0x1/",,Uops that Resource Allocation Table (RAT) issues to Reservation Station (RS),This event counts the number of uops issued by the Front-end of the pipeline to the Back-end. This event is counted at the allocation stage and will count both retired and non-retired uops
uops_issued.core_stall_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xe,any=0x1,cmask=0x1,inv=0x1,period=0x1e8483,umask=0x1/",,Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads,Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for all threads
uops_issued.flags_merge,,Kernel PMU event,cpu,pipeline,"cpu/event=0xe,period=0x1e8483,umask=0x10/",,Number of flags-merge uops being allocated. Such uops considered perf sensitive; added by GSR u-arch,Number of flags-merge uops allocated. Such uops add delay
uops_issued.single_mul,,Kernel PMU event,cpu,pipeline,"cpu/event=0xe,period=0x1e8483,umask=0x40/",,Number of Multiply packed/scalar single precision uops allocated,Number of multiply packed/scalar single precision uops allocated
uops_issued.slow_lea,,Kernel PMU event,cpu,pipeline,"cpu/event=0xe,period=0x1e8483,umask=0x20/",,Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not,"Number of slow LEA or similar uops allocated. Such uop has 3 sources (for example, 2 sources + immediate) regardless of whether it is a result of LEA instruction or not"
uops_issued.stall_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xe,cmask=0x1,inv=0x1,period=0x1e8483,umask=0x1/",,Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread,Cycles when Resource Allocation Table (RAT) does not issue Uops to Reservation Station (RS) for the thread
uops_retired.all,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc2,period=0x1e8483,umask=0x1/",,Actually retired uops (Precise event),Counts the number of micro-ops retired. Use Cmask=1 and invert to count active cycles or stalled cycles (Precise event)
uops_retired.core_stall_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc2,any=0x1,cmask=0x1,inv=0x1,period=0x1e8483,umask=0x1/",,Cycles without actually retired uops,Cycles without actually retired uops
uops_retired.retire_slots,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc2,period=0x1e8483,umask=0x2/",,Retirement slots used (Precise event),"This event counts the number of retirement slots used each cycle.  There are potentially 4 slots that can be used each cycle - meaning, 4 uops or 4 instructions could retire each cycle (Precise event)"
uops_retired.stall_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc2,cmask=0x1,inv=0x1,period=0x1e8483,umask=0x1/",,Cycles without actually retired uops,Cycles without actually retired uops
uops_retired.total_cycles,,Kernel PMU event,cpu,pipeline,"cpu/event=0xc2,cmask=0x10,inv=0x1,period=0x1e8483,umask=0x1/",,Cycles with less than 10 actually retired uops,Cycles with less than 10 actually retired uops
llc_misses.code_llc_prefetch,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x191/",64Bytes,LLC prefetch misses for code reads. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.data_llc_prefetch,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x192/",64Bytes,LLC prefetch misses for data reads. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.data_read,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x182/",64Bytes,LLC misses - demand and prefetch data reads - excludes LLC prefetches. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.mmio_read,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x187,filter_nc=0x1/",64Bytes,MMIO reads. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.mmio_write,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x18f,filter_nc=0x1/",64Bytes,MMIO writes. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.pcie_non_snoop_write,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x1c8,filter_tid=0x3e/",64Bytes,PCIe write misses (full cache line). Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.pcie_read,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x19e/",64Bytes,LLC misses for PCIe read current. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.pcie_write,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x1c8/",64Bytes,ItoM write misses (as part of fast string memcpy stores) + PCIe full line writes. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.rfo_llc_prefetch,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x190/",64Bytes,LLC prefetch misses for RFO. Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_misses.uncacheable,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3,filter_opc=0x187/",64Bytes,LLC misses - Uncacheable reads (from cpu) . Derived from unc_c_tor_inserts.miss_opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
llc_references.code_llc_prefetch,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x1,filter_opc=0x181/",64Bytes,L2 demand and L2 prefetch code references to LLC. Derived from unc_c_tor_inserts.opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
llc_references.pcie_ns_partial_write,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x1,filter_opc=0x180,filter_tid=0x3e/",,PCIe writes (partial cache line). Derived from unc_c_tor_inserts.opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
llc_references.pcie_read,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x1,filter_opc=0x19e/",64Bytes,PCIe read current. Derived from unc_c_tor_inserts.opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
llc_references.pcie_write,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x1,filter_opc=0x1c8,filter_tid=0x3e/",64Bytes,PCIe write references (full cache line). Derived from unc_c_tor_inserts.opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
llc_references.streaming_full,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x1,filter_opc=0x18c/",64Bytes,Streaming stores (full cache line). Derived from unc_c_tor_inserts.opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
llc_references.streaming_partial,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x1,filter_opc=0x18d/",64Bytes,Streaming stores (partial cache line). Derived from unc_c_tor_inserts.opcode. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
unc_c_bounce_control,,Kernel PMU event,uncore_cbox,uncore cache,uncore_cbox/event=0xa/,,Bounce Control. Unit: uncore_cbox ,Bounce Control. Unit: uncore_cbox 
unc_c_clockticks,,Kernel PMU event,uncore_cbox,uncore cache,uncore_cbox/event=0/,,Uncore Clocks. Unit: uncore_cbox ,Uncore Clocks. Unit: uncore_cbox 
unc_c_counter0_occupancy,,Kernel PMU event,uncore_cbox,uncore cache,uncore_cbox/event=0x1f/,,Counter 0 Occupancy. Unit: uncore_cbox ,"Since occupancy counts can only be captured in the Cbo's 0 counter, this event allows a user to capture occupancy related information by filtering the Cb0 occupancy count captured in Counter 0.   The filtering available is found in the control register - threshold, invert and edge detect.   E.g. setting threshold to 1 can effectively monitor how many cycles the monitored queue has an entry"
unc_c_fast_asserted,,Kernel PMU event,uncore_cbox,uncore cache,uncore_cbox/event=0x9/,,FaST wire asserted. Unit: uncore_cbox ,Counts the number of cycles either the local distress or incoming distress signals are asserted.  Incoming distress includes both up and dn
unc_c_llc_lookup.any,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x34,umask=0x11,filter_state=0x1/",64Bytes,All LLC Misses (code+ data rd + data wr - including demand and prefetch). Unit: uncore_cbox ,"Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Filters for any transaction originating from the IPQ or IRQ.  This does not include lookups originating from the ISMQ"
unc_c_llc_lookup.data_read,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x34,umask=0x3/",,Cache Lookups; Data Read Request. Unit: uncore_cbox ,"Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Read transactions"
unc_c_llc_lookup.nid,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x34,umask=0x41/",,Cache Lookups; Lookups that Match NID. Unit: uncore_cbox ,"Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Qualify one of the other subevents by the Target NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.   In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system"
unc_c_llc_lookup.read,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x34,umask=0x21/",,Cache Lookups; Any Read Request. Unit: uncore_cbox ,"Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Read transactions"
unc_c_llc_lookup.remote_snoop,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x34,umask=0x9/",,Cache Lookups; External Snoop Request. Unit: uncore_cbox ,"Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Filters for only snoop requests coming from the remote socket(s) through the IPQ"
unc_c_llc_lookup.write,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x34,umask=0x5/",,Cache Lookups; Write Requests. Unit: uncore_cbox ,"Counts the number of times the LLC was accessed - this includes code, data, prefetches and hints coming from L2.  This has numerous filters available.  Note the non-standard filtering equation.  This event will count requests that lookup the cache multiple times with multiple increments.  One must ALWAYS set umask bit 0 and select a state or states to match.  Otherwise, the event will count nothing.   CBoGlCtrl[22:18] bits correspond to [FMESI] state.; Writeback transactions from L2 to the LLC  This includes all write transactions -- both Cacheable and UC"
unc_c_llc_victims.e_state,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x37,umask=0x2/",,Lines Victimized; Lines in E state. Unit: uncore_cbox ,Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in
unc_c_llc_victims.f_state,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x37,umask=0x8/",,Lines Victimized. Unit: uncore_cbox ,Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in
unc_c_llc_victims.i_state,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x37,umask=0x4/",,Lines Victimized; Lines in S State. Unit: uncore_cbox ,Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in
unc_c_llc_victims.m_state,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x37,umask=0x1/",64Bytes,M line evictions from LLC (writebacks to memory). Unit: uncore_cbox ,Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in
unc_c_llc_victims.miss,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x37,umask=0x10/",,Lines Victimized. Unit: uncore_cbox ,Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in
unc_c_llc_victims.nid,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x37,umask=0x40/",,Lines Victimized; Victimized Lines that Match NID. Unit: uncore_cbox ,"Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in.; Qualify one of the other subevents by the Target NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.   In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system"
unc_c_llc_victims.s_state,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x37,umask=0x4/",,Lines in S State. Unit: uncore_cbox ,Counts the number of lines that were victimized on a fill.  This can be filtered by the state that the line was in
unc_c_misc.cvzero_prefetch_miss,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x39,umask=0x20/",,Cbo Misc; DRd hitting non-M with raw CV=0. Unit: uncore_cbox ,Miscellaneous events in the Cbo
unc_c_misc.cvzero_prefetch_victim,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x39,umask=0x10/",,Cbo Misc; Clean Victim with raw CV=0. Unit: uncore_cbox ,Miscellaneous events in the Cbo
unc_c_misc.rfo_hit_s,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x39,umask=0x8/",,Cbo Misc; RFO HitS. Unit: uncore_cbox ,Miscellaneous events in the Cbo.; Number of times that an RFO hit in S state.  This is useful for determining if it might be good for a workload to use RspIWB instead of RspSWB
unc_c_misc.rspi_was_fse,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x39,umask=0x1/",,Cbo Misc; Silent Snoop Eviction. Unit: uncore_cbox ,Miscellaneous events in the Cbo.; Counts the number of times when a Snoop hit in FSE states and triggered a silent eviction.  This is useful because this information is lost in the PRE encodings
unc_c_misc.started,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x39,umask=0x4/",,Cbo Misc. Unit: uncore_cbox ,Miscellaneous events in the Cbo
unc_c_misc.wc_aliasing,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x39,umask=0x2/",,Cbo Misc; Write Combining Aliasing. Unit: uncore_cbox ,"Miscellaneous events in the Cbo.; Counts the number of times that a USWC write (WCIL(F)) transaction hit in the LLC in M state, triggering a WBMtoI followed by the USWC write.  This occurs when there is WC aliasing"
unc_c_qlru.age0,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3c,umask=0x1/",,LRU Queue; LRU Age 0. Unit: uncore_cbox ,How often age was set to 0
unc_c_qlru.age1,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3c,umask=0x2/",,LRU Queue; LRU Age 1. Unit: uncore_cbox ,How often age was set to 1
unc_c_qlru.age2,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3c,umask=0x4/",,LRU Queue; LRU Age 2. Unit: uncore_cbox ,How often age was set to 2
unc_c_qlru.age3,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3c,umask=0x8/",,LRU Queue; LRU Age 3. Unit: uncore_cbox ,How often age was set to 3
unc_c_qlru.lru_decrement,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3c,umask=0x10/",,LRU Queue; LRU Bits Decremented. Unit: uncore_cbox ,How often all LRU bits were decremented by 1
unc_c_qlru.victim_non_zero,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3c,umask=0x20/",,LRU Queue; Non-0 Aged Victim. Unit: uncore_cbox ,How often we picked a victim that had a non-zero age
unc_c_ring_ad_used.all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1b,umask=0xf/",,AD Ring In Use; All. Unit: uncore_cbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_ad_used.down,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1b,umask=0xc/",,AD Ring In Use; Down. Unit: uncore_cbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_ad_used.down_even,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1b,umask=0x4/",,AD Ring In Use; Down and Even. Unit: uncore_cbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Even ring polarity"
unc_c_ring_ad_used.down_odd,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1b,umask=0x8/",,AD Ring In Use; Down and Odd. Unit: uncore_cbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity"
unc_c_ring_ad_used.up,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1b,umask=0x3/",,AD Ring In Use; Up. Unit: uncore_cbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_ad_used.up_even,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1b,umask=0x1/",,AD Ring In Use; Up and Even. Unit: uncore_cbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity"
unc_c_ring_ad_used.up_odd,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1b,umask=0x2/",,AD Ring In Use; Up and Odd. Unit: uncore_cbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity"
unc_c_ring_ak_used.all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1c,umask=0xf/",,AK Ring In Use; All. Unit: uncore_cbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_ak_used.down,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1c,umask=0xc/",,AK Ring In Use; Down. Unit: uncore_cbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_ak_used.down_even,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1c,umask=0x4/",,AK Ring In Use; Down and Even. Unit: uncore_cbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Even ring polarity"
unc_c_ring_ak_used.down_odd,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1c,umask=0x8/",,AK Ring In Use; Down and Odd. Unit: uncore_cbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity"
unc_c_ring_ak_used.up,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1c,umask=0x3/",,AK Ring In Use; Up. Unit: uncore_cbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_ak_used.up_even,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1c,umask=0x1/",,AK Ring In Use; Up and Even. Unit: uncore_cbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity"
unc_c_ring_ak_used.up_odd,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1c,umask=0x2/",,AK Ring In Use; Up and Odd. Unit: uncore_cbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity"
unc_c_ring_bl_used.all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1d,umask=0xf/",,BL Ring in Use; Down. Unit: uncore_cbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_bl_used.down,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1d,umask=0xc/",,BL Ring in Use; Down. Unit: uncore_cbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_bl_used.down_even,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1d,umask=0x4/",,BL Ring in Use; Down and Even. Unit: uncore_cbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Even ring polarity"
unc_c_ring_bl_used.down_odd,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1d,umask=0x8/",,BL Ring in Use; Down and Odd. Unit: uncore_cbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity"
unc_c_ring_bl_used.up,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1d,umask=0x3/",,BL Ring in Use; Up. Unit: uncore_cbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_c_ring_bl_used.up_even,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1d,umask=0x1/",,BL Ring in Use; Up and Even. Unit: uncore_cbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity"
unc_c_ring_bl_used.up_odd,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1d,umask=0x2/",,BL Ring in Use; Up and Odd. Unit: uncore_cbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity"
unc_c_ring_bounces.ad,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x5,umask=0x1/",,Number of LLC responses that bounced on the Ring.; AD. Unit: uncore_cbox ,Number of LLC responses that bounced on the Ring.; AD. Unit: uncore_cbox 
unc_c_ring_bounces.ak,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x5,umask=0x2/",,Number of LLC responses that bounced on the Ring.; AK. Unit: uncore_cbox ,Number of LLC responses that bounced on the Ring.; AK. Unit: uncore_cbox 
unc_c_ring_bounces.bl,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x5,umask=0x4/",,Number of LLC responses that bounced on the Ring.; BL. Unit: uncore_cbox ,Number of LLC responses that bounced on the Ring.; BL. Unit: uncore_cbox 
unc_c_ring_bounces.iv,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x5,umask=0x10/",,Number of LLC responses that bounced on the Ring.; Snoops of processor's cache. Unit: uncore_cbox ,Number of LLC responses that bounced on the Ring.; Snoops of processor's cache. Unit: uncore_cbox 
unc_c_ring_iv_used.any,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1e,umask=0xf/",,BL Ring in Use; Any. Unit: uncore_cbox ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity"
unc_c_ring_iv_used.dn,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1e,umask=0xc/",,BL Ring in Use; Any. Unit: uncore_cbox ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity"
unc_c_ring_iv_used.down,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1e,umask=0xcc/",,BL Ring in Use; Down. Unit: uncore_cbox ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters for Down polarity"
unc_c_ring_iv_used.up,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x1e,umask=0x3/",,BL Ring in Use; Any. Unit: uncore_cbox ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.  There is only 1 IV ring in HSX  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity"
unc_c_ring_sink_starved.ad,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x6,umask=0x1/",,UNC_C_RING_SINK_STARVED.AD. Unit: uncore_cbox ,UNC_C_RING_SINK_STARVED.AD. Unit: uncore_cbox 
unc_c_ring_sink_starved.ak,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x6,umask=0x2/",,UNC_C_RING_SINK_STARVED.AK. Unit: uncore_cbox ,UNC_C_RING_SINK_STARVED.AK. Unit: uncore_cbox 
unc_c_ring_sink_starved.bl,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x6,umask=0x4/",,UNC_C_RING_SINK_STARVED.BL. Unit: uncore_cbox ,UNC_C_RING_SINK_STARVED.BL. Unit: uncore_cbox 
unc_c_ring_sink_starved.iv,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x6,umask=0x8/",,UNC_C_RING_SINK_STARVED.IV. Unit: uncore_cbox ,UNC_C_RING_SINK_STARVED.IV. Unit: uncore_cbox 
unc_c_ring_src_thrtl,,Kernel PMU event,uncore_cbox,uncore cache,uncore_cbox/event=0x7/,,Number of cycles the Cbo is actively throttling traffic onto the Ring in order to limit bounce traffic. Unit: uncore_cbox ,Number of cycles the Cbo is actively throttling traffic onto the Ring in order to limit bounce traffic. Unit: uncore_cbox 
unc_c_rxr_ext_starved.ipq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x12,umask=0x2/",,Ingress Arbiter Blocking Cycles; IRQ. Unit: uncore_cbox ,Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.; IPQ is externally startved and therefore we are blocking the IRQ
unc_c_rxr_ext_starved.irq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x12,umask=0x1/",,Ingress Arbiter Blocking Cycles; IPQ. Unit: uncore_cbox ,Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.; IRQ is externally starved and therefore we are blocking the IPQ
unc_c_rxr_ext_starved.ismq_bids,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x12,umask=0x8/",,Ingress Arbiter Blocking Cycles; ISMQ_BID. Unit: uncore_cbox ,Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues.; Number of times that the ISMQ Bid
unc_c_rxr_ext_starved.prq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x12,umask=0x4/",,Ingress Arbiter Blocking Cycles; PRQ. Unit: uncore_cbox ,Counts cycles in external starvation.  This occurs when one of the ingress queues is being starved by the other queues
unc_c_rxr_inserts.ipq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x13,umask=0x4/",,Ingress Allocations; IPQ. Unit: uncore_cbox ,Counts number of allocations per cycle into the specified Ingress queue
unc_c_rxr_inserts.irq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x13,umask=0x1/",,Ingress Allocations; IRQ. Unit: uncore_cbox ,Counts number of allocations per cycle into the specified Ingress queue
unc_c_rxr_inserts.irq_rej,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x13,umask=0x2/",,Ingress Allocations; IRQ Rejected. Unit: uncore_cbox ,Counts number of allocations per cycle into the specified Ingress queue
unc_c_rxr_inserts.prq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x13,umask=0x10/",,Ingress Allocations; PRQ. Unit: uncore_cbox ,Counts number of allocations per cycle into the specified Ingress queue
unc_c_rxr_inserts.prq_rej,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x13,umask=0x20/",,Ingress Allocations; PRQ. Unit: uncore_cbox ,Counts number of allocations per cycle into the specified Ingress queue
unc_c_rxr_int_starved.ipq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x14,umask=0x4/",,Ingress Internal Starvation Cycles; IPQ. Unit: uncore_cbox ,Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.; Cycles with the IPQ in Internal Starvation
unc_c_rxr_int_starved.irq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x14,umask=0x1/",,Ingress Internal Starvation Cycles; IRQ. Unit: uncore_cbox ,Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.; Cycles with the IRQ in Internal Starvation
unc_c_rxr_int_starved.ismq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x14,umask=0x8/",,Ingress Internal Starvation Cycles; ISMQ. Unit: uncore_cbox ,Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue.; Cycles with the ISMQ in Internal Starvation
unc_c_rxr_int_starved.prq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x14,umask=0x10/",,Ingress Internal Starvation Cycles; PRQ. Unit: uncore_cbox ,Counts cycles in internal starvation.  This occurs when one (or more) of the entries in the ingress queue are being starved out by other entries in that queue
unc_c_rxr_ipq_retry.addr_conflict,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x31,umask=0x4/",,Probe Queue Retries; Address Conflict. Unit: uncore_cbox ,"Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request form the IPQ was retried because of a TOR reject from an address conflicts.  Address conflicts out of the IPQ should be rare.  They will generally only occur if two different sockets are sending requests to the same address at the same time.  This is a true conflict case, unlike the IPQ Address Conflict which is commonly caused by prefetching characteristics"
unc_c_rxr_ipq_retry.any,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x31,umask=0x1/",,Probe Queue Retries; Any Reject. Unit: uncore_cbox ,Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request form the IPQ was retried because of a TOR reject.  TOR rejects from the IPQ can be caused by the Egress being full or Address Conflicts
unc_c_rxr_ipq_retry.full,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x31,umask=0x2/",,Probe Queue Retries; No Egress Credits. Unit: uncore_cbox ,"Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request form the IPQ was retried because of a TOR reject from the Egress being full.  IPQ requests make use of the AD Egress for regular responses, the BL egress to forward data, and the AK egress to return credits"
unc_c_rxr_ipq_retry.qpi_credits,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x31,umask=0x10/",,Probe Queue Retries; No QPI Credits. Unit: uncore_cbox ,Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries
unc_c_rxr_ipq_retry2.ad_sbo,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x28,umask=0x1/",,Probe Queue Retries; No AD Sbo Credits. Unit: uncore_cbox ,Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request from the IPQ was retried because of it lacked credits to send an AD packet to the Sbo
unc_c_rxr_ipq_retry2.target,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x28,umask=0x40/",,Probe Queue Retries; Target Node Filter. Unit: uncore_cbox ,Number of times a snoop (probe) request had to retry.  Filters exist to cover some of the common cases retries.; Counts the number of times that a request from the IPQ was retried filtered by the Target NodeID as specified in the Cbox's Filter register
unc_c_rxr_irq_retry.addr_conflict,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x32,umask=0x4/",,Ingress Request Queue Rejects; Address Conflict. Unit: uncore_cbox ,"Counts the number of times that a request from the IRQ was retried because of an address match in the TOR.  In order to maintain coherency, requests to the same address are not allowed to pass each other up in the Cbo.  Therefore, if there is an outstanding request to a given address, one cannot issue another request to that address until it is complete.  This comes up most commonly with prefetches.  Outstanding prefetches occasionally will not complete their memory fetch and a demand request to the same address will then sit in the IRQ and get retried until the prefetch fills the data into the LLC.  Therefore, it will not be uncommon to see this case in high bandwidth streaming workloads when the LLC Prefetcher in the core is enabled"
unc_c_rxr_irq_retry.any,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x32,umask=0x1/",,Ingress Request Queue Rejects; Any Reject. Unit: uncore_cbox ,"Counts the number of IRQ retries that occur.  Requests from the IRQ are retried if they are rejected from the TOR pipeline for a variety of reasons.  Some of the most common reasons include if the Egress is full, there are no RTIDs, or there is a Physical Address match to another outstanding request"
unc_c_rxr_irq_retry.full,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x32,umask=0x2/",,Ingress Request Queue Rejects; No Egress Credits. Unit: uncore_cbox ,"Counts the number of times that a request from the IRQ was retried because it failed to acquire an entry in the Egress.  The egress is the buffer that queues up for allocating onto the ring.  IRQ requests can make use of all four rings and all four Egresses.  If any of the queues that a given request needs to make use of are full, the request will be retried"
unc_c_rxr_irq_retry.iio_credits,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x32,umask=0x20/",,Ingress Request Queue Rejects; No IIO Credits. Unit: uncore_cbox ,Number of times a request attempted to acquire the NCS/NCB credit for sending messages on BL to the IIO.  There is a single credit in each CBo that is shared between the NCS and NCB message classes for sending transactions on the BL ring (such as read data) to the IIO
unc_c_rxr_irq_retry.nid,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x32,umask=0x40/",,Ingress Request Queue Rejects. Unit: uncore_cbox ,Qualify one of the other subevents by a given RTID destination NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER1.nid
unc_c_rxr_irq_retry.qpi_credits,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x32,umask=0x10/",,Ingress Request Queue Rejects; No QPI Credits. Unit: uncore_cbox ,Number of requests rejects because of lack of QPI Ingress credits.  These credits are required in order to send transactions to the QPI agent.  Please see the QPI_IGR_CREDITS events for more information
unc_c_rxr_irq_retry.rtid,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x32,umask=0x8/",,Ingress Request Queue Rejects; No RTIDs. Unit: uncore_cbox ,"Counts the number of times that requests from the IRQ were retried because there were no RTIDs available.  RTIDs are required after a request misses the LLC and needs to send snoops and/or requests to memory.  If there are no RTIDs available, requests will queue up in the IRQ and retry until one becomes available.  Note that there are multiple RTID pools for the different sockets.  There may be cases where the local RTIDs are all used, but requests destined for remote memory can still acquire an RTID because there are remote RTIDs available.  This event does not provide any filtering for this case"
unc_c_rxr_irq_retry2.ad_sbo,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x29,umask=0x1/",,Ingress Request Queue Rejects; No AD Sbo Credits. Unit: uncore_cbox ,Counts the number of times that a request from the IPQ was retried because of it lacked credits to send an AD packet to the Sbo
unc_c_rxr_irq_retry2.bl_sbo,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x29,umask=0x2/",,Ingress Request Queue Rejects; No BL Sbo Credits. Unit: uncore_cbox ,Counts the number of times that a request from the IPQ was retried because of it lacked credits to send an BL packet to the Sbo
unc_c_rxr_irq_retry2.target,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x29,umask=0x40/",,Ingress Request Queue Rejects; Target Node Filter. Unit: uncore_cbox ,Counts the number of times that a request from the IPQ was retried filtered by the Target NodeID as specified in the Cbox's Filter register
unc_c_rxr_ismq_retry.any,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x33,umask=0x1/",,ISMQ Retries; Any Reject. Unit: uncore_cbox ,"Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Counts the total number of times that a request from the ISMQ retried because of a TOR reject.  ISMQ requests generally will not need to retry (or at least ISMQ retries are less common than IRQ retries).  ISMQ requests will retry if they are not able to acquire a needed Egress credit to get onto the ring, or for cache evictions that need to acquire an RTID.  Most ISMQ requests already have an RTID, so eviction retries will be less common here"
unc_c_rxr_ismq_retry.full,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x33,umask=0x2/",,ISMQ Retries; No Egress Credits. Unit: uncore_cbox ,"Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Counts the number of times that a request from the ISMQ retried because of a TOR reject caused by a lack of Egress credits. The egress is the buffer that queues up for allocating onto the ring.  If any of the Egress queues that a given request needs to make use of are full, the request will be retried"
unc_c_rxr_ismq_retry.iio_credits,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x33,umask=0x20/",,ISMQ Retries; No IIO Credits. Unit: uncore_cbox ,Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Number of times a request attempted to acquire the NCS/NCB credit for sending messages on BL to the IIO.  There is a single credit in each CBo that is shared between the NCS and NCB message classes for sending transactions on the BL ring (such as read data) to the IIO
unc_c_rxr_ismq_retry.nid,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x33,umask=0x40/",,ISMQ Retries. Unit: uncore_cbox ,Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Qualify one of the other subevents by a given RTID destination NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER1.nid
unc_c_rxr_ismq_retry.qpi_credits,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x33,umask=0x10/",,ISMQ Retries; No QPI Credits. Unit: uncore_cbox ,Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores
unc_c_rxr_ismq_retry.rtid,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x33,umask=0x8/",,ISMQ Retries; No RTIDs. Unit: uncore_cbox ,"Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Counts the number of times that a request from the ISMQ retried because of a TOR reject caused by no RTIDs.  M-state cache evictions are serviced through the ISMQ, and must acquire an RTID in order to write back to memory.  If no RTIDs are available, they will be retried"
unc_c_rxr_ismq_retry.wb_credits,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x33,umask=0x80/",,ISMQ Retries. Unit: uncore_cbox ,Number of times a transaction flowing through the ISMQ had to retry.  Transaction pass through the ISMQ as responses for requests that already exist in the Cbo.  Some examples include: when data is returned or when snoop responses come back from the cores.; Qualify one of the other subevents by a given RTID destination NID.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER1.nid
unc_c_rxr_ismq_retry2.ad_sbo,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2a,umask=0x1/",,ISMQ Request Queue Rejects; No AD Sbo Credits. Unit: uncore_cbox ,Counts the number of times that a request from the ISMQ was retried because of it lacked credits to send an AD packet to the Sbo
unc_c_rxr_ismq_retry2.bl_sbo,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2a,umask=0x2/",,ISMQ Request Queue Rejects; No BL Sbo Credits. Unit: uncore_cbox ,Counts the number of times that a request from the ISMQ was retried because of it lacked credits to send an BL packet to the Sbo
unc_c_rxr_ismq_retry2.target,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2a,umask=0x40/",,ISMQ Request Queue Rejects; Target Node Filter. Unit: uncore_cbox ,Counts the number of times that a request from the ISMQ was retried filtered by the Target NodeID as specified in the Cbox's Filter register
unc_c_rxr_occupancy.ipq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x11,umask=0x4/",,Ingress Occupancy; IPQ. Unit: uncore_cbox ,Counts number of entries in the specified Ingress queue in each cycle
unc_c_rxr_occupancy.irq,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x11,umask=0x1/",,Ingress Occupancy; IRQ. Unit: uncore_cbox ,Counts number of entries in the specified Ingress queue in each cycle
unc_c_rxr_occupancy.irq_rej,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x11,umask=0x2/",,Ingress Occupancy; IRQ Rejected. Unit: uncore_cbox ,Counts number of entries in the specified Ingress queue in each cycle
unc_c_rxr_occupancy.prq_rej,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x11,umask=0x20/",,Ingress Occupancy; PRQ Rejects. Unit: uncore_cbox ,Counts number of entries in the specified Ingress queue in each cycle
unc_c_sbo_credit_occupancy.ad,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3e,umask=0x1/",,SBo Credits Occupancy; For AD Ring. Unit: uncore_cbox ,"Number of Sbo credits in use in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with"
unc_c_sbo_credit_occupancy.bl,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3e,umask=0x2/",,SBo Credits Occupancy; For BL Ring. Unit: uncore_cbox ,"Number of Sbo credits in use in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with"
unc_c_sbo_credits_acquired.ad,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3d,umask=0x1/",,SBo Credits Acquired; For AD Ring. Unit: uncore_cbox ,"Number of Sbo credits acquired in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with"
unc_c_sbo_credits_acquired.bl,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3d,umask=0x2/",,SBo Credits Acquired; For BL Ring. Unit: uncore_cbox ,"Number of Sbo credits acquired in a given cycle, per ring.  Each Cbo is assigned an Sbo it can communicate with"
unc_c_tor_inserts.all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x8/",,TOR Inserts; All. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions inserted into the TOR.    This includes requests that reside in the TOR for a short time, such as LLC Hits that do not need to snoop cores or requests that get rejected and have to be retried through one of the ingress queues.  The TOR is more commonly a bottleneck in skews with smaller core counts, where the ratio of RTIDs to TOR entries is larger.  Note that there are reserved TOR entries for various request types, so it is possible that a given request type be blocked with an occupancy that is less than 20.  Also note that generally requests will not be able to arbitrate into the TOR pipeline if there are no available TOR slots"
unc_c_tor_inserts.eviction,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x4/",,TOR Inserts; Evictions. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Eviction transactions inserted into the TOR.  Evictions can be quick, such as when the line is in the F, S, or E states and no core valid bits are set.  They can also be longer if either CV bits are set (so the cores need to be snooped) and/or if there is a HitM (in which case it is necessary to write the request out to memory)"
unc_c_tor_inserts.local,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x28/",,TOR Inserts; Local Memory. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions inserted into the TOR that are satisfied by locally HOMed memory"
unc_c_tor_inserts.local_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x21/",,TOR Inserts; Local Memory - Opcode Matched. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match qualifications specified by the subevent. There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions, satisfied by an opcode,  inserted into the TOR that are satisfied by locally HOMed memory"
unc_c_tor_inserts.miss_local,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x2a/",,TOR Inserts; Misses to Local Memory. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that are satisfied by locally HOMed memory"
unc_c_tor_inserts.miss_local_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x23/",,TOR Inserts; Misses to Local Memory - Opcode Matched. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions, satisfied by an opcode, inserted into the TOR that are satisfied by locally HOMed memory"
unc_c_tor_inserts.miss_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x3/",,TOR Inserts; Miss Opcode Match. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match an opcode"
unc_c_tor_inserts.miss_remote,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x8a/",,TOR Inserts; Misses to Remote Memory. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that are satisfied by remote caches or remote memory"
unc_c_tor_inserts.miss_remote_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x83/",,TOR Inserts; Misses to Remote Memory - Opcode Matched. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions, satisfied by an opcode,  inserted into the TOR that are satisfied by remote caches or remote memory"
unc_c_tor_inserts.nid_all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x48/",,TOR Inserts; NID Matched. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All NID matched (matches an RTID destination) transactions inserted into the TOR.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.  In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system"
unc_c_tor_inserts.nid_eviction,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x44/",,TOR Inserts; NID Matched Evictions. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; NID matched eviction transactions inserted into the TOR"
unc_c_tor_inserts.nid_miss_all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x4a/",,TOR Inserts; NID Matched Miss All. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All NID matched miss requests that were inserted into the TOR"
unc_c_tor_inserts.nid_miss_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x43/",,TOR Inserts; NID and Opcode Matched Miss. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Miss transactions inserted into the TOR that match a NID and an opcode"
unc_c_tor_inserts.nid_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x41/",,TOR Inserts; NID and Opcode Matched. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match a NID and an opcode"
unc_c_tor_inserts.nid_wb,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x50/",,TOR Inserts; NID Matched Writebacks. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; NID matched write transactions inserted into the TOR"
unc_c_tor_inserts.opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x1/",,TOR Inserts; Opcode Match. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Transactions inserted into the TOR that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
unc_c_tor_inserts.remote,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x88/",,TOR Inserts; Remote Memory. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions inserted into the TOR that are satisfied by remote caches or remote memory"
unc_c_tor_inserts.remote_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x81/",,TOR Inserts; Remote Memory - Opcode Matched. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; All transactions, satisfied by an opcode,  inserted into the TOR that are satisfied by remote caches or remote memory"
unc_c_tor_inserts.wb,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x35,umask=0x10/",,TOR Inserts; Writebacks. Unit: uncore_cbox ,"Counts the number of entries successfully inserted into the TOR that match  qualifications specified by the subevent.  There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc  to DRD (0x182).; Write transactions inserted into the TOR.   This does not include RFO, but actual operations that contain data being sent from the core"
unc_c_tor_occupancy.all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x8/",,TOR Occupancy; Any. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); All valid TOR entries.  This includes requests that reside in the TOR for a short time, such as LLC Hits that do not need to snoop cores or requests that get rejected and have to be retried through one of the ingress queues.  The TOR is more commonly a bottleneck in skews with smaller core counts, where the ratio of RTIDs to TOR entries is larger.  Note that there are reserved TOR entries for various request types, so it is possible that a given request type be blocked with an occupancy that is less than 20.  Also note that generally requests will not be able to arbitrate into the TOR pipeline if there are no available TOR slots"
unc_c_tor_occupancy.eviction,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x4/",,TOR Occupancy; Evictions. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding eviction transactions in the TOR.  Evictions can be quick, such as when the line is in the F, S, or E states and no core valid bits are set.  They can also be longer if either CV bits are set (so the cores need to be snooped) and/or if there is a HitM (in which case it is necessary to write the request out to memory)"
unc_c_tor_occupancy.llc_data_read,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x3,filter_opc=0x182/",,Occupancy counter for LLC data reads (demand and L2 prefetch). Derived from unc_c_tor_occupancy.miss_opcode. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries for miss transactions that match an opcode. This generally means that the request was sent to memory or MMIO"
unc_c_tor_occupancy.local,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x28/",,TOR Occupancy. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)"
unc_c_tor_occupancy.local_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x21/",,TOR Occupancy; Local Memory - Opcode Matched. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding  transactions, satisfied by an opcode,  in the TOR that are satisfied by locally HOMed memory"
unc_c_tor_occupancy.miss_all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0xa/",,TOR Occupancy; Miss All. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding miss requests in the TOR.  'Miss' means the allocation requires an RTID.  This generally means that the request was sent to memory or MMIO"
unc_c_tor_occupancy.miss_local,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x2a/",,TOR Occupancy. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)"
unc_c_tor_occupancy.miss_local_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x23/",,TOR Occupancy; Misses to Local Memory - Opcode Matched. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss transactions, satisfied by an opcode, in the TOR that are satisfied by locally HOMed memory"
unc_c_tor_occupancy.miss_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x3/",,TOR Occupancy; Miss Opcode Match. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries for miss transactions that match an opcode. This generally means that the request was sent to memory or MMIO"
unc_c_tor_occupancy.miss_remote,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x8a/",,TOR Occupancy. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)"
unc_c_tor_occupancy.miss_remote_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x83/",,TOR Occupancy; Misses to Remote Memory - Opcode Matched. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss transactions, satisfied by an opcode, in the TOR that are satisfied by remote caches or remote memory"
unc_c_tor_occupancy.nid_all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x48/",,TOR Occupancy; NID Matched. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of NID matched outstanding requests in the TOR.  The NID is programmed in Cn_MSR_PMON_BOX_FILTER.nid.In conjunction with STATE = I, it is possible to monitor misses to specific NIDs in the system"
unc_c_tor_occupancy.nid_eviction,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x44/",,TOR Occupancy; NID Matched Evictions. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding NID matched eviction transactions in the TOR "
unc_c_tor_occupancy.nid_miss_all,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x4a/",,TOR Occupancy; NID Matched. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss requests in the TOR that match a NID"
unc_c_tor_occupancy.nid_miss_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x43/",,TOR Occupancy; NID and Opcode Matched Miss. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding Miss requests in the TOR that match a NID and an opcode"
unc_c_tor_occupancy.nid_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x41/",,TOR Occupancy; NID and Opcode Matched. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries that match a NID and an opcode"
unc_c_tor_occupancy.nid_wb,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x50/",,TOR Occupancy; NID Matched Writebacks. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); NID matched write transactions int the TOR"
unc_c_tor_occupancy.opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x1/",,TOR Occupancy; Opcode Match. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); TOR entries that match an opcode (matched by Cn_MSR_PMON_BOX_FILTER.opc)"
unc_c_tor_occupancy.remote,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x88/",,TOR Occupancy. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182)"
unc_c_tor_occupancy.remote_opcode,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x81/",,TOR Occupancy; Remote Memory - Opcode Matched. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Number of outstanding  transactions, satisfied by an opcode,  in the TOR that are satisfied by remote caches or remote memory"
unc_c_tor_occupancy.wb,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x36,umask=0x10/",,TOR Occupancy; Writebacks. Unit: uncore_cbox ,"For each cycle, this event accumulates the number of valid entries in the TOR that match qualifications specified by the subevent.   There are a number of subevent 'filters' but only a subset of the subevent combinations are valid.  Subevents that require an opcode or NID match require the Cn_MSR_PMON_BOX_FILTER.{opc, nid} field to be set.  If, for example, one wanted to count DRD Local Misses, one should select MISS_OPC_MATCH and set Cn_MSR_PMON_BOX_FILTER.opc to DRD (0x182); Write transactions in the TOR.   This does not include RFO, but actual operations that contain data being sent from the core"
unc_c_txr_ads_used.ad,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x4,umask=0x1/",,Onto AD Ring. Unit: uncore_cbox ,Onto AD Ring. Unit: uncore_cbox 
unc_c_txr_ads_used.ak,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x4,umask=0x2/",,Onto AK Ring. Unit: uncore_cbox ,Onto AK Ring. Unit: uncore_cbox 
unc_c_txr_ads_used.bl,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x4,umask=0x4/",,Onto BL Ring. Unit: uncore_cbox ,Onto BL Ring. Unit: uncore_cbox 
unc_c_txr_inserts.ad_cache,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2,umask=0x1/",,Egress Allocations; AD - Cachebo. Unit: uncore_cbox ,"Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the AD ring.  Some example include outbound requests, snoop requests, and snoop responses"
unc_c_txr_inserts.ad_core,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2,umask=0x10/",,Egress Allocations; AD - Corebo. Unit: uncore_cbox ,Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Corebo destined for the AD ring.  This is commonly used for outbound requests
unc_c_txr_inserts.ak_cache,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2,umask=0x2/",,Egress Allocations; AK - Cachebo. Unit: uncore_cbox ,Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the AK ring.  This is commonly used for credit returns and GO responses
unc_c_txr_inserts.ak_core,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2,umask=0x20/",,Egress Allocations; AK - Corebo. Unit: uncore_cbox ,Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Corebo destined for the AK ring.  This is commonly used for snoop responses coming from the core and destined for a Cachebo
unc_c_txr_inserts.bl_cache,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2,umask=0x4/",,Egress Allocations; BL - Cacheno. Unit: uncore_cbox ,Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the BL ring.  This is commonly used to send data from the cache to various destinations
unc_c_txr_inserts.bl_core,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2,umask=0x40/",,Egress Allocations; BL - Corebo. Unit: uncore_cbox ,Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Corebo destined for the BL ring.  This is commonly used for transferring writeback data to the cache
unc_c_txr_inserts.iv_cache,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x2,umask=0x8/",,Egress Allocations; IV - Cachebo. Unit: uncore_cbox ,Number of allocations into the Cbo Egress.  The Egress is used to queue up requests destined for the ring.; Ring transactions from the Cachebo destined for the IV ring.  This is commonly used for snoops to the cores
unc_c_txr_starved.ad_core,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3,umask=0x10/",,Injection Starvation; Onto AD Ring (to core). Unit: uncore_cbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that the core AD egress spent in starvation
unc_c_txr_starved.ak_both,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3,umask=0x2/",,Injection Starvation; Onto AK Ring. Unit: uncore_cbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that both AK egresses spent in starvation
unc_c_txr_starved.bl_both,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3,umask=0x4/",,Injection Starvation; Onto BL Ring. Unit: uncore_cbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that both BL egresses spent in starvation
unc_c_txr_starved.iv,,Kernel PMU event,uncore_cbox,uncore cache,"uncore_cbox/event=0x3,umask=0x8/",,Injection Starvation; Onto IV Ring. Unit: uncore_cbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time.; cycles that the cachebo IV egress spent in starvation
unc_h_bt_cycles_ne,,Kernel PMU event,uncore_ha,uncore cache,uncore_ha/event=0x42/,,BT Cycles Not Empty. Unit: uncore_ha ,Cycles the Backup Tracker (BT) is not empty. The BT is the actual HOM tracker in IVT
unc_h_bt_to_ht_not_issued.incoming_bl_hazard,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x51,umask=0x4/",,BT to HT Not Issued; Incoming Data Hazard. Unit: uncore_ha ,Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming BL data hazard
unc_h_bt_to_ht_not_issued.incoming_snp_hazard,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x51,umask=0x2/",,BT to HT Not Issued; Incoming Snoop Hazard. Unit: uncore_ha ,Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming snoop hazard
unc_h_bt_to_ht_not_issued.rspackcflt_hazard,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x51,umask=0x8/",,BT to HT Not Issued; Incoming Data Hazard. Unit: uncore_ha ,Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming BL data hazard
unc_h_bt_to_ht_not_issued.wbmdata_hazard,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x51,umask=0x10/",,BT to HT Not Issued; Incoming Data Hazard. Unit: uncore_ha ,Counts the number of cycles when the HA does not issue transaction from BT to HT.; Cycles unable to issue from BT due to incoming BL data hazard
unc_h_bypass_imc.not_taken,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x14,umask=0x2/",,HA to iMC Bypass; Not Taken. Unit: uncore_ha ,Counts the number of times when the HA was able to bypass was attempted.  This is a latency optimization for situations when there is light loadings on the memory subsystem.  This can be filted by when the bypass was taken and when it was not.; Filter for transactions that could not take the bypass
unc_h_bypass_imc.taken,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x14,umask=0x1/",,HA to iMC Bypass; Taken. Unit: uncore_ha ,Counts the number of times when the HA was able to bypass was attempted.  This is a latency optimization for situations when there is light loadings on the memory subsystem.  This can be filted by when the bypass was taken and when it was not.; Filter for transactions that succeeded in taking the bypass
unc_h_clockticks,,Kernel PMU event,uncore_ha,uncore cache,uncore_ha/event=0/,,uclks. Unit: uncore_ha ,"Counts the number of uclks in the HA.  This will be slightly different than the count in the Ubox because of enable/freeze delays.  The HA is on the other side of the die from the fixed Ubox uclk counter, so the drift could be somewhat larger than in units that are closer like the QPI Agent"
unc_h_direct2core_count,,Kernel PMU event,uncore_ha,uncore cache,uncore_ha/event=0x11/,,Direct2Core Messages Sent. Unit: uncore_ha ,Number of Direct2Core messages sent
unc_h_direct2core_cycles_disabled,,Kernel PMU event,uncore_ha,uncore cache,uncore_ha/event=0x12/,,Cycles when Direct2Core was Disabled. Unit: uncore_ha ,Number of cycles in which Direct2Core was disabled
unc_h_direct2core_txn_override,,Kernel PMU event,uncore_ha,uncore cache,uncore_ha/event=0x13/,,Number of Reads that had Direct2Core Overridden. Unit: uncore_ha ,Number of Reads where Direct2Core overridden
unc_h_directory_lat_opt,,Kernel PMU event,uncore_ha,uncore cache,uncore_ha/event=0x41/,,Directory Lat Opt Return. Unit: uncore_ha ,"Directory Latency Optimization Data Return Path Taken. When directory mode is enabled and the directory returned for a read is Dir=I, then data can be returned using a faster path if certain conditions are met (credits, free pipeline, etc)"
unc_h_directory_lookup.no_snp,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xc,umask=0x2/",,Directory Lookups; Snoop Not Needed. Unit: uncore_ha ,Counts the number of transactions that looked up the directory.  Can be filtered by requests that had to snoop and those that did not have to.; Filters for transactions that did not have to send any snoops because the directory bit was clear
unc_h_directory_lookup.snp,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xc,umask=0x1/",,Directory Lookups; Snoop Needed. Unit: uncore_ha ,Counts the number of transactions that looked up the directory.  Can be filtered by requests that had to snoop and those that did not have to.; Filters for transactions that had to send one or more snoops because the directory bit was set
unc_h_directory_update.any,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xd,umask=0x3/",,Directory Updates; Any Directory Update. Unit: uncore_ha ,Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears
unc_h_directory_update.clear,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xd,umask=0x2/",,Directory Updates; Directory Clear. Unit: uncore_ha ,Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.; Filter for directory clears.  This occurs when snoops were sent and all returned with RspI
unc_h_directory_update.set,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xd,umask=0x1/",,Directory Updates; Directory Set. Unit: uncore_ha ,"Counts the number of directory updates that were required.  These result in writes to the memory controller.  This can be filtered by directory sets and directory clears.; Filter for directory sets.  This occurs when a remote read transaction requests memory, bringing it to a remote cache"
unc_h_hitme_hit.ackcnfltwbi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x4/",,Counts Number of Hits in HitMe Cache; op is AckCnfltWbI. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; op is AckCnfltWbI. Unit: uncore_ha 
unc_h_hitme_hit.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0xff/",,Counts Number of Hits in HitMe Cache; All Requests. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; All Requests. Unit: uncore_ha 
unc_h_hitme_hit.allocs,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x70/",,Counts Number of Hits in HitMe Cache; Allocations. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; Allocations. Unit: uncore_ha 
unc_h_hitme_hit.evicts,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x42/",,Counts Number of Hits in HitMe Cache; Allocations. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; Allocations. Unit: uncore_ha 
unc_h_hitme_hit.hom,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0xf/",,Counts Number of Hits in HitMe Cache; HOM Requests. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; HOM Requests. Unit: uncore_ha 
unc_h_hitme_hit.invals,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x26/",,Counts Number of Hits in HitMe Cache; Invalidations. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; Invalidations. Unit: uncore_ha 
unc_h_hitme_hit.read_or_invitoe,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x1/",,"Counts Number of Hits in HitMe Cache; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE. Unit: uncore_ha ","Counts Number of Hits in HitMe Cache; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE. Unit: uncore_ha "
unc_h_hitme_hit.rsp,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x80/",,"Counts Number of Hits in HitMe Cache; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI. Unit: uncore_ha ","Counts Number of Hits in HitMe Cache; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI. Unit: uncore_ha "
unc_h_hitme_hit.rspfwdi_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x20/",,Counts Number of Hits in HitMe Cache; op is RspIFwd or RspIFwdWb for a local request. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; op is RspIFwd or RspIFwdWb for a local request. Unit: uncore_ha 
unc_h_hitme_hit.rspfwdi_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x10/",,Counts Number of Hits in HitMe Cache; op is RspIFwd or RspIFwdWb for a remote request. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; op is RspIFwd or RspIFwdWb for a remote request. Unit: uncore_ha 
unc_h_hitme_hit.rspfwds,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x40/",,Counts Number of Hits in HitMe Cache; op is RsSFwd or RspSFwdWb. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; op is RsSFwd or RspSFwdWb. Unit: uncore_ha 
unc_h_hitme_hit.wbmtoe_or_s,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x8/",,Counts Number of Hits in HitMe Cache; op is WbMtoE or WbMtoS. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; op is WbMtoE or WbMtoS. Unit: uncore_ha 
unc_h_hitme_hit.wbmtoi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x71,umask=0x2/",,Counts Number of Hits in HitMe Cache; op is WbMtoI. Unit: uncore_ha ,Counts Number of Hits in HitMe Cache; op is WbMtoI. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.ackcnfltwbi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x4/",,Accumulates Number of PV bits set on HitMe Cache Hits; op is AckCnfltWbI. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; op is AckCnfltWbI. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0xff/",,Accumulates Number of PV bits set on HitMe Cache Hits; All Requests. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; All Requests. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.hom,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0xf/",,Accumulates Number of PV bits set on HitMe Cache Hits; HOM Requests. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; HOM Requests. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.read_or_invitoe,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x1/",,"Accumulates Number of PV bits set on HitMe Cache Hits; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE. Unit: uncore_ha ","Accumulates Number of PV bits set on HitMe Cache Hits; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE. Unit: uncore_ha "
unc_h_hitme_hit_pv_bits_set.rsp,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x80/",,"Accumulates Number of PV bits set on HitMe Cache Hits; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI. Unit: uncore_ha ","Accumulates Number of PV bits set on HitMe Cache Hits; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI. Unit: uncore_ha "
unc_h_hitme_hit_pv_bits_set.rspfwdi_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x20/",,Accumulates Number of PV bits set on HitMe Cache Hits; op is RspIFwd or RspIFwdWb for a local request. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; op is RspIFwd or RspIFwdWb for a local request. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.rspfwdi_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x10/",,Accumulates Number of PV bits set on HitMe Cache Hits; op is RspIFwd or RspIFwdWb for a remote request. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; op is RspIFwd or RspIFwdWb for a remote request. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.rspfwds,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x40/",,Accumulates Number of PV bits set on HitMe Cache Hits; op is RsSFwd or RspSFwdWb. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; op is RsSFwd or RspSFwdWb. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.wbmtoe_or_s,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x8/",,Accumulates Number of PV bits set on HitMe Cache Hits; op is WbMtoE or WbMtoS. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; op is WbMtoE or WbMtoS. Unit: uncore_ha 
unc_h_hitme_hit_pv_bits_set.wbmtoi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x72,umask=0x2/",,Accumulates Number of PV bits set on HitMe Cache Hits; op is WbMtoI. Unit: uncore_ha ,Accumulates Number of PV bits set on HitMe Cache Hits; op is WbMtoI. Unit: uncore_ha 
unc_h_hitme_lookup.ackcnfltwbi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x4/",,Counts Number of times HitMe Cache is accessed; op is AckCnfltWbI. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; op is AckCnfltWbI. Unit: uncore_ha 
unc_h_hitme_lookup.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0xff/",,Counts Number of times HitMe Cache is accessed; All Requests. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; All Requests. Unit: uncore_ha 
unc_h_hitme_lookup.allocs,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x70/",,Counts Number of times HitMe Cache is accessed; Allocations. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; Allocations. Unit: uncore_ha 
unc_h_hitme_lookup.hom,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0xf/",,Counts Number of times HitMe Cache is accessed; HOM Requests. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; HOM Requests. Unit: uncore_ha 
unc_h_hitme_lookup.invals,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x26/",,Counts Number of times HitMe Cache is accessed; Invalidations. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; Invalidations. Unit: uncore_ha 
unc_h_hitme_lookup.read_or_invitoe,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x1/",,"Counts Number of times HitMe Cache is accessed; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE. Unit: uncore_ha ","Counts Number of times HitMe Cache is accessed; op is RdCode, RdData, RdDataMigratory, RdInvOwn, RdCur or InvItoE. Unit: uncore_ha "
unc_h_hitme_lookup.rsp,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x80/",,"Counts Number of times HitMe Cache is accessed; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI. Unit: uncore_ha ","Counts Number of times HitMe Cache is accessed; op is RspI, RspIWb, RspS, RspSWb, RspCnflt or RspCnfltWbI. Unit: uncore_ha "
unc_h_hitme_lookup.rspfwdi_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x20/",,Counts Number of times HitMe Cache is accessed; op is RspIFwd or RspIFwdWb for a local request. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; op is RspIFwd or RspIFwdWb for a local request. Unit: uncore_ha 
unc_h_hitme_lookup.rspfwdi_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x10/",,Counts Number of times HitMe Cache is accessed; op is RspIFwd or RspIFwdWb for a remote request. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; op is RspIFwd or RspIFwdWb for a remote request. Unit: uncore_ha 
unc_h_hitme_lookup.rspfwds,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x40/",,Counts Number of times HitMe Cache is accessed; op is RsSFwd or RspSFwdWb. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; op is RsSFwd or RspSFwdWb. Unit: uncore_ha 
unc_h_hitme_lookup.wbmtoe_or_s,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x8/",,Counts Number of times HitMe Cache is accessed; op is WbMtoE or WbMtoS. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; op is WbMtoE or WbMtoS. Unit: uncore_ha 
unc_h_hitme_lookup.wbmtoi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x70,umask=0x2/",,Counts Number of times HitMe Cache is accessed; op is WbMtoI. Unit: uncore_ha ,Counts Number of times HitMe Cache is accessed; op is WbMtoI. Unit: uncore_ha 
unc_h_igr_no_credit_cycles.ad_qpi0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x22,umask=0x1/",,Cycles without QPI Ingress Credits; AD to QPI Link 0. Unit: uncore_ha ,Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links
unc_h_igr_no_credit_cycles.ad_qpi1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x22,umask=0x2/",,Cycles without QPI Ingress Credits; AD to QPI Link 1. Unit: uncore_ha ,Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links
unc_h_igr_no_credit_cycles.ad_qpi2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x22,umask=0x10/",,Cycles without QPI Ingress Credits; BL to QPI Link 0. Unit: uncore_ha ,Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links
unc_h_igr_no_credit_cycles.bl_qpi0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x22,umask=0x4/",,Cycles without QPI Ingress Credits; BL to QPI Link 0. Unit: uncore_ha ,Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links
unc_h_igr_no_credit_cycles.bl_qpi1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x22,umask=0x8/",,Cycles without QPI Ingress Credits; BL to QPI Link 1. Unit: uncore_ha ,Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links
unc_h_igr_no_credit_cycles.bl_qpi2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x22,umask=0x20/",,Cycles without QPI Ingress Credits; BL to QPI Link 1. Unit: uncore_ha ,Counts the number of cycles when the HA does not have credits to send messages to the QPI Agent.  This can be filtered by the different credit pools and the different links
unc_h_imc_reads.normal,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x17,umask=0x1/",,HA to iMC Normal Priority Reads Issued; Normal Priority. Unit: uncore_ha ,Count of the number of reads issued to any of the memory controller channels.  This can be filtered by the priority of the reads
unc_h_imc_retry,,Kernel PMU event,uncore_ha,uncore cache,uncore_ha/event=0x1e/,,Retry Events. Unit: uncore_ha ,Retry Events. Unit: uncore_ha 
unc_h_imc_writes.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1a,umask=0xf/",,HA to iMC Full Line Writes Issued; All Writes. Unit: uncore_ha ,Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH
unc_h_imc_writes.full,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1a,umask=0x1/",,HA to iMC Full Line Writes Issued; Full Line Non-ISOCH. Unit: uncore_ha ,Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH
unc_h_imc_writes.full_isoch,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1a,umask=0x4/",,HA to iMC Full Line Writes Issued; ISOCH Full Line. Unit: uncore_ha ,Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH
unc_h_imc_writes.partial,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1a,umask=0x2/",,HA to iMC Full Line Writes Issued; Partial Non-ISOCH. Unit: uncore_ha ,Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH
unc_h_imc_writes.partial_isoch,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1a,umask=0x8/",,HA to iMC Full Line Writes Issued; ISOCH Partial. Unit: uncore_ha ,Counts the total number of full line writes issued from the HA into the memory controller.  This counts for all four channels.  It can be filtered by full/partial and ISOCH/non-ISOCH
unc_h_iot_backpressure.hub,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x61,umask=0x2/",,IOT Backpressure. Unit: uncore_ha ,IOT Backpressure. Unit: uncore_ha 
unc_h_iot_backpressure.sat,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x61,umask=0x1/",,IOT Backpressure. Unit: uncore_ha ,IOT Backpressure. Unit: uncore_ha 
unc_h_iot_cts_east_lo.cts0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x64,umask=0x1/",,IOT Common Trigger Sequencer - Lo. Unit: uncore_ha ,Debug Mask/Match Tie-Ins
unc_h_iot_cts_east_lo.cts1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x64,umask=0x2/",,IOT Common Trigger Sequencer - Lo. Unit: uncore_ha ,Debug Mask/Match Tie-Ins
unc_h_iot_cts_hi.cts2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x65,umask=0x1/",,IOT Common Trigger Sequencer - Hi. Unit: uncore_ha ,Debug Mask/Match Tie-Ins
unc_h_iot_cts_hi.cts3,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x65,umask=0x2/",,IOT Common Trigger Sequencer - Hi. Unit: uncore_ha ,Debug Mask/Match Tie-Ins
unc_h_iot_cts_west_lo.cts0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x62,umask=0x1/",,IOT Common Trigger Sequencer - Lo. Unit: uncore_ha ,Debug Mask/Match Tie-Ins
unc_h_iot_cts_west_lo.cts1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x62,umask=0x2/",,IOT Common Trigger Sequencer - Lo. Unit: uncore_ha ,Debug Mask/Match Tie-Ins
unc_h_osb.cancelled,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x53,umask=0x10/",,OSB Snoop Broadcast; Cancelled. Unit: uncore_ha ,"Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB.; OSB Snoop broadcast cancelled due to D2C or Other. OSB cancel is counted when OSB local read is not allowed even when the transaction in local InItoE. It also counts D2C OSB cancel, but also includes the cases were D2C was not set in the first place for the transaction coming from the ring"
unc_h_osb.invitoe_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x53,umask=0x4/",,OSB Snoop Broadcast; Local InvItoE. Unit: uncore_ha ,Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB
unc_h_osb.reads_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x53,umask=0x2/",,OSB Snoop Broadcast; Local Reads. Unit: uncore_ha ,Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB
unc_h_osb.reads_local_useful,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x53,umask=0x20/",,OSB Snoop Broadcast; Reads Local -  Useful. Unit: uncore_ha ,Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB
unc_h_osb.remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x53,umask=0x8/",,OSB Snoop Broadcast; Remote. Unit: uncore_ha ,Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB
unc_h_osb.remote_useful,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x53,umask=0x40/",,OSB Snoop Broadcast; Remote - Useful. Unit: uncore_ha ,Count of OSB snoop broadcasts. Counts by 1 per request causing OSB snoops to be broadcast. Does not count all the snoops generated by OSB
unc_h_osb_edr.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x54,umask=0x1/",,OSB Early Data Return; All. Unit: uncore_ha ,"Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return"
unc_h_osb_edr.reads_local_i,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x54,umask=0x2/",,OSB Early Data Return; Reads to Local  I. Unit: uncore_ha ,"Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return"
unc_h_osb_edr.reads_local_s,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x54,umask=0x8/",,OSB Early Data Return; Reads to Local S. Unit: uncore_ha ,"Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return"
unc_h_osb_edr.reads_remote_i,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x54,umask=0x4/",,OSB Early Data Return; Reads to Remote I. Unit: uncore_ha ,"Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return"
unc_h_osb_edr.reads_remote_s,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x54,umask=0x10/",,OSB Early Data Return; Reads to Remote S. Unit: uncore_ha ,"Counts the number of transactions that broadcast snoop due to OSB, but found clean data in memory and was able to do early data return"
unc_h_requests.invitoe_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0x10/",,Read and Write Requests; Local InvItoEs. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only InvItoEs coming from the local socket"
unc_h_requests.invitoe_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0x20/",,Read and Write Requests; Remote InvItoEs. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only InvItoEs coming from remote sockets"
unc_h_requests.reads,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0x3/",,Read and Write Requests; Reads. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; Incoming ead requests.  This is a good proxy for LLC Read Misses (including RFOs)"
unc_h_requests.reads_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0x1/",,Read and Write Requests; Local Reads. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only read requests coming from the local socket.  This is a good proxy for LLC Read Misses (including RFOs) from the local socket"
unc_h_requests.reads_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0x2/",,Read and Write Requests; Remote Reads. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only read requests coming from the remote socket.  This is a good proxy for LLC Read Misses (including RFOs) from the remote socket"
unc_h_requests.writes,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0xc/",,Read and Write Requests; Writes. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; Incoming write requests"
unc_h_requests.writes_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0x4/",,Read and Write Requests; Local Writes. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only writes coming from the local socket"
unc_h_requests.writes_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1,umask=0x8/",,Read and Write Requests; Remote Writes. Unit: uncore_ha ,"Counts the total number of read requests made into the Home Agent. Reads include all read opcodes (including RFO).  Writes include all writes (streaming, evictions, HitM, etc).; This filter includes only writes coming from remote sockets"
unc_h_ring_ad_used.ccw,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3e,umask=0xc/",,HA AD Ring in Use; Counterclockwise. Unit: uncore_ha ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_h_ring_ad_used.ccw_even,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3e,umask=0x4/",,HA AD Ring in Use; Counterclockwise and Even. Unit: uncore_ha ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_h_ring_ad_used.ccw_odd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3e,umask=0x8/",,HA AD Ring in Use; Counterclockwise and Odd. Unit: uncore_ha ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_h_ring_ad_used.cw,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3e,umask=0x3/",,HA AD Ring in Use; Clockwise. Unit: uncore_ha ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_h_ring_ad_used.cw_even,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3e,umask=0x1/",,HA AD Ring in Use; Clockwise and Even. Unit: uncore_ha ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_h_ring_ad_used.cw_odd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3e,umask=0x2/",,HA AD Ring in Use; Clockwise and Odd. Unit: uncore_ha ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_h_ring_ak_used.ccw,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3f,umask=0xc/",,HA AK Ring in Use; Counterclockwise. Unit: uncore_ha ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_h_ring_ak_used.ccw_even,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3f,umask=0x4/",,HA AK Ring in Use; Counterclockwise and Even. Unit: uncore_ha ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_h_ring_ak_used.ccw_odd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3f,umask=0x8/",,HA AK Ring in Use; Counterclockwise and Odd. Unit: uncore_ha ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_h_ring_ak_used.cw,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3f,umask=0x3/",,HA AK Ring in Use; Clockwise. Unit: uncore_ha ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_h_ring_ak_used.cw_even,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3f,umask=0x1/",,HA AK Ring in Use; Clockwise and Even. Unit: uncore_ha ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_h_ring_ak_used.cw_odd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3f,umask=0x2/",,HA AK Ring in Use; Clockwise and Odd. Unit: uncore_ha ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_h_ring_bl_used.ccw,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x40,umask=0xc/",,HA BL Ring in Use; Counterclockwise. Unit: uncore_ha ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_h_ring_bl_used.ccw_even,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x40,umask=0x4/",,HA BL Ring in Use; Counterclockwise and Even. Unit: uncore_ha ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_h_ring_bl_used.ccw_odd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x40,umask=0x8/",,HA BL Ring in Use; Counterclockwise and Odd. Unit: uncore_ha ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_h_ring_bl_used.cw,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x40,umask=0x3/",,HA BL Ring in Use; Clockwise. Unit: uncore_ha ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_h_ring_bl_used.cw_even,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x40,umask=0x1/",,HA BL Ring in Use; Clockwise and Even. Unit: uncore_ha ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_h_ring_bl_used.cw_odd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x40,umask=0x2/",,HA BL Ring in Use; Clockwise and Odd. Unit: uncore_ha ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_h_rpq_cycles_no_reg_credits.chn0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x15,umask=0x1/",,iMC RPQ Credits Empty - Regular; Channel 0. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only"
unc_h_rpq_cycles_no_reg_credits.chn1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x15,umask=0x2/",,iMC RPQ Credits Empty - Regular; Channel 1. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only"
unc_h_rpq_cycles_no_reg_credits.chn2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x15,umask=0x4/",,iMC RPQ Credits Empty - Regular; Channel 2. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only"
unc_h_rpq_cycles_no_reg_credits.chn3,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x15,umask=0x8/",,iMC RPQ Credits Empty - Regular; Channel 3. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only"
unc_h_rpq_cycles_no_spec_credits.chn0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x16,umask=0x1/",,iMC RPQ Credits Empty - Special; Channel 0. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only"
unc_h_rpq_cycles_no_spec_credits.chn1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x16,umask=0x2/",,iMC RPQ Credits Empty - Special; Channel 1. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only"
unc_h_rpq_cycles_no_spec_credits.chn2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x16,umask=0x4/",,iMC RPQ Credits Empty - Special; Channel 2. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only"
unc_h_rpq_cycles_no_spec_credits.chn3,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x16,umask=0x8/",,iMC RPQ Credits Empty - Special; Channel 3. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting reads from the HA into the iMC.  In order to send reads into the memory controller, the HA must first acquire a credit for the iMC's RPQ (read pending queue).  This queue is broken into regular credits/buffers that are used by general reads, and special requests such as ISOCH reads.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only"
unc_h_sbo0_credit_occupancy.ad,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6a,umask=0x1/",,SBo0 Credits Occupancy; For AD Ring. Unit: uncore_ha ,"Number of Sbo 0 credits in use in a given cycle, per ring"
unc_h_sbo0_credit_occupancy.bl,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6a,umask=0x2/",,SBo0 Credits Occupancy; For BL Ring. Unit: uncore_ha ,"Number of Sbo 0 credits in use in a given cycle, per ring"
unc_h_sbo0_credits_acquired.ad,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x68,umask=0x1/",,SBo0 Credits Acquired; For AD Ring. Unit: uncore_ha ,"Number of Sbo 0 credits acquired in a given cycle, per ring"
unc_h_sbo0_credits_acquired.bl,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x68,umask=0x2/",,SBo0 Credits Acquired; For BL Ring. Unit: uncore_ha ,"Number of Sbo 0 credits acquired in a given cycle, per ring"
unc_h_sbo1_credit_occupancy.ad,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6b,umask=0x1/",,SBo1 Credits Occupancy; For AD Ring. Unit: uncore_ha ,"Number of Sbo 1 credits in use in a given cycle, per ring"
unc_h_sbo1_credit_occupancy.bl,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6b,umask=0x2/",,SBo1 Credits Occupancy; For BL Ring. Unit: uncore_ha ,"Number of Sbo 1 credits in use in a given cycle, per ring"
unc_h_sbo1_credits_acquired.ad,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x69,umask=0x1/",,SBo1 Credits Acquired; For AD Ring. Unit: uncore_ha ,"Number of Sbo 1 credits acquired in a given cycle, per ring"
unc_h_sbo1_credits_acquired.bl,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x69,umask=0x2/",,SBo1 Credits Acquired; For BL Ring. Unit: uncore_ha ,"Number of Sbo 1 credits acquired in a given cycle, per ring"
unc_h_snoop_cycles_ne.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x8,umask=0x3/",,Cycles with Snoops Outstanding; All Requests. Unit: uncore_ha ,Counts cycles when one or more snoops are outstanding.; Tracked for snoops from both local and remote sockets
unc_h_snoop_cycles_ne.local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x8,umask=0x1/",,Cycles with Snoops Outstanding; Local Requests. Unit: uncore_ha ,Counts cycles when one or more snoops are outstanding.; This filter includes only requests coming from the local socket
unc_h_snoop_cycles_ne.remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x8,umask=0x2/",,Cycles with Snoops Outstanding; Remote Requests. Unit: uncore_ha ,Counts cycles when one or more snoops are outstanding.; This filter includes only requests coming from remote sockets
unc_h_snoop_occupancy.local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x9,umask=0x1/",,Tracker Snoops Outstanding Accumulator; Local Requests. Unit: uncore_ha ,Accumulates the occupancy of either the local HA tracker pool that have snoops pending in every cycle.    This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if an HT (HomeTracker) entry is available and this occupancy is decremented when all the snoop responses have returned.; This filter includes only requests coming from the local socket
unc_h_snoop_occupancy.remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x9,umask=0x2/",,Tracker Snoops Outstanding Accumulator; Remote Requests. Unit: uncore_ha ,Accumulates the occupancy of either the local HA tracker pool that have snoops pending in every cycle.    This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if an HT (HomeTracker) entry is available and this occupancy is decremented when all the snoop responses have returned.; This filter includes only requests coming from remote sockets
unc_h_snoop_resp.rsp_fwd_wb,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x21,umask=0x20/",64Bytes,M line forwarded from remote cache along with writeback to memory. Unit: uncore_ha ,"Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for a snoop response of Rsp*Fwd*WB.  This snoop response is only used in 4s systems.  It is used when a snoop HITM's in a remote caching agent and it directly forwards data to a requestor, and simultaneously returns data to the home to be written back to memory"
unc_h_snoop_resp.rsp_wb,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x21,umask=0x10/",,Snoop Responses Received; Rsp*WB. Unit: uncore_ha ,"Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for a snoop response of RspIWB or RspSWB.  This is returned when a non-RFO request hits in M state.  Data and Code Reads can return either RspIWB or RspSWB depending on how the system has been configured.  InvItoE transactions will also return RspIWB because they must acquire ownership"
unc_h_snoop_resp.rspcnflct,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x21,umask=0x40/",,Snoop Responses Received; RSPCNFLCT*. Unit: uncore_ha ,"Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoops responses of RspConflict.  This is returned when a snoop finds an existing outstanding transaction in a remote caching agent when it CAMs that caching agent.  This triggers conflict resolution hardware.  This covers both RspCnflct and RspCnflctWbI"
unc_h_snoop_resp.rspi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x21,umask=0x1/",,Snoop Responses Received; RspI. Unit: uncore_ha ,"Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoops responses of RspI.  RspI is returned when the remote cache does not have the data, or when the remote cache silently evicts data (such as when an RFO hits non-modified data)"
unc_h_snoop_resp.rspifwd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x21,umask=0x4/",64Bytes,M line forwarded from remote cache with no writeback to memory. Unit: uncore_ha ,"Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoop responses of RspIFwd.  This is returned when a remote caching agent forwards data and the requesting agent is able to acquire the data in E or M states.  This is commonly returned with RFO transactions.  It can be either a HitM or a HitFE"
unc_h_snoop_resp.rsps,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x21,umask=0x2/",64Bytes,Shared line response from remote cache. Unit: uncore_ha ,"Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for snoop responses of RspS.  RspS is returned when a remote cache has data but is not forwarding it.  It is a way to let the requesting socket know that it cannot allocate the data in E state.  No data is sent with S RspS"
unc_h_snoop_resp.rspsfwd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x21,umask=0x8/",64Bytes,Shared line forwarded from remote cache. Unit: uncore_ha ,"Counts the total number of RspI snoop responses received.  Whenever a snoops are issued, one or more snoop responses will be returned depending on the topology of the system.   In systems larger than 2s, when multiple snoops are returned this will count all the snoops that are received.  For example, if 3 snoops were issued and returned RspI, RspS, and RspSFwd; then each of these sub-events would increment by 1.; Filters for a snoop response of RspSFwd.  This is returned when a remote caching agent forwards data but holds on to its currently copy.  This is common for data and code reads that hit in a remote socket in E or F state"
unc_h_snoops_rsp_after_data.local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xa,umask=0x1/",,Data beat the Snoop Responses; Local Requests. Unit: uncore_ha ,Counts the number of reads when the snoop was on the critical path to the data return.; This filter includes only requests coming from the local socket
unc_h_snoops_rsp_after_data.remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xa,umask=0x2/",,Data beat the Snoop Responses; Remote Requests. Unit: uncore_ha ,Counts the number of reads when the snoop was on the critical path to the data return.; This filter includes only requests coming from remote sockets
unc_h_snp_resp_recv_local.other,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x80/",,Snoop Responses Received Local; Other. Unit: uncore_ha ,Number of snoop responses received for a Local  request; Filters for all other snoop responses
unc_h_snp_resp_recv_local.rspcnflct,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x40/",,Snoop Responses Received Local; RspCnflct. Unit: uncore_ha ,Number of snoop responses received for a Local  request; Filters for snoops responses of RspConflict.  This is returned when a snoop finds an existing outstanding transaction in a remote caching agent when it CAMs that caching agent.  This triggers conflict resolution hardware.  This covers both RspCnflct and RspCnflctWbI
unc_h_snp_resp_recv_local.rspi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x1/",,Snoop Responses Received Local; RspI. Unit: uncore_ha ,"Number of snoop responses received for a Local  request; Filters for snoops responses of RspI.  RspI is returned when the remote cache does not have the data, or when the remote cache silently evicts data (such as when an RFO hits non-modified data)"
unc_h_snp_resp_recv_local.rspifwd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x4/",,Snoop Responses Received Local; RspIFwd. Unit: uncore_ha ,Number of snoop responses received for a Local  request; Filters for snoop responses of RspIFwd.  This is returned when a remote caching agent forwards data and the requesting agent is able to acquire the data in E or M states.  This is commonly returned with RFO transactions.  It can be either a HitM or a HitFE
unc_h_snp_resp_recv_local.rsps,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x2/",,Snoop Responses Received Local; RspS. Unit: uncore_ha ,Number of snoop responses received for a Local  request; Filters for snoop responses of RspS.  RspS is returned when a remote cache has data but is not forwarding it.  It is a way to let the requesting socket know that it cannot allocate the data in E state.  No data is sent with S RspS
unc_h_snp_resp_recv_local.rspsfwd,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x8/",,Snoop Responses Received Local; RspSFwd. Unit: uncore_ha ,Number of snoop responses received for a Local  request; Filters for a snoop response of RspSFwd.  This is returned when a remote caching agent forwards data but holds on to its currently copy.  This is common for data and code reads that hit in a remote socket in E or F state
unc_h_snp_resp_recv_local.rspxfwdxwb,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x20/",,Snoop Responses Received Local; Rsp*FWD*WB. Unit: uncore_ha ,"Number of snoop responses received for a Local  request; Filters for a snoop response of Rsp*Fwd*WB.  This snoop response is only used in 4s systems.  It is used when a snoop HITM's in a remote caching agent and it directly forwards data to a requestor, and simultaneously returns data to the home to be written back to memory"
unc_h_snp_resp_recv_local.rspxwb,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x60,umask=0x10/",,Snoop Responses Received Local; Rsp*WB. Unit: uncore_ha ,Number of snoop responses received for a Local  request; Filters for a snoop response of RspIWB or RspSWB.  This is returned when a non-RFO request hits in M state.  Data and Code Reads can return either RspIWB or RspSWB depending on how the system has been configured.  InvItoE transactions will also return RspIWB because they must acquire ownership
unc_h_stall_no_sbo_credit.sbo0_ad,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6c,umask=0x1/",,"Stall on No Sbo Credits; For SBo0, AD Ring. Unit: uncore_ha ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_h_stall_no_sbo_credit.sbo0_bl,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6c,umask=0x4/",,"Stall on No Sbo Credits; For SBo0, BL Ring. Unit: uncore_ha ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_h_stall_no_sbo_credit.sbo1_ad,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6c,umask=0x2/",,"Stall on No Sbo Credits; For SBo1, AD Ring. Unit: uncore_ha ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_h_stall_no_sbo_credit.sbo1_bl,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6c,umask=0x8/",,"Stall on No Sbo Credits; For SBo1, BL Ring. Unit: uncore_ha ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_h_tad_requests_g0.region0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x1/",,HA Requests to a TAD Region - Group 0; TAD Region 0. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 0"
unc_h_tad_requests_g0.region1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x2/",,HA Requests to a TAD Region - Group 0; TAD Region 1. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 1"
unc_h_tad_requests_g0.region2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x4/",,HA Requests to a TAD Region - Group 0; TAD Region 2. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 2"
unc_h_tad_requests_g0.region3,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x8/",,HA Requests to a TAD Region - Group 0; TAD Region 3. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 3"
unc_h_tad_requests_g0.region4,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x10/",,HA Requests to a TAD Region - Group 0; TAD Region 4. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 4"
unc_h_tad_requests_g0.region5,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x20/",,HA Requests to a TAD Region - Group 0; TAD Region 5. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 5"
unc_h_tad_requests_g0.region6,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x40/",,HA Requests to a TAD Region - Group 0; TAD Region 6. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 6"
unc_h_tad_requests_g0.region7,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1b,umask=0x80/",,HA Requests to a TAD Region - Group 0; TAD Region 7. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 0 to 7.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 7"
unc_h_tad_requests_g1.region10,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1c,umask=0x4/",,HA Requests to a TAD Region - Group 1; TAD Region 10. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 10"
unc_h_tad_requests_g1.region11,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1c,umask=0x8/",,HA Requests to a TAD Region - Group 1; TAD Region 11. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 11"
unc_h_tad_requests_g1.region8,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1c,umask=0x1/",,HA Requests to a TAD Region - Group 1; TAD Region 8. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 8"
unc_h_tad_requests_g1.region9,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x1c,umask=0x2/",,HA Requests to a TAD Region - Group 1; TAD Region 9. Unit: uncore_ha ,"Counts the number of HA requests to a given TAD region.  There are up to 11 TAD (target address decode) regions in each home agent.  All requests destined for the memory controller must first be decoded to determine which TAD region they are in.  This event is filtered based on the TAD region ID, and covers regions 8 to 10.  This event is useful for understanding how applications are using the memory that is spread across the different memory regions.  It is particularly useful for Monroe systems that use the TAD to enable individual channels to enter self-refresh to save power.; Filters request made to TAD Region 9"
unc_h_tracker_cycles_full.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2,umask=0x2/",,Tracker Cycles Full; Cycles Completely Used. Unit: uncore_ha ,"Counts the number of cycles when the local HA tracker pool is completely used.  This can be used with edge detect to identify the number of situations when the pool became fully utilized.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, the system could be starved for RTIDs but not fill up the HA trackers.  HA trackers are allocated as soon as a request enters the HA and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; Counts the number of cycles when the HA tracker pool (HT) is completely used including reserved HT entries.  It will not return valid count when BT is disabled"
unc_h_tracker_cycles_full.gp,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2,umask=0x1/",,Tracker Cycles Full; Cycles GP Completely Used. Unit: uncore_ha ,"Counts the number of cycles when the local HA tracker pool is completely used.  This can be used with edge detect to identify the number of situations when the pool became fully utilized.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, the system could be starved for RTIDs but not fill up the HA trackers.  HA trackers are allocated as soon as a request enters the HA and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; Counts the number of cycles when the general purpose (GP) HA tracker pool (HT) is completely used.  It will not return valid count when BT is disabled"
unc_h_tracker_cycles_ne.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3,umask=0x3/",,Tracker Cycles Not Empty; All Requests. Unit: uncore_ha ,"Counts the number of cycles when the local HA tracker pool is not empty.  This can be used with edge detect to identify the number of situations when the pool became empty.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, this buffer could be completely empty, but there may still be credits in use by the CBos.  This stat can be used in conjunction with the occupancy accumulation stat in order to calculate average queue occpancy.  HA trackers are allocated as soon as a request enters the HA if an HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; Requests coming from both local and remote sockets"
unc_h_tracker_cycles_ne.local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3,umask=0x1/",,Tracker Cycles Not Empty; Local Requests. Unit: uncore_ha ,"Counts the number of cycles when the local HA tracker pool is not empty.  This can be used with edge detect to identify the number of situations when the pool became empty.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, this buffer could be completely empty, but there may still be credits in use by the CBos.  This stat can be used in conjunction with the occupancy accumulation stat in order to calculate average queue occpancy.  HA trackers are allocated as soon as a request enters the HA if an HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; This filter includes only requests coming from the local socket"
unc_h_tracker_cycles_ne.remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x3,umask=0x2/",,Tracker Cycles Not Empty; Remote Requests. Unit: uncore_ha ,"Counts the number of cycles when the local HA tracker pool is not empty.  This can be used with edge detect to identify the number of situations when the pool became empty.  This should not be confused with RTID credit usage -- which must be tracked inside each cbo individually -- but represents the actual tracker buffer structure.  In other words, this buffer could be completely empty, but there may still be credits in use by the CBos.  This stat can be used in conjunction with the occupancy accumulation stat in order to calculate average queue occpancy.  HA trackers are allocated as soon as a request enters the HA if an HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring.; This filter includes only requests coming from remote sockets"
unc_h_tracker_occupancy.invitoe_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x4,umask=0x40/",,Tracker Occupancy Accumulator; Local InvItoE Requests. Unit: uncore_ha ,Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring
unc_h_tracker_occupancy.invitoe_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x4,umask=0x80/",,Tracker Occupancy Accumulator; Remote InvItoE Requests. Unit: uncore_ha ,Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring
unc_h_tracker_occupancy.reads_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x4,umask=0x4/",,Tracker Occupancy Accumulator; Local Read Requests. Unit: uncore_ha ,Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring
unc_h_tracker_occupancy.reads_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x4,umask=0x8/",,Tracker Occupancy Accumulator; Remote Read Requests. Unit: uncore_ha ,Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring
unc_h_tracker_occupancy.writes_local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x4,umask=0x10/",,Tracker Occupancy Accumulator; Local Write Requests. Unit: uncore_ha ,Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring
unc_h_tracker_occupancy.writes_remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x4,umask=0x20/",,Tracker Occupancy Accumulator; Remote Write Requests. Unit: uncore_ha ,Accumulates the occupancy of the local HA tracker pool in every cycle.  This can be used in conjection with the not empty stat to calculate average queue occupancy or the allocations stat in order to calculate average queue latency.  HA trackers are allocated as soon as a request enters the HA if a HT (Home Tracker) entry is available and is released after the snoop response and data return (or post in the case of a write) and the response is returned on the ring
unc_h_tracker_pending_occupancy.local,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x5,umask=0x1/",,Data Pending Occupancy Accumulator; Local Requests. Unit: uncore_ha ,"Accumulates the number of transactions that have data from the memory controller until they get scheduled to the Egress.  This can be used to calculate the queuing latency for two things.  (1) If the system is waiting for snoops, this will increase.  (2) If the system can't schedule to the Egress because of either (a) Egress Credits or (b) QPI BL IGR credits for remote requests.; This filter includes only requests coming from the local socket"
unc_h_tracker_pending_occupancy.remote,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x5,umask=0x2/",,Data Pending Occupancy Accumulator; Remote Requests. Unit: uncore_ha ,"Accumulates the number of transactions that have data from the memory controller until they get scheduled to the Egress.  This can be used to calculate the queuing latency for two things.  (1) If the system is waiting for snoops, this will increase.  (2) If the system can't schedule to the Egress because of either (a) Egress Credits or (b) QPI BL IGR credits for remote requests.; This filter includes only requests coming from remote sockets"
unc_h_txr_ad.hom,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0xf,umask=0x4/",,Outbound NDR Ring Transactions; Non-data Responses. Unit: uncore_ha ,Counts the number of outbound transactions on the AD ring.  This can be filtered by the NDR and SNP message classes.  See the filter descriptions for more details.; Filter for outbound NDR transactions sent on the AD ring.  NDR stands for non-data response and is generally used for completions that do not include data.  AD NDR is used for transactions to remote sockets
unc_h_txr_ad_cycles_full.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2a,umask=0x3/",,AD Egress Full; All. Unit: uncore_ha ,AD Egress Full; Cycles full from both schedulers
unc_h_txr_ad_cycles_full.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2a,umask=0x1/",,AD Egress Full; Scheduler 0. Unit: uncore_ha ,AD Egress Full; Filter for cycles full  from scheduler bank 0
unc_h_txr_ad_cycles_full.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2a,umask=0x2/",,AD Egress Full; Scheduler 1. Unit: uncore_ha ,AD Egress Full; Filter for cycles full  from scheduler bank 1
unc_h_txr_ad_cycles_ne.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x29,umask=0x3/",,AD Egress Not Empty; All. Unit: uncore_ha ,AD Egress Not Empty; Cycles full from both schedulers
unc_h_txr_ad_cycles_ne.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x29,umask=0x1/",,AD Egress Not Empty; Scheduler 0. Unit: uncore_ha ,AD Egress Not Empty; Filter for cycles not empty  from scheduler bank 0
unc_h_txr_ad_cycles_ne.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x29,umask=0x2/",,AD Egress Not Empty; Scheduler 1. Unit: uncore_ha ,AD Egress Not Empty; Filter for cycles not empty from scheduler bank 1
unc_h_txr_ad_inserts.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x27,umask=0x3/",,AD Egress Allocations; All. Unit: uncore_ha ,AD Egress Allocations; Allocations from both schedulers
unc_h_txr_ad_inserts.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x27,umask=0x1/",,AD Egress Allocations; Scheduler 0. Unit: uncore_ha ,AD Egress Allocations; Filter for allocations from scheduler bank 0
unc_h_txr_ad_inserts.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x27,umask=0x2/",,AD Egress Allocations; Scheduler 1. Unit: uncore_ha ,AD Egress Allocations; Filter for allocations from scheduler bank 1
unc_h_txr_ak_cycles_full.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x32,umask=0x3/",,AK Egress Full; All. Unit: uncore_ha ,AK Egress Full; Cycles full from both schedulers
unc_h_txr_ak_cycles_full.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x32,umask=0x1/",,AK Egress Full; Scheduler 0. Unit: uncore_ha ,AK Egress Full; Filter for cycles full  from scheduler bank 0
unc_h_txr_ak_cycles_full.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x32,umask=0x2/",,AK Egress Full; Scheduler 1. Unit: uncore_ha ,AK Egress Full; Filter for cycles full  from scheduler bank 1
unc_h_txr_ak_cycles_ne.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x31,umask=0x3/",,AK Egress Not Empty; All. Unit: uncore_ha ,AK Egress Not Empty; Cycles full from both schedulers
unc_h_txr_ak_cycles_ne.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x31,umask=0x1/",,AK Egress Not Empty; Scheduler 0. Unit: uncore_ha ,AK Egress Not Empty; Filter for cycles not empty  from scheduler bank 0
unc_h_txr_ak_cycles_ne.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x31,umask=0x2/",,AK Egress Not Empty; Scheduler 1. Unit: uncore_ha ,AK Egress Not Empty; Filter for cycles not empty from scheduler bank 1
unc_h_txr_ak_inserts.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2f,umask=0x3/",,AK Egress Allocations; All. Unit: uncore_ha ,AK Egress Allocations; Allocations from both schedulers
unc_h_txr_ak_inserts.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2f,umask=0x1/",,AK Egress Allocations; Scheduler 0. Unit: uncore_ha ,AK Egress Allocations; Filter for allocations from scheduler bank 0
unc_h_txr_ak_inserts.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x2f,umask=0x2/",,AK Egress Allocations; Scheduler 1. Unit: uncore_ha ,AK Egress Allocations; Filter for allocations from scheduler bank 1
unc_h_txr_bl.drs_cache,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x10,umask=0x1/",,Outbound DRS Ring Transactions to Cache; Data to Cache. Unit: uncore_ha ,Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.; Filter for data being sent to the cache
unc_h_txr_bl.drs_core,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x10,umask=0x2/",,Outbound DRS Ring Transactions to Cache; Data to Core. Unit: uncore_ha ,Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.; Filter for data being sent directly to the requesting core
unc_h_txr_bl.drs_qpi,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x10,umask=0x4/",,Outbound DRS Ring Transactions to Cache; Data to QPI. Unit: uncore_ha ,Counts the number of DRS messages sent out on the BL ring.   This can be filtered by the destination.; Filter for data being sent to a remote socket over QPI
unc_h_txr_bl_cycles_full.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x36,umask=0x3/",,BL Egress Full; All. Unit: uncore_ha ,BL Egress Full; Cycles full from both schedulers
unc_h_txr_bl_cycles_full.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x36,umask=0x1/",,BL Egress Full; Scheduler 0. Unit: uncore_ha ,BL Egress Full; Filter for cycles full  from scheduler bank 0
unc_h_txr_bl_cycles_full.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x36,umask=0x2/",,BL Egress Full; Scheduler 1. Unit: uncore_ha ,BL Egress Full; Filter for cycles full  from scheduler bank 1
unc_h_txr_bl_cycles_ne.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x35,umask=0x3/",,BL Egress Not Empty; All. Unit: uncore_ha ,BL Egress Not Empty; Cycles full from both schedulers
unc_h_txr_bl_cycles_ne.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x35,umask=0x1/",,BL Egress Not Empty; Scheduler 0. Unit: uncore_ha ,BL Egress Not Empty; Filter for cycles not empty  from scheduler bank 0
unc_h_txr_bl_cycles_ne.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x35,umask=0x2/",,BL Egress Not Empty; Scheduler 1. Unit: uncore_ha ,BL Egress Not Empty; Filter for cycles not empty from scheduler bank 1
unc_h_txr_bl_inserts.all,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x33,umask=0x3/",,BL Egress Allocations; All. Unit: uncore_ha ,BL Egress Allocations; Allocations from both schedulers
unc_h_txr_bl_inserts.sched0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x33,umask=0x1/",,BL Egress Allocations; Scheduler 0. Unit: uncore_ha ,BL Egress Allocations; Filter for allocations from scheduler bank 0
unc_h_txr_bl_inserts.sched1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x33,umask=0x2/",,BL Egress Allocations; Scheduler 1. Unit: uncore_ha ,BL Egress Allocations; Filter for allocations from scheduler bank 1
unc_h_txr_starved.ak,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6d,umask=0x1/",,Injection Starvation; For AK Ring. Unit: uncore_ha ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time
unc_h_txr_starved.bl,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x6d,umask=0x2/",,Injection Starvation; For BL Ring. Unit: uncore_ha ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time
unc_h_wpq_cycles_no_reg_credits.chn0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x18,umask=0x1/",,HA iMC CHN0 WPQ Credits Empty - Regular; Channel 0. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only"
unc_h_wpq_cycles_no_reg_credits.chn1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x18,umask=0x2/",,HA iMC CHN0 WPQ Credits Empty - Regular; Channel 1. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only"
unc_h_wpq_cycles_no_reg_credits.chn2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x18,umask=0x4/",,HA iMC CHN0 WPQ Credits Empty - Regular; Channel 2. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only"
unc_h_wpq_cycles_no_reg_credits.chn3,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x18,umask=0x8/",,HA iMC CHN0 WPQ Credits Empty - Regular; Channel 3. Unit: uncore_ha ,"Counts the number of cycles when there are no regular credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the regular credits  Common high banwidth workloads should be able to make use of all of the regular buffers, but it will be difficult (and uncommon) to make use of both the regular and special buffers at the same time.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only"
unc_h_wpq_cycles_no_spec_credits.chn0,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x19,umask=0x1/",,HA iMC CHN0 WPQ Credits Empty - Special; Channel 0. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 0 only"
unc_h_wpq_cycles_no_spec_credits.chn1,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x19,umask=0x2/",,HA iMC CHN0 WPQ Credits Empty - Special; Channel 1. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 1 only"
unc_h_wpq_cycles_no_spec_credits.chn2,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x19,umask=0x4/",,HA iMC CHN0 WPQ Credits Empty - Special; Channel 2. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 2 only"
unc_h_wpq_cycles_no_spec_credits.chn3,,Kernel PMU event,uncore_ha,uncore cache,"uncore_ha/event=0x19,umask=0x8/",,HA iMC CHN0 WPQ Credits Empty - Special; Channel 3. Unit: uncore_ha ,"Counts the number of cycles when there are no special credits available for posting writes from the HA into the iMC.  In order to send writes into the memory controller, the HA must first acquire a credit for the iMC's WPQ (write pending queue).  This queue is broken into regular credits/buffers that are used by general writes, and special requests such as ISOCH writes.  This count only tracks the special credits.  This statistic is generally not interesting for general IA workloads, but may be of interest for understanding the characteristics of systems using ISOCH.  One can filter based on the memory controller channel.  One or more channels can be tracked at a given time.; Filter for memory controller channel 3 only"
qpi_ctl_bandwidth_tx,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x4/",8Bytes,Number of non data (control) flits transmitted . Derived from unc_q_txl_flits_g0.non_data. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.; Number of non-NULL non-data flits transmitted across QPI.  This basically tracks the protocol overhead on the QPI link.  One can get a good picture of the QPI-link characteristics by evaluating the protocol flits, data flits, and idle/null flits.  This includes the header flits for data packets"
qpi_data_bandwidth_tx,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x2/",8Bytes,Number of data flits transmitted . Derived from unc_q_txl_flits_g0.data. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.; Number of data flits transmitted over QPI.  Each flit contains 64b of data.  This includes both DRS and NCB data flits (coherent and non-coherent).  This can be used to calculate the data bandwidth of the QPI link.  One can get a good picture of the QPI-link characteristics by evaluating the protocol flits, data flits, and idle/null flits.  This does not include the header flits that go in data packets"
unc_q_clockticks,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x14/,,Number of qfclks. Unit: uncore_qpi ,"Counts the number of clocks in the QPI LL.  This clock runs at 1/4th the GT/s speed of the QPI link.  For example, a 4GT/s link will have qfclk or 1GHz.  HSX does not support dynamic link speeds, so this frequency is fixed"
unc_q_cto_count,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x38/,,Count of CTO Events. Unit: uncore_qpi ,"Counts the number of CTO (cluster trigger outs) events that were asserted across the two slots.  If both slots trigger in a given cycle, the event will increment by 2.  You can use edge detect to count the number of cases when both events triggered"
unc_q_direct2core.failure_credits,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x2/",,Direct 2 Core Spawning; Spawn Failure - Egress Credits. Unit: uncore_qpi ,"Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn failed because there were not enough Egress credits.  Had there been enough credits, the spawn would have worked as the RBT bit was set and the RBT tag matched"
unc_q_direct2core.failure_credits_miss,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x20/",,Direct 2 Core Spawning; Spawn Failure - Egress and RBT Miss. Unit: uncore_qpi ,"Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn failed because the RBT tag did not match and there weren't enough Egress credits.   The valid bit was set"
unc_q_direct2core.failure_credits_rbt,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x8/",,Direct 2 Core Spawning; Spawn Failure - Egress and RBT Invalid. Unit: uncore_qpi ,"Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn failed because there were not enough Egress credits AND the RBT bit was not set, but the RBT tag matched"
unc_q_direct2core.failure_credits_rbt_miss,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x80/",,"Direct 2 Core Spawning; Spawn Failure - Egress and RBT Miss, Invalid. Unit: uncore_qpi ","Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn failed because the RBT tag did not match, the valid bit was not set and there weren't enough Egress credits"
unc_q_direct2core.failure_miss,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x10/",,Direct 2 Core Spawning; Spawn Failure - RBT Miss. Unit: uncore_qpi ,"Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn failed because the RBT tag did not match although the valid bit was set and there were enough Egress credits"
unc_q_direct2core.failure_rbt_hit,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x4/",,Direct 2 Core Spawning; Spawn Failure - RBT Invalid. Unit: uncore_qpi ,"Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn failed because the route-back table (RBT) specified that the transaction should not trigger a direct2core transaction.  This is common for IO transactions.  There were enough Egress credits and the RBT tag matched but the valid bit was not set"
unc_q_direct2core.failure_rbt_miss,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x40/",,Direct 2 Core Spawning; Spawn Failure - RBT Miss and Invalid. Unit: uncore_qpi ,"Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn failed because the RBT tag did not match and the valid bit was not set although there were enough Egress credits"
unc_q_direct2core.success_rbt_hit,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x1/",,Direct 2 Core Spawning; Spawn Success. Unit: uncore_qpi ,"Counts the number of DRS packets that we attempted to do direct2core on.  There are 4 mutually exclusive filters.  Filter [0] can be used to get successful spawns, while [1:3] provide the different failure cases.  Note that this does not count packets that are not candidates for Direct2Core.  The only candidates for Direct2Core are DRS packets destined for Cbos.; The spawn was successful.  There were sufficient credits, the RBT valid bit was set and there was an RBT tag match.  The message was marked to spawn direct2core"
unc_q_l1_power_cycles,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x12/,,Cycles in L1. Unit: uncore_qpi ,"Number of QPI qfclk cycles spent in L1 power mode.  L1 is a mode that totally shuts down a QPI link.  Use edge detect to count the number of instances when the QPI link entered L1.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another. Because L1 totally shuts down the link, it takes a good amount of time to exit this mode"
unc_q_rxl0_power_cycles,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0xf/,,Cycles in L0. Unit: uncore_qpi ,"Number of QPI qfclk cycles spent in L0 power mode in the Link Layer.  L0 is the default mode which provides the highest performance with the most power.  Use edge detect to count the number of instances that the link entered L0.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another.  The phy layer  sometimes leaves L0 for training, which will not be captured by this event"
unc_q_rxl0p_power_cycles,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x10/,,Cycles in L0p. Unit: uncore_qpi ,"Number of QPI qfclk cycles spent in L0p power mode.  L0p is a mode where we disable 1/2 of the QPI lanes, decreasing our bandwidth in order to save power.  It increases snoop and data transfer latencies and decreases overall bandwidth.  This mode can be very useful in NUMA optimized workloads that largely only utilize QPI for snoops and their responses.  Use edge detect to count the number of instances when the QPI link entered L0p.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another"
unc_q_rxl_bypassed,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x9/,,Rx Flit Buffer Bypassed. Unit: uncore_qpi ,"Counts the number of times that an incoming flit was able to bypass the flit buffer and pass directly across the BGF and into the Egress.  This is a latency optimization, and should generally be the common case.  If this value is less than the number of flits transferred, it implies that there was queueing getting onto the ring, and thus the transactions saw higher latency"
unc_q_rxl_crc_errors.link_init,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0x1/",,CRC Errors Detected; LinkInit. Unit: uncore_qpi ,"Number of CRC errors detected in the QPI Agent.  Each QPI flit incorporates 8 bits of CRC for error detection.  This counts the number of flits where the CRC was able to detect an error.  After an error has been detected, the QPI agent will send a request to the transmitting socket to resend the flit (as well as any flits that came after it).; CRC errors detected during link initialization"
unc_q_rxl_crc_errors.normal_op,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0x2/",,CRC Errors Detected; Normal Operations. Unit: uncore_qpi ,"Number of CRC errors detected in the QPI Agent.  Each QPI flit incorporates 8 bits of CRC for error detection.  This counts the number of flits where the CRC was able to detect an error.  After an error has been detected, the QPI agent will send a request to the transmitting socket to resend the flit (as well as any flits that came after it).; CRC errors detected during normal operation"
unc_q_rxl_credits_consumed_vn0.drs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1e,umask=0x1/",,VN0 Credit Consumed; DRS. Unit: uncore_qpi ,Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN0 credit for the DRS message class
unc_q_rxl_credits_consumed_vn0.hom,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1e,umask=0x8/",,VN0 Credit Consumed; HOM. Unit: uncore_qpi ,Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN0 credit for the HOM message class
unc_q_rxl_credits_consumed_vn0.ncb,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1e,umask=0x2/",,VN0 Credit Consumed; NCB. Unit: uncore_qpi ,Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN0 credit for the NCB message class
unc_q_rxl_credits_consumed_vn0.ncs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1e,umask=0x4/",,VN0 Credit Consumed; NCS. Unit: uncore_qpi ,Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN0 credit for the NCS message class
unc_q_rxl_credits_consumed_vn0.ndr,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1e,umask=0x20/",,VN0 Credit Consumed; NDR. Unit: uncore_qpi ,Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN0 credit for the NDR message class
unc_q_rxl_credits_consumed_vn0.snp,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1e,umask=0x10/",,VN0 Credit Consumed; SNP. Unit: uncore_qpi ,Counts the number of times that an RxQ VN0 credit was consumed (i.e. message uses a VN0 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN0 credit for the SNP message class
unc_q_rxl_credits_consumed_vn1.drs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x39,umask=0x1/",,VN1 Credit Consumed; DRS. Unit: uncore_qpi ,Counts the number of times that an RxQ VN1 credit was consumed (i.e. message uses a VN1 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN1 credit for the DRS message class
unc_q_rxl_credits_consumed_vn1.hom,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x39,umask=0x8/",,VN1 Credit Consumed; HOM. Unit: uncore_qpi ,Counts the number of times that an RxQ VN1 credit was consumed (i.e. message uses a VN1 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN1 credit for the HOM message class
unc_q_rxl_credits_consumed_vn1.ncb,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x39,umask=0x2/",,VN1 Credit Consumed; NCB. Unit: uncore_qpi ,Counts the number of times that an RxQ VN1 credit was consumed (i.e. message uses a VN1 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN1 credit for the NCB message class
unc_q_rxl_credits_consumed_vn1.ncs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x39,umask=0x4/",,VN1 Credit Consumed; NCS. Unit: uncore_qpi ,Counts the number of times that an RxQ VN1 credit was consumed (i.e. message uses a VN1 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN1 credit for the NCS message class
unc_q_rxl_credits_consumed_vn1.ndr,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x39,umask=0x20/",,VN1 Credit Consumed; NDR. Unit: uncore_qpi ,Counts the number of times that an RxQ VN1 credit was consumed (i.e. message uses a VN1 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN1 credit for the NDR message class
unc_q_rxl_credits_consumed_vn1.snp,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x39,umask=0x10/",,VN1 Credit Consumed; SNP. Unit: uncore_qpi ,Counts the number of times that an RxQ VN1 credit was consumed (i.e. message uses a VN1 credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed.; VN1 credit for the SNP message class
unc_q_rxl_credits_consumed_vna,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x1d/,,VNA Credit Consumed. Unit: uncore_qpi ,Counts the number of times that an RxQ VNA credit was consumed (i.e. message uses a VNA credit for the Rx Buffer).  This includes packets that went through the RxQ and those that were bypasssed
unc_q_rxl_cycles_ne,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0xa/,,RxQ Cycles Not Empty. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy"
unc_q_rxl_cycles_ne_drs.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xf,umask=0x1/",,RxQ Cycles Not Empty - DRS; for VN0. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors DRS flits only"
unc_q_rxl_cycles_ne_drs.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xf,umask=0x2/",,RxQ Cycles Not Empty - DRS; for VN1. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors DRS flits only"
unc_q_rxl_cycles_ne_hom.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x12,umask=0x1/",,RxQ Cycles Not Empty - HOM; for VN0. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors HOM flits only"
unc_q_rxl_cycles_ne_hom.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x12,umask=0x2/",,RxQ Cycles Not Empty - HOM; for VN1. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors HOM flits only"
unc_q_rxl_cycles_ne_ncb.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x10,umask=0x1/",,RxQ Cycles Not Empty - NCB; for VN0. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors NCB flits only"
unc_q_rxl_cycles_ne_ncb.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x10,umask=0x2/",,RxQ Cycles Not Empty - NCB; for VN1. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors NCB flits only"
unc_q_rxl_cycles_ne_ncs.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x11,umask=0x1/",,RxQ Cycles Not Empty - NCS; for VN0. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors NCS flits only"
unc_q_rxl_cycles_ne_ncs.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x11,umask=0x2/",,RxQ Cycles Not Empty - NCS; for VN1. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors NCS flits only"
unc_q_rxl_cycles_ne_ndr.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x14,umask=0x1/",,RxQ Cycles Not Empty - NDR; for VN0. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors NDR flits only"
unc_q_rxl_cycles_ne_ndr.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x14,umask=0x2/",,RxQ Cycles Not Empty - NDR; for VN1. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors NDR flits only"
unc_q_rxl_cycles_ne_snp.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x1/",,RxQ Cycles Not Empty - SNP; for VN0. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors SNP flits only"
unc_q_rxl_cycles_ne_snp.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x13,umask=0x2/",,RxQ Cycles Not Empty - SNP; for VN1. Unit: uncore_qpi ,"Counts the number of cycles that the QPI RxQ was not empty.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy Accumulator event to calculate the average occupancy.  This monitors SNP flits only"
unc_q_rxl_flits_g0.idle,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1,umask=0x1/",,Flits Received - Group 0; Idle and Null Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.; Number of flits received over QPI that do not hold protocol payload.  When QPI is not in a power saving state, it continuously transmits flits across the link.  When there are no protocol flits to send, it will send IDLE and NULL flits  across.  These flits sometimes do carry a payload, such as credit returns, but are generally not considered part of the QPI bandwidth"
unc_q_rxl_flits_g1.drs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x18/",,Flits Received - Group 1; DRS Flits (both Header and Data). Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of flits received over QPI on the DRS (Data Response) channel.  DRS flits are used to transmit data with coherency.  This does not count data flits received over the NCB channel which transmits non-coherent data"
unc_q_rxl_flits_g1.drs_data,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x8/",,Flits Received - Group 1; DRS Data Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of data flits received over QPI on the DRS (Data Response) channel.  DRS flits are used to transmit data with coherency.  This does not count data flits received over the NCB channel which transmits non-coherent data.  This includes only the data flits (not the header)"
unc_q_rxl_flits_g1.drs_nondata,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x10/",,Flits Received - Group 1; DRS Header Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of protocol flits received over QPI on the DRS (Data Response) channel.  DRS flits are used to transmit data with coherency.  This does not count data flits received over the NCB channel which transmits non-coherent data.  This includes only the header flits (not the data).  This includes extended headers"
unc_q_rxl_flits_g1.hom,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x6/",,Flits Received - Group 1; HOM Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of flits received over QPI on the home channel"
unc_q_rxl_flits_g1.hom_nonreq,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x4/",,Flits Received - Group 1; HOM Non-Request Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of non-request flits received over QPI on the home channel.  These are most commonly snoop responses, and this event can be used as a proxy for that"
unc_q_rxl_flits_g1.hom_req,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x2/",,Flits Received - Group 1; HOM Request Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of data request received over QPI on the home channel.  This basically counts the number of remote memory requests received over QPI.  In conjunction with the local read count in the Home Agent, one can calculate the number of LLC Misses"
unc_q_rxl_flits_g1.snp,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x1/",,Flits Received - Group 1; SNP Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of snoop request flits received over QPI.  These requests are contained in the snoop channel.  This does not include snoop responses, which are received on the home channel"
unc_q_rxl_flits_g2.ncb,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0xc/",,Flits Received - Group 2; Non-Coherent Rx Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of Non-Coherent Bypass flits.  These packets are generally used to transmit non-coherent data across QPI"
unc_q_rxl_flits_g2.ncb_data,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0x4/",,Flits Received - Group 2; Non-Coherent data Rx Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of Non-Coherent Bypass data flits.  These flits are generally used to transmit non-coherent data across QPI.  This does not include a count of the DRS (coherent) data flits.  This only counts the data flits, not the NCB headers"
unc_q_rxl_flits_g2.ncb_nondata,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0x8/",,Flits Received - Group 2; Non-Coherent non-data Rx Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of Non-Coherent Bypass non-data flits.  These packets are generally used to transmit non-coherent data across QPI, and the flits counted here are for headers and other non-data flits.  This includes extended headers"
unc_q_rxl_flits_g2.ncs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0x10/",,Flits Received - Group 2; Non-Coherent standard Rx Flits. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of NCS (non-coherent standard) flits received over QPI.    This includes extended headers"
unc_q_rxl_flits_g2.ndr_ad,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0x1/",,Flits Received - Group 2; Non-Data Response Rx Flits - AD. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of flits received over the NDR (Non-Data Response) channel.  This channel is used to send a variety of protocol flits including grants and completions.  This is only for NDR packets to the local socket which use the AK ring"
unc_q_rxl_flits_g2.ndr_ak,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3,umask=0x2/",,Flits Received - Group 2; Non-Data Response Rx Flits - AK. Unit: uncore_qpi ,"Counts the number of flits received from the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of flits received over the NDR (Non-Data Response) channel.  This channel is used to send a variety of protocol flits including grants and completions.  This is only for NDR packets destined for Route-thru to a remote socket"
unc_q_rxl_inserts,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x8/,,Rx Flit Buffer Allocations. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime"
unc_q_rxl_inserts_drs.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x9,umask=0x1/",,Rx Flit Buffer Allocations - DRS; for VN0. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only DRS flits"
unc_q_rxl_inserts_drs.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x9,umask=0x2/",,Rx Flit Buffer Allocations - DRS; for VN1. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only DRS flits"
unc_q_rxl_inserts_hom.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xc,umask=0x1/",,Rx Flit Buffer Allocations - HOM; for VN0. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only HOM flits"
unc_q_rxl_inserts_hom.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xc,umask=0x2/",,Rx Flit Buffer Allocations - HOM; for VN1. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only HOM flits"
unc_q_rxl_inserts_ncb.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xa,umask=0x1/",,Rx Flit Buffer Allocations - NCB; for VN0. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NCB flits"
unc_q_rxl_inserts_ncb.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xa,umask=0x2/",,Rx Flit Buffer Allocations - NCB; for VN1. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NCB flits"
unc_q_rxl_inserts_ncs.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xb,umask=0x1/",,Rx Flit Buffer Allocations - NCS; for VN0. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NCS flits"
unc_q_rxl_inserts_ncs.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xb,umask=0x2/",,Rx Flit Buffer Allocations - NCS; for VN1. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NCS flits"
unc_q_rxl_inserts_ndr.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xe,umask=0x1/",,Rx Flit Buffer Allocations - NDR; for VN0. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NDR flits"
unc_q_rxl_inserts_ndr.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xe,umask=0x2/",,Rx Flit Buffer Allocations - NDR; for VN1. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only NDR flits"
unc_q_rxl_inserts_snp.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xd,umask=0x1/",,Rx Flit Buffer Allocations - SNP; for VN0. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only SNP flits"
unc_q_rxl_inserts_snp.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0xd,umask=0x2/",,Rx Flit Buffer Allocations - SNP; for VN1. Unit: uncore_qpi ,"Number of allocations into the QPI Rx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime.  This monitors only SNP flits"
unc_q_rxl_occupancy,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0xb/,,RxQ Occupancy - All Packets. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime"
unc_q_rxl_occupancy_drs.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x15,umask=0x1/",,RxQ Occupancy - DRS; for VN0. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors DRS flits only"
unc_q_rxl_occupancy_drs.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x15,umask=0x2/",,RxQ Occupancy - DRS; for VN1. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors DRS flits only"
unc_q_rxl_occupancy_hom.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x18,umask=0x1/",,RxQ Occupancy - HOM; for VN0. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors HOM flits only"
unc_q_rxl_occupancy_hom.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x18,umask=0x2/",,RxQ Occupancy - HOM; for VN1. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors HOM flits only"
unc_q_rxl_occupancy_ncb.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x16,umask=0x1/",,RxQ Occupancy - NCB; for VN0. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NCB flits only"
unc_q_rxl_occupancy_ncb.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x16,umask=0x2/",,RxQ Occupancy - NCB; for VN1. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NCB flits only"
unc_q_rxl_occupancy_ncs.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x17,umask=0x1/",,RxQ Occupancy - NCS; for VN0. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NCS flits only"
unc_q_rxl_occupancy_ncs.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x17,umask=0x2/",,RxQ Occupancy - NCS; for VN1. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NCS flits only"
unc_q_rxl_occupancy_ndr.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1a,umask=0x1/",,RxQ Occupancy - NDR; for VN0. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NDR flits only"
unc_q_rxl_occupancy_ndr.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1a,umask=0x2/",,RxQ Occupancy - NDR; for VN1. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors NDR flits only"
unc_q_rxl_occupancy_snp.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x19,umask=0x1/",,RxQ Occupancy - SNP; for VN0. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors SNP flits only"
unc_q_rxl_occupancy_snp.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x19,umask=0x2/",,RxQ Occupancy - SNP; for VN1. Unit: uncore_qpi ,"Accumulates the number of elements in the QPI RxQ in each cycle.  Generally, when data is transmitted across QPI, it will bypass the RxQ and pass directly to the ring interface.  If things back up getting transmitted onto the ring, however, it may need to allocate into this buffer, thus increasing the latency.  This event can be used in conjunction with the Flit Buffer Not Empty event to calculate average occupancy, or with the Flit Buffer Allocations event to track average lifetime.  This monitors SNP flits only"
unc_q_rxl_stalls_vn0.bgf_drs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x1/",,Stalls Sending to R3QPI on VN0; BGF Stall - HOM. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled a packet from the HOM message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn0.bgf_hom,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x8/",,Stalls Sending to R3QPI on VN0; BGF Stall - DRS. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled a packet from the DRS message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn0.bgf_ncb,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x2/",,Stalls Sending to R3QPI on VN0; BGF Stall - SNP. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled a packet from the SNP message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn0.bgf_ncs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x4/",,Stalls Sending to R3QPI on VN0; BGF Stall - NDR. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled a packet from the NDR message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn0.bgf_ndr,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x20/",,Stalls Sending to R3QPI on VN0; BGF Stall - NCS. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled a packet from the NCS message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn0.bgf_snp,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x10/",,Stalls Sending to R3QPI on VN0; BGF Stall - NCB. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled a packet from the NCB message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn0.egress_credits,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x40/",,Stalls Sending to R3QPI on VN0; Egress Credits. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled a packet because there were insufficient BGF credits.  For details on a message class granularity, use the Egress Credit Occupancy events"
unc_q_rxl_stalls_vn0.gv,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x35,umask=0x80/",,Stalls Sending to R3QPI on VN0; GV. Unit: uncore_qpi ,Number of stalls trying to send to R3QPI on Virtual Network 0; Stalled because a GV transition (frequency transition) was taking place
unc_q_rxl_stalls_vn1.bgf_drs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3a,umask=0x1/",,Stalls Sending to R3QPI on VN1; BGF Stall - HOM. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 1.; Stalled a packet from the HOM message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn1.bgf_hom,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3a,umask=0x8/",,Stalls Sending to R3QPI on VN1; BGF Stall - DRS. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 1.; Stalled a packet from the DRS message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn1.bgf_ncb,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3a,umask=0x2/",,Stalls Sending to R3QPI on VN1; BGF Stall - SNP. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 1.; Stalled a packet from the SNP message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn1.bgf_ncs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3a,umask=0x4/",,Stalls Sending to R3QPI on VN1; BGF Stall - NDR. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 1.; Stalled a packet from the NDR message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn1.bgf_ndr,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3a,umask=0x20/",,Stalls Sending to R3QPI on VN1; BGF Stall - NCS. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 1.; Stalled a packet from the NCS message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_rxl_stalls_vn1.bgf_snp,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x3a,umask=0x10/",,Stalls Sending to R3QPI on VN1; BGF Stall - NCB. Unit: uncore_qpi ,"Number of stalls trying to send to R3QPI on Virtual Network 1.; Stalled a packet from the NCB message class because there were not enough BGF credits.  In bypass mode, we will stall on the packet boundary, while in RxQ mode we will stall on the flit boundary"
unc_q_txl0_power_cycles,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0xc/,,Cycles in L0. Unit: uncore_qpi ,"Number of QPI qfclk cycles spent in L0 power mode in the Link Layer.  L0 is the default mode which provides the highest performance with the most power.  Use edge detect to count the number of instances that the link entered L0.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another.  The phy layer  sometimes leaves L0 for training, which will not be captured by this event"
unc_q_txl0p_power_cycles,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0xd/,,Cycles in L0p. Unit: uncore_qpi ,"Number of QPI qfclk cycles spent in L0p power mode.  L0p is a mode where we disable 1/2 of the QPI lanes, decreasing our bandwidth in order to save power.  It increases snoop and data transfer latencies and decreases overall bandwidth.  This mode can be very useful in NUMA optimized workloads that largely only utilize QPI for snoops and their responses.  Use edge detect to count the number of instances when the QPI link entered L0p.  Link power states are per link and per direction, so for example the Tx direction could be in one state while Rx was in another"
unc_q_txl_bypassed,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x5/,,Tx Flit Buffer Bypassed. Unit: uncore_qpi ,"Counts the number of times that an incoming flit was able to bypass the Tx flit buffer and pass directly out the QPI Link. Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link"
unc_q_txl_crc_no_credits.almost_full,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x2/",,Cycles Stalled with no LLR Credits; LLR is almost full. Unit: uncore_qpi ,"Number of cycles when the Tx side ran out of Link Layer Retry credits, causing the Tx to stall.; When LLR is almost full, we block some but not all packets"
unc_q_txl_crc_no_credits.full,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2,umask=0x1/",,Cycles Stalled with no LLR Credits; LLR is full. Unit: uncore_qpi ,"Number of cycles when the Tx side ran out of Link Layer Retry credits, causing the Tx to stall.; When LLR is totally full, we are not allowed to send any packets"
unc_q_txl_cycles_ne,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x6/,,Tx Flit Buffer Cycles not Empty. Unit: uncore_qpi ,"Counts the number of cycles when the TxQ is not empty. Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link"
unc_q_txl_flits_g0.data,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x2/",,Flits Transferred - Group 0; Data Tx Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.; Number of data flits transmitted over QPI.  Each flit contains 64b of data.  This includes both DRS and NCB data flits (coherent and non-coherent).  This can be used to calculate the data bandwidth of the QPI link.  One can get a good picture of the QPI-link characteristics by evaluating the protocol flits, data flits, and idle/null flits.  This does not include the header flits that go in data packets"
unc_q_txl_flits_g0.non_data,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x4/",,Flits Transferred - Group 0; Non-Data protocol Tx Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  It includes filters for Idle, protocol, and Data Flits.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time (for L0) or 4B instead of 8B for L0p.; Number of non-NULL non-data flits transmitted across QPI.  This basically tracks the protocol overhead on the QPI link.  One can get a good picture of the QPI-link characteristics by evaluating the protocol flits, data flits, and idle/null flits.  This includes the header flits for data packets"
unc_q_txl_flits_g1.drs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x18/",,Flits Transferred - Group 1; DRS Flits (both Header and Data). Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of flits transmitted over QPI on the DRS (Data Response) channel.  DRS flits are used to transmit data with coherency"
unc_q_txl_flits_g1.drs_data,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x8/",,Flits Transferred - Group 1; DRS Data Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of data flits transmitted over QPI on the DRS (Data Response) channel.  DRS flits are used to transmit data with coherency.  This does not count data flits transmitted over the NCB channel which transmits non-coherent data.  This includes only the data flits (not the header)"
unc_q_txl_flits_g1.drs_nondata,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x10/",,Flits Transferred - Group 1; DRS Header Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of protocol flits transmitted over QPI on the DRS (Data Response) channel.  DRS flits are used to transmit data with coherency.  This does not count data flits transmitted over the NCB channel which transmits non-coherent data.  This includes only the header flits (not the data).  This includes extended headers"
unc_q_txl_flits_g1.hom,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x6/",,Flits Transferred - Group 1; HOM Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of flits transmitted over QPI on the home channel"
unc_q_txl_flits_g1.hom_nonreq,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x4/",,Flits Transferred - Group 1; HOM Non-Request Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of non-request flits transmitted over QPI on the home channel.  These are most commonly snoop responses, and this event can be used as a proxy for that"
unc_q_txl_flits_g1.hom_req,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x2/",,Flits Transferred - Group 1; HOM Request Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of data request transmitted over QPI on the home channel.  This basically counts the number of remote memory requests transmitted over QPI.  In conjunction with the local read count in the Home Agent, one can calculate the number of LLC Misses"
unc_q_txl_flits_g1.snp,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0,umask=0x1/",,Flits Transferred - Group 1; SNP Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for SNP, HOM, and DRS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the number of snoop request flits transmitted over QPI.  These requests are contained in the snoop channel.  This does not include snoop responses, which are transmitted on the home channel"
unc_q_txl_flits_g2.ncb,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1,umask=0xc/",,Flits Transferred - Group 2; Non-Coherent Bypass Tx Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of Non-Coherent Bypass flits.  These packets are generally used to transmit non-coherent data across QPI"
unc_q_txl_flits_g2.ncb_data,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1,umask=0x4/",,Flits Transferred - Group 2; Non-Coherent data Tx Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of Non-Coherent Bypass data flits.  These flits are generally used to transmit non-coherent data across QPI.  This does not include a count of the DRS (coherent) data flits.  This only counts the data flits, not the NCB headers"
unc_q_txl_flits_g2.ncb_nondata,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1,umask=0x8/",,Flits Transferred - Group 2; Non-Coherent non-data Tx Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of Non-Coherent Bypass non-data flits.  These packets are generally used to transmit non-coherent data across QPI, and the flits counted here are for headers and other non-data flits.  This includes extended headers"
unc_q_txl_flits_g2.ncs,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1,umask=0x10/",,Flits Transferred - Group 2; Non-Coherent standard Tx Flits. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Number of NCS (non-coherent standard) flits transmitted over QPI.    This includes extended headers"
unc_q_txl_flits_g2.ndr_ad,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1,umask=0x1/",,Flits Transferred - Group 2; Non-Data Response Tx Flits - AD. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of flits transmitted over the NDR (Non-Data Response) channel.  This channel is used to send a variety of protocol flits including grants and completions.  This is only for NDR packets to the local socket which use the AK ring"
unc_q_txl_flits_g2.ndr_ak,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1,umask=0x2/",,Flits Transferred - Group 2; Non-Data Response Tx Flits - AK. Unit: uncore_qpi ,"Counts the number of flits transmitted across the QPI Link.  This is one of three groups that allow us to track flits.  It includes filters for NDR, NCB, and NCS message classes.  Each flit is made up of 80 bits of information (in addition to some ECC data).  In full-width (L0) mode, flits are made up of four fits, each of which contains 20 bits of data (along with some additional ECC data).   In half-width (L0p) mode, the fits are only 10 bits, and therefore it takes twice as many fits to transmit a flit.  When one talks about QPI speed (for example, 8.0 GT/s), the transfers here refer to fits.  Therefore, in L0, the system will transfer 1 flit at the rate of 1/4th the QPI speed.  One can calculate the bandwidth of the link by taking: flits*80b/time.  Note that this is not the same as data bandwidth.  For example, when we are transferring a 64B cacheline across QPI, we will break it into 9 flits -- 1 with header information and 8 with 64 bits of actual data and an additional 16 bits of other information.  To calculate data bandwidth, one should therefore do: data flits * 8B / time.; Counts the total number of flits transmitted over the NDR (Non-Data Response) channel.  This channel is used to send a variety of protocol flits including grants and completions.  This is only for NDR packets destined for Route-thru to a remote socket"
unc_q_txl_inserts,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x4/,,Tx Flit Buffer Allocations. Unit: uncore_qpi ,"Number of allocations into the QPI Tx Flit Buffer.  Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link.  This event can be used in conjunction with the Flit Buffer Occupancy event in order to calculate the average flit buffer lifetime"
unc_q_txl_occupancy,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x7/,,Tx Flit Buffer Occupancy. Unit: uncore_qpi ,"Accumulates the number of flits in the TxQ.  Generally, when data is transmitted across QPI, it will bypass the TxQ and pass directly to the link.  However, the TxQ will be used with L0p and when LLR occurs, increasing latency to transfer out to the link. This can be used with the cycles not empty event to track average occupancy, or the allocations event to track average lifetime in the TxQ"
unc_q_txr_ad_hom_credit_acquired.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x26,umask=0x1/",,R3QPI Egress Credit Occupancy - HOM; for VN0. Unit: uncore_qpi ,Number of link layer credits into the R3 (for transactions across the BGF) acquired each cycle. Flow Control FIFO for Home messages on AD
unc_q_txr_ad_hom_credit_acquired.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x26,umask=0x2/",,R3QPI Egress Credit Occupancy - HOM; for VN1. Unit: uncore_qpi ,Number of link layer credits into the R3 (for transactions across the BGF) acquired each cycle. Flow Control FIFO for Home messages on AD
unc_q_txr_ad_hom_credit_occupancy.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x22,umask=0x1/",,R3QPI Egress Credit Occupancy - AD HOM; for VN0. Unit: uncore_qpi ,Occupancy event that tracks the number of link layer credits into the R3 (for transactions across the BGF) available in each cycle.  Flow Control FIFO for HOM messages on AD
unc_q_txr_ad_hom_credit_occupancy.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x22,umask=0x2/",,R3QPI Egress Credit Occupancy - AD HOM; for VN1. Unit: uncore_qpi ,Occupancy event that tracks the number of link layer credits into the R3 (for transactions across the BGF) available in each cycle.  Flow Control FIFO for HOM messages on AD
unc_q_txr_ad_ndr_credit_acquired.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x28,umask=0x1/",,R3QPI Egress Credit Occupancy - AD NDR; for VN0. Unit: uncore_qpi ,Number of link layer credits into the R3 (for transactions across the BGF) acquired each cycle.  Flow Control FIFO for NDR messages on AD
unc_q_txr_ad_ndr_credit_acquired.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x28,umask=0x2/",,R3QPI Egress Credit Occupancy - AD NDR; for VN1. Unit: uncore_qpi ,Number of link layer credits into the R3 (for transactions across the BGF) acquired each cycle.  Flow Control FIFO for NDR messages on AD
unc_q_txr_ad_ndr_credit_occupancy.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x24,umask=0x1/",,R3QPI Egress Credit Occupancy - AD NDR; for VN0. Unit: uncore_qpi ,Occupancy event that tracks the number of link layer credits into the R3 (for transactions across the BGF) available in each cycle. Flow Control FIFO  for NDR messages on AD
unc_q_txr_ad_ndr_credit_occupancy.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x24,umask=0x2/",,R3QPI Egress Credit Occupancy - AD NDR; for VN1. Unit: uncore_qpi ,Occupancy event that tracks the number of link layer credits into the R3 (for transactions across the BGF) available in each cycle. Flow Control FIFO  for NDR messages on AD
unc_q_txr_ad_snp_credit_acquired.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x27,umask=0x1/",,R3QPI Egress Credit Occupancy - SNP; for VN0. Unit: uncore_qpi ,Number of link layer credits into the R3 (for transactions across the BGF) acquired each cycle.  Flow Control FIFO for Snoop messages on AD
unc_q_txr_ad_snp_credit_acquired.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x27,umask=0x2/",,R3QPI Egress Credit Occupancy - SNP; for VN1. Unit: uncore_qpi ,Number of link layer credits into the R3 (for transactions across the BGF) acquired each cycle.  Flow Control FIFO for Snoop messages on AD
unc_q_txr_ad_snp_credit_occupancy.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x23,umask=0x1/",,R3QPI Egress Credit Occupancy - AD SNP; for VN0. Unit: uncore_qpi ,Occupancy event that tracks the number of link layer credits into the R3 (for transactions across the BGF) available in each cycle.  Flow Control FIFO for Snoop messages on AD
unc_q_txr_ad_snp_credit_occupancy.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x23,umask=0x2/",,R3QPI Egress Credit Occupancy - AD SNP; for VN1. Unit: uncore_qpi ,Occupancy event that tracks the number of link layer credits into the R3 (for transactions across the BGF) available in each cycle.  Flow Control FIFO for Snoop messages on AD
unc_q_txr_ak_ndr_credit_acquired,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x29/,,R3QPI Egress Credit Occupancy - AK NDR. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. Local NDR message class to AK Egress
unc_q_txr_ak_ndr_credit_occupancy,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x25/,,R3QPI Egress Credit Occupancy - AK NDR. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  Local NDR message class to AK Egress
unc_q_txr_bl_drs_credit_acquired.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2a,umask=0x1/",,R3QPI Egress Credit Occupancy - DRS; for VN0. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. DRS message class to BL Egress
unc_q_txr_bl_drs_credit_acquired.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2a,umask=0x2/",,R3QPI Egress Credit Occupancy - DRS; for VN1. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. DRS message class to BL Egress
unc_q_txr_bl_drs_credit_acquired.vn_shr,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2a,umask=0x4/",,R3QPI Egress Credit Occupancy - DRS; for Shared VN. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. DRS message class to BL Egress
unc_q_txr_bl_drs_credit_occupancy.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1f,umask=0x1/",,R3QPI Egress Credit Occupancy - BL DRS; for VN0. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  DRS message class to BL Egress
unc_q_txr_bl_drs_credit_occupancy.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1f,umask=0x2/",,R3QPI Egress Credit Occupancy - BL DRS; for VN1. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  DRS message class to BL Egress
unc_q_txr_bl_drs_credit_occupancy.vn_shr,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x1f,umask=0x4/",,R3QPI Egress Credit Occupancy - BL DRS; for Shared VN. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  DRS message class to BL Egress
unc_q_txr_bl_ncb_credit_acquired.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2b,umask=0x1/",,R3QPI Egress Credit Occupancy - NCB; for VN0. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. NCB message class to BL Egress
unc_q_txr_bl_ncb_credit_acquired.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2b,umask=0x2/",,R3QPI Egress Credit Occupancy - NCB; for VN1. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. NCB message class to BL Egress
unc_q_txr_bl_ncb_credit_occupancy.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x20,umask=0x1/",,R3QPI Egress Credit Occupancy - BL NCB; for VN0. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  NCB message class to BL Egress
unc_q_txr_bl_ncb_credit_occupancy.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x20,umask=0x2/",,R3QPI Egress Credit Occupancy - BL NCB; for VN1. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  NCB message class to BL Egress
unc_q_txr_bl_ncs_credit_acquired.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2c,umask=0x1/",,R3QPI Egress Credit Occupancy - NCS; for VN0. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. NCS message class to BL Egress
unc_q_txr_bl_ncs_credit_acquired.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x2c,umask=0x2/",,R3QPI Egress Credit Occupancy - NCS; for VN1. Unit: uncore_qpi ,Number of credits into the R3 (for transactions across the BGF) acquired each cycle. NCS message class to BL Egress
unc_q_txr_bl_ncs_credit_occupancy.vn0,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x21,umask=0x1/",,R3QPI Egress Credit Occupancy - BL NCS; for VN0. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  NCS message class to BL Egress
unc_q_txr_bl_ncs_credit_occupancy.vn1,,Kernel PMU event,uncore_qpi,uncore interconnect,"uncore_qpi/event=0x21,umask=0x2/",,R3QPI Egress Credit Occupancy - BL NCS; for VN1. Unit: uncore_qpi ,Occupancy event that tracks the number of credits into the R3 (for transactions across the BGF) available in each cycle.  NCS message class to BL Egress
unc_q_vna_credit_return_occupancy,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x1b/,,VNA Credits Pending Return - Occupancy. Unit: uncore_qpi ,Number of VNA credits in the Rx side that are waitng to be returned back across the link
unc_q_vna_credit_returns,,Kernel PMU event,uncore_qpi,uncore interconnect,uncore_qpi/event=0x1c/,,VNA Credits Returned. Unit: uncore_qpi ,Number of VNA credits returned
unc_r3_c_hi_ad_credits_empty.cbo10,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x4/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 10
unc_r3_c_hi_ad_credits_empty.cbo11,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x8/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 11
unc_r3_c_hi_ad_credits_empty.cbo12,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x10/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 12
unc_r3_c_hi_ad_credits_empty.cbo13,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x20/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 13
unc_r3_c_hi_ad_credits_empty.cbo14_16,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x40/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 14&16
unc_r3_c_hi_ad_credits_empty.cbo8,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x1/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 8
unc_r3_c_hi_ad_credits_empty.cbo9,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x2/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 9
unc_r3_c_hi_ad_credits_empty.cbo_15_17,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x1f,umask=0x80/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers higher CBoxes); Cbox 15&17
unc_r3_c_lo_ad_credits_empty.cbo0,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x1/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 0
unc_r3_c_lo_ad_credits_empty.cbo1,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x2/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 1
unc_r3_c_lo_ad_credits_empty.cbo2,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x4/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 2
unc_r3_c_lo_ad_credits_empty.cbo3,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x8/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 3
unc_r3_c_lo_ad_credits_empty.cbo4,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x10/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 4
unc_r3_c_lo_ad_credits_empty.cbo5,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x20/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 5
unc_r3_c_lo_ad_credits_empty.cbo6,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x40/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 6
unc_r3_c_lo_ad_credits_empty.cbo7,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x22,umask=0x80/",,CBox AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to Cbox on the AD Ring (covers lower CBoxes); Cbox 7
unc_r3_clockticks,,Kernel PMU event,uncore_r3qpi,uncore interconnect,uncore_r3qpi/event=0x1/,,Number of uclks in domain. Unit: uncore_r3qpi ,"Counts the number of uclks in the QPI uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the QPI Agent is close to the Ubox, they generally should not diverge by more than a handful of cycles"
unc_r3_ha_r2_bl_credits_empty.ha0,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2d,umask=0x1/",,HA/R2 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to either HA or R2 on the BL Ring; HA0
unc_r3_ha_r2_bl_credits_empty.ha1,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2d,umask=0x2/",,HA/R2 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to either HA or R2 on the BL Ring; HA1
unc_r3_ha_r2_bl_credits_empty.r2_ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2d,umask=0x4/",,HA/R2 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to either HA or R2 on the BL Ring; R2 NCB Messages
unc_r3_ha_r2_bl_credits_empty.r2_ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2d,umask=0x8/",,HA/R2 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to either HA or R2 on the BL Ring; R2 NCS Messages
unc_r3_iot_backpressure.hub,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xb,umask=0x2/",,IOT Backpressure. Unit: uncore_r3qpi ,IOT Backpressure. Unit: uncore_r3qpi 
unc_r3_iot_backpressure.sat,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xb,umask=0x1/",,IOT Backpressure. Unit: uncore_r3qpi ,IOT Backpressure. Unit: uncore_r3qpi 
unc_r3_iot_cts_hi.cts2,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xd,umask=0x1/",,IOT Common Trigger Sequencer - Hi. Unit: uncore_r3qpi ,Debug Mask/Match Tie-Ins
unc_r3_iot_cts_hi.cts3,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xd,umask=0x2/",,IOT Common Trigger Sequencer - Hi. Unit: uncore_r3qpi ,Debug Mask/Match Tie-Ins
unc_r3_iot_cts_lo.cts0,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xc,umask=0x1/",,IOT Common Trigger Sequencer - Lo. Unit: uncore_r3qpi ,Debug Mask/Match Tie-Ins
unc_r3_iot_cts_lo.cts1,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xc,umask=0x2/",,IOT Common Trigger Sequencer - Lo. Unit: uncore_r3qpi ,Debug Mask/Match Tie-Ins
unc_r3_qpi0_ad_credits_empty.vn0_hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x20,umask=0x2/",,QPI0 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the AD Ring; VN0 HOM Messages
unc_r3_qpi0_ad_credits_empty.vn0_ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x20,umask=0x8/",,QPI0 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the AD Ring; VN0 NDR Messages
unc_r3_qpi0_ad_credits_empty.vn0_snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x20,umask=0x4/",,QPI0 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the AD Ring; VN0 SNP Messages
unc_r3_qpi0_ad_credits_empty.vn1_hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x20,umask=0x10/",,QPI0 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the AD Ring; VN1 HOM Messages
unc_r3_qpi0_ad_credits_empty.vn1_ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x20,umask=0x40/",,QPI0 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the AD Ring; VN1 NDR Messages
unc_r3_qpi0_ad_credits_empty.vn1_snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x20,umask=0x20/",,QPI0 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the AD Ring; VN1 SNP Messages
unc_r3_qpi0_ad_credits_empty.vna,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x20,umask=0x1/",,QPI0 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the AD Ring; VNA
unc_r3_qpi0_bl_credits_empty.vn1_hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x21,umask=0x10/",,QPI0 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the BL Ring; VN1 HOM Messages
unc_r3_qpi0_bl_credits_empty.vn1_ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x21,umask=0x40/",,QPI0 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the BL Ring; VN1 NDR Messages
unc_r3_qpi0_bl_credits_empty.vn1_snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x21,umask=0x20/",,QPI0 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the BL Ring; VN1 SNP Messages
unc_r3_qpi0_bl_credits_empty.vna,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x21,umask=0x1/",,QPI0 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI0 on the BL Ring; VNA
unc_r3_qpi1_ad_credits_empty.vn1_hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2e,umask=0x10/",,QPI1 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the AD Ring; VN1 HOM Messages
unc_r3_qpi1_ad_credits_empty.vn1_ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2e,umask=0x40/",,QPI1 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the AD Ring; VN1 NDR Messages
unc_r3_qpi1_ad_credits_empty.vn1_snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2e,umask=0x20/",,QPI1 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the AD Ring; VN1 SNP Messages
unc_r3_qpi1_ad_credits_empty.vna,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2e,umask=0x1/",,QPI1 AD Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the AD Ring; VNA
unc_r3_qpi1_bl_credits_empty.vn0_hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2f,umask=0x2/",,QPI1 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the BL Ring; VN0 HOM Messages
unc_r3_qpi1_bl_credits_empty.vn0_ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2f,umask=0x8/",,QPI1 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the BL Ring; VN0 NDR Messages
unc_r3_qpi1_bl_credits_empty.vn0_snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2f,umask=0x4/",,QPI1 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the BL Ring; VN0 SNP Messages
unc_r3_qpi1_bl_credits_empty.vn1_hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2f,umask=0x10/",,QPI1 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the BL Ring; VN1 HOM Messages
unc_r3_qpi1_bl_credits_empty.vn1_ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2f,umask=0x40/",,QPI1 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the BL Ring; VN1 NDR Messages
unc_r3_qpi1_bl_credits_empty.vn1_snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2f,umask=0x20/",,QPI1 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the BL Ring; VN1 SNP Messages
unc_r3_qpi1_bl_credits_empty.vna,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2f,umask=0x1/",,QPI1 BL Credits Empty. Unit: uncore_r3qpi ,No credits available to send to QPI1 on the BL Ring; VNA
unc_r3_ring_ad_used.ccw,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x7,umask=0xc/",,R3 AD Ring in Use; Counterclockwise. Unit: uncore_r3qpi ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r3_ring_ad_used.ccw_even,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x7,umask=0x4/",,R3 AD Ring in Use; Counterclockwise and Even. Unit: uncore_r3qpi ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_r3_ring_ad_used.ccw_odd,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x7,umask=0x8/",,R3 AD Ring in Use; Counterclockwise and Odd. Unit: uncore_r3qpi ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_r3_ring_ad_used.cw,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x7,umask=0x3/",,R3 AD Ring in Use; Clockwise. Unit: uncore_r3qpi ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r3_ring_ad_used.cw_even,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x7,umask=0x1/",,R3 AD Ring in Use; Clockwise and Even. Unit: uncore_r3qpi ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_r3_ring_ad_used.cw_odd,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x7,umask=0x2/",,R3 AD Ring in Use; Clockwise and Odd. Unit: uncore_r3qpi ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_r3_ring_ak_used.ccw,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x8,umask=0xc/",,R3 AK Ring in Use; Counterclockwise. Unit: uncore_r3qpi ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r3_ring_ak_used.ccw_even,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x8,umask=0x4/",,R3 AK Ring in Use; Counterclockwise and Even. Unit: uncore_r3qpi ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_r3_ring_ak_used.ccw_odd,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x8,umask=0x8/",,R3 AK Ring in Use; Counterclockwise and Odd. Unit: uncore_r3qpi ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_r3_ring_ak_used.cw,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x8,umask=0x3/",,R3 AK Ring in Use; Clockwise. Unit: uncore_r3qpi ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r3_ring_ak_used.cw_even,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x8,umask=0x1/",,R3 AK Ring in Use; Clockwise and Even. Unit: uncore_r3qpi ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_r3_ring_ak_used.cw_odd,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x8,umask=0x2/",,R3 AK Ring in Use; Clockwise and Odd. Unit: uncore_r3qpi ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_r3_ring_bl_used.ccw,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x9,umask=0xc/",,R3 BL Ring in Use; Counterclockwise. Unit: uncore_r3qpi ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r3_ring_bl_used.ccw_even,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x9,umask=0x4/",,R3 BL Ring in Use; Counterclockwise and Even. Unit: uncore_r3qpi ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_r3_ring_bl_used.ccw_odd,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x9,umask=0x8/",,R3 BL Ring in Use; Counterclockwise and Odd. Unit: uncore_r3qpi ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_r3_ring_bl_used.cw,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x9,umask=0x3/",,R3 BL Ring in Use; Clockwise. Unit: uncore_r3qpi ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r3_ring_bl_used.cw_even,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x9,umask=0x1/",,R3 BL Ring in Use; Clockwise and Even. Unit: uncore_r3qpi ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_r3_ring_bl_used.cw_odd,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x9,umask=0x2/",,R3 BL Ring in Use; Clockwise and Odd. Unit: uncore_r3qpi ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_r3_ring_iv_used.any,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xa,umask=0xf/",,R3 IV Ring in Use; Any. Unit: uncore_r3qpi ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop"
unc_r3_ring_iv_used.cw,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xa,umask=0x3/",,R3 IV Ring in Use; Clockwise. Unit: uncore_r3qpi ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop"
unc_r3_ring_sink_starved.ak,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0xe,umask=0x2/",,Ring Stop Starved; AK. Unit: uncore_r3qpi ,Number of cycles the ringstop is in starvation (per ring)
unc_r3_rxr_cycles_ne.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x10,umask=0x1/",,Ingress Cycles Not Empty; HOM. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue
unc_r3_rxr_cycles_ne.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x10,umask=0x4/",,Ingress Cycles Not Empty; NDR. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue
unc_r3_rxr_cycles_ne.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x10,umask=0x2/",,Ingress Cycles Not Empty; SNP. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue
unc_r3_rxr_cycles_ne_vn1.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x14,umask=0x8/",,VN1 Ingress Cycles Not Empty; DRS. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; DRS Ingress Queue
unc_r3_rxr_cycles_ne_vn1.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x14,umask=0x1/",,VN1 Ingress Cycles Not Empty; HOM. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue
unc_r3_rxr_cycles_ne_vn1.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x14,umask=0x10/",,VN1 Ingress Cycles Not Empty; NCB. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue
unc_r3_rxr_cycles_ne_vn1.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x14,umask=0x20/",,VN1 Ingress Cycles Not Empty; NCS. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue
unc_r3_rxr_cycles_ne_vn1.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x14,umask=0x4/",,VN1 Ingress Cycles Not Empty; NDR. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue
unc_r3_rxr_cycles_ne_vn1.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x14,umask=0x2/",,VN1 Ingress Cycles Not Empty; SNP. Unit: uncore_r3qpi ,Counts the number of cycles when the QPI VN1  Ingress is not empty.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue
unc_r3_rxr_inserts.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x11,umask=0x8/",,Ingress Allocations; DRS. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; DRS Ingress Queue
unc_r3_rxr_inserts.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x11,umask=0x1/",,Ingress Allocations; HOM. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue
unc_r3_rxr_inserts.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x11,umask=0x10/",,Ingress Allocations; NCB. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue
unc_r3_rxr_inserts.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x11,umask=0x20/",,Ingress Allocations; NCS. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue
unc_r3_rxr_inserts.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x11,umask=0x4/",,Ingress Allocations; NDR. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue
unc_r3_rxr_inserts.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x11,umask=0x2/",,Ingress Allocations; SNP. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue
unc_r3_rxr_inserts_vn1.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x15,umask=0x8/",,VN1 Ingress Allocations; DRS. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; DRS Ingress Queue
unc_r3_rxr_inserts_vn1.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x15,umask=0x1/",,VN1 Ingress Allocations; HOM. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; HOM Ingress Queue
unc_r3_rxr_inserts_vn1.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x15,umask=0x10/",,VN1 Ingress Allocations; NCB. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue
unc_r3_rxr_inserts_vn1.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x15,umask=0x20/",,VN1 Ingress Allocations; NCS. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue
unc_r3_rxr_inserts_vn1.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x15,umask=0x4/",,VN1 Ingress Allocations; NDR. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NDR Ingress Queue
unc_r3_rxr_inserts_vn1.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x15,umask=0x2/",,VN1 Ingress Allocations; SNP. Unit: uncore_r3qpi ,Counts the number of allocations into the QPI VN1  Ingress.  This tracks one of the three rings that are used by the QPI agent.  This can be used in conjunction with the QPI VN1  Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; SNP Ingress Queue
unc_r3_rxr_occupancy_vn1.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x13,umask=0x8/",,VN1 Ingress Occupancy Accumulator; DRS. Unit: uncore_r3qpi ,Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; DRS Ingress Queue
unc_r3_rxr_occupancy_vn1.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x13,umask=0x1/",,VN1 Ingress Occupancy Accumulator; HOM. Unit: uncore_r3qpi ,Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; HOM Ingress Queue
unc_r3_rxr_occupancy_vn1.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x13,umask=0x10/",,VN1 Ingress Occupancy Accumulator; NCB. Unit: uncore_r3qpi ,Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; NCB Ingress Queue
unc_r3_rxr_occupancy_vn1.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x13,umask=0x20/",,VN1 Ingress Occupancy Accumulator; NCS. Unit: uncore_r3qpi ,Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; NCS Ingress Queue
unc_r3_rxr_occupancy_vn1.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x13,umask=0x4/",,VN1 Ingress Occupancy Accumulator; NDR. Unit: uncore_r3qpi ,Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; NDR Ingress Queue
unc_r3_rxr_occupancy_vn1.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x13,umask=0x2/",,VN1 Ingress Occupancy Accumulator; SNP. Unit: uncore_r3qpi ,Accumulates the occupancy of a given QPI VN1  Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the QPI VN1  Ingress Not Empty event to calculate average occupancy or the QPI VN1  Ingress Allocations event in order to calculate average queuing latency.; SNP Ingress Queue
unc_r3_sbo0_credit_occupancy.ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2a,umask=0x1/",,SBo0 Credits Occupancy; For AD Ring. Unit: uncore_r3qpi ,"Number of Sbo 0 credits in use in a given cycle, per ring"
unc_r3_sbo0_credit_occupancy.bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2a,umask=0x2/",,SBo0 Credits Occupancy; For BL Ring. Unit: uncore_r3qpi ,"Number of Sbo 0 credits in use in a given cycle, per ring"
unc_r3_sbo0_credits_acquired.ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x28,umask=0x1/",,SBo0 Credits Acquired; For AD Ring. Unit: uncore_r3qpi ,"Number of Sbo 0 credits acquired in a given cycle, per ring"
unc_r3_sbo0_credits_acquired.bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x28,umask=0x2/",,SBo0 Credits Acquired; For BL Ring. Unit: uncore_r3qpi ,"Number of Sbo 0 credits acquired in a given cycle, per ring"
unc_r3_sbo1_credit_occupancy.ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2b,umask=0x1/",,SBo1 Credits Occupancy; For AD Ring. Unit: uncore_r3qpi ,"Number of Sbo 1 credits in use in a given cycle, per ring"
unc_r3_sbo1_credit_occupancy.bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2b,umask=0x2/",,SBo1 Credits Occupancy; For BL Ring. Unit: uncore_r3qpi ,"Number of Sbo 1 credits in use in a given cycle, per ring"
unc_r3_sbo1_credits_acquired.ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x29,umask=0x1/",,SBo1 Credits Acquired; For AD Ring. Unit: uncore_r3qpi ,"Number of Sbo 1 credits acquired in a given cycle, per ring"
unc_r3_sbo1_credits_acquired.bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x29,umask=0x2/",,SBo1 Credits Acquired; For BL Ring. Unit: uncore_r3qpi ,"Number of Sbo 1 credits acquired in a given cycle, per ring"
unc_r3_stall_no_sbo_credit.sbo0_ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2c,umask=0x1/",,"Stall on No Sbo Credits; For SBo0, AD Ring. Unit: uncore_r3qpi ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r3_stall_no_sbo_credit.sbo0_bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2c,umask=0x4/",,"Stall on No Sbo Credits; For SBo0, BL Ring. Unit: uncore_r3qpi ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r3_stall_no_sbo_credit.sbo1_ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2c,umask=0x2/",,"Stall on No Sbo Credits; For SBo1, AD Ring. Unit: uncore_r3qpi ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r3_stall_no_sbo_credit.sbo1_bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x2c,umask=0x8/",,"Stall on No Sbo Credits; For SBo1, BL Ring. Unit: uncore_r3qpi ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r3_txr_nack.dn_ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x26,umask=0x1/",,Egress CCW NACK; AD CCW. Unit: uncore_r3qpi ,AD CounterClockwise Egress Queue
unc_r3_txr_nack.dn_ak,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x26,umask=0x4/",,Egress CCW NACK; AK CCW. Unit: uncore_r3qpi ,AK CounterClockwise Egress Queue
unc_r3_txr_nack.dn_bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x26,umask=0x2/",,Egress CCW NACK; BL CCW. Unit: uncore_r3qpi ,BL CounterClockwise Egress Queue
unc_r3_txr_nack.up_ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x26,umask=0x8/",,Egress CCW NACK; AK CCW. Unit: uncore_r3qpi ,BL CounterClockwise Egress Queue
unc_r3_txr_nack.up_ak,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x26,umask=0x20/",,Egress CCW NACK; BL CW. Unit: uncore_r3qpi ,AD Clockwise Egress Queue
unc_r3_txr_nack.up_bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x26,umask=0x10/",,Egress CCW NACK; BL CCW. Unit: uncore_r3qpi ,AD CounterClockwise Egress Queue
unc_r3_vn0_credits_reject.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x37,umask=0x8/",,VN0 Credit Acquisition Failed on DRS; DRS Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS"
unc_r3_vn0_credits_reject.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x37,umask=0x1/",,VN0 Credit Acquisition Failed on DRS; HOM Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses"
unc_r3_vn0_credits_reject.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x37,umask=0x10/",,VN0 Credit Acquisition Failed on DRS; NCB Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns"
unc_r3_vn0_credits_reject.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x37,umask=0x20/",,VN0 Credit Acquisition Failed on DRS; NCS Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?"
unc_r3_vn0_credits_reject.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x37,umask=0x4/",,VN0 Credit Acquisition Failed on DRS; NDR Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP)"
unc_r3_vn0_credits_reject.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x37,umask=0x2/",,VN0 Credit Acquisition Failed on DRS; SNP Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a DRS VN0 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN0 credit and is delayed.  This should generally be a rare situation.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class"
unc_r3_vn0_credits_used.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x36,umask=0x8/",,VN0 Credit Used; DRS Message Class. Unit: uncore_r3qpi ,"Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS"
unc_r3_vn0_credits_used.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x36,umask=0x1/",,VN0 Credit Used; HOM Message Class. Unit: uncore_r3qpi ,"Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses"
unc_r3_vn0_credits_used.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x36,umask=0x10/",,VN0 Credit Used; NCB Message Class. Unit: uncore_r3qpi ,"Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns"
unc_r3_vn0_credits_used.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x36,umask=0x20/",,VN0 Credit Used; NCS Message Class. Unit: uncore_r3qpi ,"Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?"
unc_r3_vn0_credits_used.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x36,umask=0x4/",,VN0 Credit Used; NDR Message Class. Unit: uncore_r3qpi ,"Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP)"
unc_r3_vn0_credits_used.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x36,umask=0x2/",,VN0 Credit Used; SNP Message Class. Unit: uncore_r3qpi ,"Number of times a VN0 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN0.  VNA is a shared pool used to achieve high performance.  The VN0 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN0 if they fail.  This counts the number of times a VN0 credit was used.  Note that a single VN0 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN0 will only count a single credit even though it may use multiple buffers.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class"
unc_r3_vn1_credits_reject.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x39,umask=0x8/",,VN1 Credit Acquisition Failed on DRS; DRS Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS"
unc_r3_vn1_credits_reject.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x39,umask=0x1/",,VN1 Credit Acquisition Failed on DRS; HOM Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses"
unc_r3_vn1_credits_reject.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x39,umask=0x10/",,VN1 Credit Acquisition Failed on DRS; NCB Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns"
unc_r3_vn1_credits_reject.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x39,umask=0x20/",,VN1 Credit Acquisition Failed on DRS; NCS Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?"
unc_r3_vn1_credits_reject.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x39,umask=0x4/",,VN1 Credit Acquisition Failed on DRS; NDR Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP)"
unc_r3_vn1_credits_reject.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x39,umask=0x2/",,VN1 Credit Acquisition Failed on DRS; SNP Message Class. Unit: uncore_r3qpi ,"Number of times a request failed to acquire a VN1 credit.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This therefore counts the number of times when a request failed to acquire either a VNA or VN1 credit and is delayed.  This should generally be a rare situation.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class"
unc_r3_vn1_credits_used.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x38,umask=0x8/",,VN1 Credit Used; DRS Message Class. Unit: uncore_r3qpi ,"Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS"
unc_r3_vn1_credits_used.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x38,umask=0x1/",,VN1 Credit Used; HOM Message Class. Unit: uncore_r3qpi ,"Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses"
unc_r3_vn1_credits_used.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x38,umask=0x10/",,VN1 Credit Used; NCB Message Class. Unit: uncore_r3qpi ,"Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns"
unc_r3_vn1_credits_used.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x38,umask=0x20/",,VN1 Credit Used; NCS Message Class. Unit: uncore_r3qpi ,"Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Non-Coherent Standard (NCS).  NCS is commonly used for ?"
unc_r3_vn1_credits_used.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x38,umask=0x4/",,VN1 Credit Used; NDR Message Class. Unit: uncore_r3qpi ,"Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP)"
unc_r3_vn1_credits_used.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x38,umask=0x2/",,VN1 Credit Used; SNP Message Class. Unit: uncore_r3qpi ,"Number of times a VN1 credit was used on the DRS message channel.  In order for a request to be transferred across QPI, it must be guaranteed to have a flit buffer on the remote socket to sink into.  There are two credit pools, VNA and VN1.  VNA is a shared pool used to achieve high performance.  The VN1 pool has reserved entries for each message class and is used to prevent deadlock.  Requests first attempt to acquire a VNA credit, and then fall back to VN1 if they fail.  This counts the number of times a VN1 credit was used.  Note that a single VN1 credit holds access to potentially multiple flit buffers.  For example, a transfer that uses VNA could use 9 flit buffers and in that case uses 9 credits.  A transfer on VN1 will only count a single credit even though it may use multiple buffers.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class"
unc_r3_vna_credits_acquired.ad,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x33,umask=0x1/",,VNA credit Acquisitions; HOM Message Class. Unit: uncore_r3qpi ,"Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credits from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transferred).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transferred in a given message class using an qfclk event.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses"
unc_r3_vna_credits_acquired.bl,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x33,umask=0x4/",,VNA credit Acquisitions; HOM Message Class. Unit: uncore_r3qpi ,"Number of QPI VNA Credit acquisitions.  This event can be used in conjunction with the VNA In-Use Accumulator to calculate the average lifetime of a credit holder.  VNA credits are used by all message classes in order to communicate across QPI.  If a packet is unable to acquire credits, it will then attempt to use credits from the VN0 pool.  Note that a single packet may require multiple flit buffers (i.e. when data is being transferred).  Therefore, this event will increment by the number of credits acquired in each cycle.  Filtering based on message class is not provided.  One can count the number of packets transferred in a given message class using an qfclk event.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses"
unc_r3_vna_credits_reject.drs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x34,umask=0x8/",,VNA Credit Reject; DRS Message Class. Unit: uncore_r3qpi ,"Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Data Response (DRS).  DRS is generally used to transmit data with coherency.  For example, remote reads and writes, or cache to cache transfers will transmit their data using DRS"
unc_r3_vna_credits_reject.hom,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x34,umask=0x1/",,VNA Credit Reject; HOM Message Class. Unit: uncore_r3qpi ,"Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for the Home (HOM) message class.  HOM is generally used to send requests, request responses, and snoop responses"
unc_r3_vna_credits_reject.ncb,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x34,umask=0x10/",,VNA Credit Reject; NCB Message Class. Unit: uncore_r3qpi ,"Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Non-Coherent Broadcast (NCB).  NCB is generally used to transmit data without coherency.  For example, non-coherent read data returns"
unc_r3_vna_credits_reject.ncs,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x34,umask=0x20/",,VNA Credit Reject; NCS Message Class. Unit: uncore_r3qpi ,"Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Non-Coherent Standard (NCS)"
unc_r3_vna_credits_reject.ndr,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x34,umask=0x4/",,VNA Credit Reject; NDR Message Class. Unit: uncore_r3qpi ,"Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; NDR packets are used to transmit a variety of protocol flits including grants and completions (CMP)"
unc_r3_vna_credits_reject.snp,,Kernel PMU event,uncore_r3qpi,uncore interconnect,"uncore_r3qpi/event=0x34,umask=0x2/",,VNA Credit Reject; SNP Message Class. Unit: uncore_r3qpi ,"Number of attempted VNA credit acquisitions that were rejected because the VNA credit pool was full (or almost full).  It is possible to filter this event by message class.  Some packets use more than one flit buffer, and therefore must acquire multiple credits.  Therefore, one could get a reject even if the VNA credits were not fully used up.  The VNA pool is generally used to provide the bulk of the QPI bandwidth (as opposed to the VN0 pool which is used to guarantee forward progress).  VNA credits can run out if the flit buffer on the receiving side starts to queue up substantially.  This can happen if the rest of the uncore is unable to drain the requests fast enough.; Filter for Snoop (SNP) message class.  SNP is used for outgoing snoops.  Note that snoop responses flow on the HOM message class"
unc_s_bounce_control,,Kernel PMU event,uncore_sbox,uncore interconnect,uncore_sbox/event=0xa/,,Bounce Control. Unit: uncore_sbox ,Bounce Control. Unit: uncore_sbox 
unc_s_clockticks,,Kernel PMU event,uncore_sbox,uncore interconnect,uncore_sbox/event=0/,,Uncore Clocks. Unit: uncore_sbox ,Uncore Clocks. Unit: uncore_sbox 
unc_s_fast_asserted,,Kernel PMU event,uncore_sbox,uncore interconnect,uncore_sbox/event=0x9/,,FaST wire asserted. Unit: uncore_sbox ,"Counts the number of cycles either the local or incoming distress signals are asserted.  Incoming distress includes up, dn and across"
unc_s_ring_ad_used.down,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1b,umask=0xc/",,AD Ring In Use; Down. Unit: uncore_sbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_s_ring_ad_used.down_even,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1b,umask=0x4/",,AD Ring In Use; Down and Event. Unit: uncore_sbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Event ring polarity"
unc_s_ring_ad_used.down_odd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1b,umask=0x8/",,AD Ring In Use; Down and Odd. Unit: uncore_sbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity"
unc_s_ring_ad_used.up,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1b,umask=0x3/",,AD Ring In Use; Up. Unit: uncore_sbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_s_ring_ad_used.up_even,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1b,umask=0x1/",,AD Ring In Use; Up and Even. Unit: uncore_sbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity"
unc_s_ring_ad_used.up_odd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1b,umask=0x2/",,AD Ring In Use; Up and Odd. Unit: uncore_sbox ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity"
unc_s_ring_ak_used.down,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1c,umask=0xc/",,AK Ring In Use; Down. Unit: uncore_sbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_s_ring_ak_used.down_even,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1c,umask=0x4/",,AK Ring In Use; Down and Event. Unit: uncore_sbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Event ring polarity"
unc_s_ring_ak_used.down_odd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1c,umask=0x8/",,AK Ring In Use; Down and Odd. Unit: uncore_sbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity"
unc_s_ring_ak_used.up,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1c,umask=0x3/",,AK Ring In Use; Up. Unit: uncore_sbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_s_ring_ak_used.up_even,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1c,umask=0x1/",,AK Ring In Use; Up and Even. Unit: uncore_sbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity"
unc_s_ring_ak_used.up_odd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1c,umask=0x2/",,AK Ring In Use; Up and Odd. Unit: uncore_sbox ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity"
unc_s_ring_bl_used.down,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1d,umask=0xc/",,BL Ring in Use; Down. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_s_ring_bl_used.down_even,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1d,umask=0x4/",,BL Ring in Use; Down and Event. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Event ring polarity"
unc_s_ring_bl_used.down_odd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1d,umask=0x8/",,BL Ring in Use; Down and Odd. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Down and Odd ring polarity"
unc_s_ring_bl_used.up,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1d,umask=0x3/",,BL Ring in Use; Up. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring"
unc_s_ring_bl_used.up_even,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1d,umask=0x1/",,BL Ring in Use; Up and Even. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Even ring polarity"
unc_s_ring_bl_used.up_odd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1d,umask=0x2/",,BL Ring in Use; Up and Odd. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop. We really have two rings in HSX -- a clockwise ring and a counter-clockwise ring.  On the left side of the ring, the UP direction is on the clockwise ring and DN is on the counter-clockwise ring.  On the right side of the ring, this is reversed.  The first half of the CBos are on the left side of the ring, and the 2nd half are on the right side of the ring.  In other words (for example), in a 4c part, Cbo 0 UP AD is NOT the same ring as CBo 2 UP AD because they are on opposite sides of the ring.; Filters for the Up and Odd ring polarity"
unc_s_ring_bounces.ad_cache,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x5,umask=0x1/",,Number of LLC responses that bounced on the Ring. Unit: uncore_sbox ,Number of LLC responses that bounced on the Ring. Unit: uncore_sbox 
unc_s_ring_bounces.ak_core,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x5,umask=0x2/",,Number of LLC responses that bounced on the Ring.; Acknowledgements to core. Unit: uncore_sbox ,Number of LLC responses that bounced on the Ring.; Acknowledgements to core. Unit: uncore_sbox 
unc_s_ring_bounces.bl_core,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x5,umask=0x4/",,Number of LLC responses that bounced on the Ring.; Data Responses to core. Unit: uncore_sbox ,Number of LLC responses that bounced on the Ring.; Data Responses to core. Unit: uncore_sbox 
unc_s_ring_bounces.iv_core,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x5,umask=0x8/",,Number of LLC responses that bounced on the Ring.; Snoops of processor's cache. Unit: uncore_sbox ,Number of LLC responses that bounced on the Ring.; Snoops of processor's cache. Unit: uncore_sbox 
unc_s_ring_iv_used.dn,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1e,umask=0xc/",,BL Ring in Use; Any. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  There is only 1 IV ring in HSX.  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity"
unc_s_ring_iv_used.up,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1e,umask=0x3/",,BL Ring in Use; Any. Unit: uncore_sbox ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop.  There is only 1 IV ring in HSX.  Therefore, if one wants to monitor the Even ring, they should select both UP_EVEN and DN_EVEN.  To monitor the Odd ring, they should select both UP_ODD and DN_ODD.; Filters any polarity"
unc_s_ring_sink_starved.ad_cache,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x6,umask=0x1/",,UNC_S_RING_SINK_STARVED.AD_CACHE. Unit: uncore_sbox ,UNC_S_RING_SINK_STARVED.AD_CACHE. Unit: uncore_sbox 
unc_s_ring_sink_starved.ak_core,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x6,umask=0x2/",,UNC_S_RING_SINK_STARVED.AK_CORE. Unit: uncore_sbox ,UNC_S_RING_SINK_STARVED.AK_CORE. Unit: uncore_sbox 
unc_s_ring_sink_starved.bl_core,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x6,umask=0x4/",,UNC_S_RING_SINK_STARVED.BL_CORE. Unit: uncore_sbox ,UNC_S_RING_SINK_STARVED.BL_CORE. Unit: uncore_sbox 
unc_s_ring_sink_starved.iv_core,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x6,umask=0x8/",,UNC_S_RING_SINK_STARVED.IV_CORE. Unit: uncore_sbox ,UNC_S_RING_SINK_STARVED.IV_CORE. Unit: uncore_sbox 
unc_s_rxr_busy_starved.ad_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x15,umask=0x2/",,Injection Starvation; AD - Bounces. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent"
unc_s_rxr_busy_starved.ad_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x15,umask=0x1/",,Injection Starvation; AD - Credits. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent"
unc_s_rxr_busy_starved.bl_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x15,umask=0x8/",,Injection Starvation; BL - Bounces. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent"
unc_s_rxr_busy_starved.bl_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x15,umask=0x4/",,Injection Starvation; BL - Credits. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress because a message (credited/bounceable) is  being sent"
unc_s_rxr_bypass.ad_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x12,umask=0x2/",,Bypass; AD - Bounces. Unit: uncore_sbox ,Bypass the Sbo Ingress
unc_s_rxr_bypass.ad_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x12,umask=0x1/",,Bypass; AD - Credits. Unit: uncore_sbox ,Bypass the Sbo Ingress
unc_s_rxr_bypass.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x12,umask=0x10/",,Bypass; AK. Unit: uncore_sbox ,Bypass the Sbo Ingress
unc_s_rxr_bypass.bl_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x12,umask=0x8/",,Bypass; BL - Bounces. Unit: uncore_sbox ,Bypass the Sbo Ingress
unc_s_rxr_bypass.bl_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x12,umask=0x4/",,Bypass; BL - Credits. Unit: uncore_sbox ,Bypass the Sbo Ingress
unc_s_rxr_bypass.iv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x12,umask=0x20/",,Bypass; IV. Unit: uncore_sbox ,Bypass the Sbo Ingress
unc_s_rxr_crd_starved.ad_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x14,umask=0x2/",,Injection Starvation; AD - Bounces. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit"
unc_s_rxr_crd_starved.ad_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x14,umask=0x1/",,Injection Starvation; AD - Credits. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit"
unc_s_rxr_crd_starved.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x14,umask=0x10/",,Injection Starvation; AK. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit"
unc_s_rxr_crd_starved.bl_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x14,umask=0x8/",,Injection Starvation; BL - Bounces. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit"
unc_s_rxr_crd_starved.bl_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x14,umask=0x4/",,Injection Starvation; BL - Credits. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit"
unc_s_rxr_crd_starved.ifv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x14,umask=0x40/",,Injection Starvation; IVF Credit. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit"
unc_s_rxr_crd_starved.iv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x14,umask=0x20/",,Injection Starvation; IV. Unit: uncore_sbox ,"Counts injection starvation.  This starvation is triggered when the Ingress cannot send a transaction onto the ring for a long period of time.  In this case, the Ingress but unable to forward to Egress due to lack of credit"
unc_s_rxr_inserts.ad_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x13,umask=0x2/",,Ingress Allocations; AD - Bounces. Unit: uncore_sbox ,Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring
unc_s_rxr_inserts.ad_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x13,umask=0x1/",,Ingress Allocations; AD - Credits. Unit: uncore_sbox ,Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring
unc_s_rxr_inserts.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x13,umask=0x10/",,Ingress Allocations; AK. Unit: uncore_sbox ,Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring
unc_s_rxr_inserts.bl_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x13,umask=0x8/",,Ingress Allocations; BL - Bounces. Unit: uncore_sbox ,Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring
unc_s_rxr_inserts.bl_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x13,umask=0x4/",,Ingress Allocations; BL - Credits. Unit: uncore_sbox ,Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring
unc_s_rxr_inserts.iv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x13,umask=0x20/",,Ingress Allocations; IV. Unit: uncore_sbox ,Number of allocations into the Sbo Ingress  The Ingress is used to queue up requests received from the ring
unc_s_rxr_occupancy.ad_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x11,umask=0x2/",,Ingress Occupancy; AD - Bounces. Unit: uncore_sbox ,Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring
unc_s_rxr_occupancy.ad_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x11,umask=0x1/",,Ingress Occupancy; AD - Credits. Unit: uncore_sbox ,Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring
unc_s_rxr_occupancy.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x11,umask=0x10/",,Ingress Occupancy; AK. Unit: uncore_sbox ,Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring
unc_s_rxr_occupancy.bl_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x11,umask=0x8/",,Ingress Occupancy; BL - Bounces. Unit: uncore_sbox ,Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring
unc_s_rxr_occupancy.bl_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x11,umask=0x4/",,Ingress Occupancy; BL - Credits. Unit: uncore_sbox ,Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring
unc_s_rxr_occupancy.iv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x11,umask=0x20/",,Ingress Occupancy; IV. Unit: uncore_sbox ,Occupancy event for the Ingress buffers in the Sbo.  The Ingress is used to queue up requests received from the ring
unc_s_txr_ads_used.ad,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x4,umask=0x1/",,UNC_S_TxR_ADS_USED.AD. Unit: uncore_sbox ,UNC_S_TxR_ADS_USED.AD. Unit: uncore_sbox 
unc_s_txr_ads_used.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x4,umask=0x2/",,UNC_S_TxR_ADS_USED.AK. Unit: uncore_sbox ,UNC_S_TxR_ADS_USED.AK. Unit: uncore_sbox 
unc_s_txr_ads_used.bl,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x4,umask=0x4/",,UNC_S_TxR_ADS_USED.BL. Unit: uncore_sbox ,UNC_S_TxR_ADS_USED.BL. Unit: uncore_sbox 
unc_s_txr_inserts.ad_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x2,umask=0x2/",,Egress Allocations; AD - Bounces. Unit: uncore_sbox ,Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring
unc_s_txr_inserts.ad_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x2,umask=0x1/",,Egress Allocations; AD - Credits. Unit: uncore_sbox ,Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring
unc_s_txr_inserts.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x2,umask=0x10/",,Egress Allocations; AK. Unit: uncore_sbox ,Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring
unc_s_txr_inserts.bl_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x2,umask=0x8/",,Egress Allocations; BL - Bounces. Unit: uncore_sbox ,Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring
unc_s_txr_inserts.bl_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x2,umask=0x4/",,Egress Allocations; BL - Credits. Unit: uncore_sbox ,Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring
unc_s_txr_inserts.iv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x2,umask=0x20/",,Egress Allocations; IV. Unit: uncore_sbox ,Number of allocations into the Sbo Egress.  The Egress is used to queue up requests destined for the ring
unc_s_txr_occupancy.ad_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1,umask=0x2/",,Egress Occupancy; AD - Bounces. Unit: uncore_sbox ,Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring
unc_s_txr_occupancy.ad_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1,umask=0x1/",,Egress Occupancy; AD - Credits. Unit: uncore_sbox ,Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring
unc_s_txr_occupancy.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1,umask=0x10/",,Egress Occupancy; AK. Unit: uncore_sbox ,Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring
unc_s_txr_occupancy.bl_bnc,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1,umask=0x8/",,Egress Occupancy; BL - Bounces. Unit: uncore_sbox ,Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring
unc_s_txr_occupancy.bl_crd,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1,umask=0x4/",,Egress Occupancy; BL - Credits. Unit: uncore_sbox ,Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring
unc_s_txr_occupancy.iv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x1,umask=0x20/",,Egress Occupancy; IV. Unit: uncore_sbox ,Occupancy event for the Egress buffers in the Sbo.  The egress is used to queue up requests destined for the ring
unc_s_txr_starved.ad,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x3,umask=0x1/",,Injection Starvation; Onto AD Ring. Unit: uncore_sbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time
unc_s_txr_starved.ak,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x3,umask=0x2/",,Injection Starvation; Onto AK Ring. Unit: uncore_sbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time
unc_s_txr_starved.bl,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x3,umask=0x4/",,Injection Starvation; Onto BL Ring. Unit: uncore_sbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time
unc_s_txr_starved.iv,,Kernel PMU event,uncore_sbox,uncore interconnect,"uncore_sbox/event=0x3,umask=0x8/",,Injection Starvation; Onto IV Ring. Unit: uncore_sbox ,Counts injection starvation.  This starvation is triggered when the Egress cannot send a transaction onto the ring for a long period of time
unc_u_clockticks,,Kernel PMU event,uncore_ubox,uncore interconnect,uncore_ubox/event=0/,,UNC_U_CLOCKTICKS. Unit: uncore_ubox ,UNC_U_CLOCKTICKS. Unit: uncore_ubox 
unc_u_event_msg.doorbell_rcvd,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x42,umask=0x8/",,VLW Received. Unit: uncore_ubox ,Virtual Logical Wire (legacy) message were received from Uncore.   Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID
unc_u_filter_match.disable,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x41,umask=0x2/",,Filter Match. Unit: uncore_ubox ,Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID
unc_u_filter_match.enable,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x41,umask=0x1/",,Filter Match. Unit: uncore_ubox ,Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID
unc_u_filter_match.u2c_disable,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x41,umask=0x8/",,Filter Match. Unit: uncore_ubox ,Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID
unc_u_filter_match.u2c_enable,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x41,umask=0x4/",,Filter Match. Unit: uncore_ubox ,Filter match per thread (w/ or w/o Filter Enable).  Specify the thread to filter on using NCUPMONCTRLGLCTR.ThreadID
unc_u_phold_cycles.assert_to_ack,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x45,umask=0x1/",,Cycles PHOLD Assert to Ack; Assert to ACK. Unit: uncore_ubox ,PHOLD cycles.  Filter from source CoreID
unc_u_racu_requests,,Kernel PMU event,uncore_ubox,uncore interconnect,uncore_ubox/event=0x46/,,RACU Request. Unit: uncore_ubox ,Number outstanding register requests within message channel tracker
unc_u_u2c_events.cmc,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x10/",,Monitor Sent to T0; Correctable Machine Check. Unit: uncore_ubox ,Events coming from Uncore can be sent to one or all cores
unc_u_u2c_events.livelock,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x4/",,Monitor Sent to T0; Livelock. Unit: uncore_ubox ,Events coming from Uncore can be sent to one or all cores; Filter by core
unc_u_u2c_events.lterror,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x8/",,Monitor Sent to T0; LTError. Unit: uncore_ubox ,Events coming from Uncore can be sent to one or all cores; Filter by core
unc_u_u2c_events.monitor_t0,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x1/",,Monitor Sent to T0; Monitor T0. Unit: uncore_ubox ,Events coming from Uncore can be sent to one or all cores; Filter by core
unc_u_u2c_events.monitor_t1,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x2/",,Monitor Sent to T0; Monitor T1. Unit: uncore_ubox ,Events coming from Uncore can be sent to one or all cores; Filter by core
unc_u_u2c_events.other,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x80/",,Monitor Sent to T0; Other. Unit: uncore_ubox ,"Events coming from Uncore can be sent to one or all cores; PREQ, PSMI, P2U, Thermal, PCUSMI, PMI"
unc_u_u2c_events.trap,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x40/",,Monitor Sent to T0; Trap. Unit: uncore_ubox ,Events coming from Uncore can be sent to one or all cores
unc_u_u2c_events.umc,,Kernel PMU event,uncore_ubox,uncore interconnect,"uncore_ubox/event=0x43,umask=0x20/",,Monitor Sent to T0; Uncorrectable Machine Check. Unit: uncore_ubox ,Events coming from Uncore can be sent to one or all cores
unc_r2_clockticks,,Kernel PMU event,uncore_r2pcie,uncore io,uncore_r2pcie/event=0x1/,,Number of uclks in domain. Unit: uncore_r2pcie ,"Counts the number of uclks in the R2PCIe uclk domain.  This could be slightly different than the count in the Ubox because of enable/freeze delays.  However, because the R2PCIe is close to the Ubox, they generally should not diverge by more than a handful of cycles"
unc_r2_iio_credit.isoch_qpi0,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2d,umask=0x4/",,UNC_R2_IIO_CREDIT.ISOCH_QPI0. Unit: uncore_r2pcie ,UNC_R2_IIO_CREDIT.ISOCH_QPI0. Unit: uncore_r2pcie 
unc_r2_iio_credit.isoch_qpi1,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2d,umask=0x8/",,UNC_R2_IIO_CREDIT.ISOCH_QPI1. Unit: uncore_r2pcie ,UNC_R2_IIO_CREDIT.ISOCH_QPI1. Unit: uncore_r2pcie 
unc_r2_iio_credit.prq_qpi0,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2d,umask=0x1/",,UNC_R2_IIO_CREDIT.PRQ_QPI0. Unit: uncore_r2pcie ,UNC_R2_IIO_CREDIT.PRQ_QPI0. Unit: uncore_r2pcie 
unc_r2_iio_credit.prq_qpi1,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2d,umask=0x2/",,UNC_R2_IIO_CREDIT.PRQ_QPI1. Unit: uncore_r2pcie ,UNC_R2_IIO_CREDIT.PRQ_QPI1. Unit: uncore_r2pcie 
unc_r2_iio_credits_acquired.drs,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x33,umask=0x8/",,R2PCIe IIO Credit Acquired; DRS. Unit: uncore_r2pcie ,"Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the DRS message class"
unc_r2_iio_credits_acquired.ncb,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x33,umask=0x10/",,R2PCIe IIO Credit Acquired; NCB. Unit: uncore_r2pcie ,"Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCB message class"
unc_r2_iio_credits_acquired.ncs,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x33,umask=0x20/",,R2PCIe IIO Credit Acquired; NCS. Unit: uncore_r2pcie ,"Counts the number of credits that are acquired in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCS message class"
unc_r2_iio_credits_used.drs,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x32,umask=0x8/",,R2PCIe IIO Credits in Use; DRS. Unit: uncore_r2pcie ,"Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the DRS message class"
unc_r2_iio_credits_used.ncb,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x32,umask=0x10/",,R2PCIe IIO Credits in Use; NCB. Unit: uncore_r2pcie ,"Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCB message class"
unc_r2_iio_credits_used.ncs,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x32,umask=0x20/",,R2PCIe IIO Credits in Use; NCS. Unit: uncore_r2pcie ,"Counts the number of cycles when one or more credits in the R2PCIe agent for sending transactions into the IIO on either NCB or NCS are in use.  Transactions from the BL ring going into the IIO Agent must first acquire a credit.  These credits are for either the NCB or NCS message classes.  NCB, or non-coherent bypass messages are used to transmit data without coherency (and are common).  NCS is used for reads to PCIe (and should be used sparingly).; Credits to the IIO for the NCS message class"
unc_r2_ring_ad_used.ccw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x7,umask=0xc/",,R2 AD Ring in Use; Counterclockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r2_ring_ad_used.ccw_even,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x7,umask=0x4/",,R2 AD Ring in Use; Counterclockwise and Even. Unit: uncore_r2pcie ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_r2_ring_ad_used.ccw_odd,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x7,umask=0x8/",,R2 AD Ring in Use; Counterclockwise and Odd. Unit: uncore_r2pcie ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_r2_ring_ad_used.cw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x7,umask=0x3/",,R2 AD Ring in Use; Clockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r2_ring_ad_used.cw_even,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x7,umask=0x1/",,R2 AD Ring in Use; Clockwise and Even. Unit: uncore_r2pcie ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_r2_ring_ad_used.cw_odd,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x7,umask=0x2/",,R2 AD Ring in Use; Clockwise and Odd. Unit: uncore_r2pcie ,"Counts the number of cycles that the AD ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_r2_ring_ak_bounces.dn,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x12,umask=0x2/",,AK Ingress Bounced; Dn. Unit: uncore_r2pcie ,Counts the number of times when a request destined for the AK ingress bounced
unc_r2_ring_ak_bounces.up,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x12,umask=0x1/",,AK Ingress Bounced; Up. Unit: uncore_r2pcie ,Counts the number of times when a request destined for the AK ingress bounced
unc_r2_ring_ak_used.ccw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x8,umask=0xc/",,R2 AK Ring in Use; Counterclockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r2_ring_ak_used.ccw_even,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x8,umask=0x4/",,R2 AK Ring in Use; Counterclockwise and Even. Unit: uncore_r2pcie ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_r2_ring_ak_used.ccw_odd,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x8,umask=0x8/",,R2 AK Ring in Use; Counterclockwise and Odd. Unit: uncore_r2pcie ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_r2_ring_ak_used.cw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x8,umask=0x3/",,R2 AK Ring in Use; Clockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r2_ring_ak_used.cw_even,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x8,umask=0x1/",,R2 AK Ring in Use; Clockwise and Even. Unit: uncore_r2pcie ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_r2_ring_ak_used.cw_odd,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x8,umask=0x2/",,R2 AK Ring in Use; Clockwise and Odd. Unit: uncore_r2pcie ,"Counts the number of cycles that the AK ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_r2_ring_bl_used.ccw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x9,umask=0xc/",,R2 BL Ring in Use; Counterclockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r2_ring_bl_used.ccw_even,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x9,umask=0x4/",,R2 BL Ring in Use; Counterclockwise and Even. Unit: uncore_r2pcie ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Even ring polarity"
unc_r2_ring_bl_used.ccw_odd,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x9,umask=0x8/",,R2 BL Ring in Use; Counterclockwise and Odd. Unit: uncore_r2pcie ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Counterclockwise and Odd ring polarity"
unc_r2_ring_bl_used.cw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x9,umask=0x3/",,R2 BL Ring in Use; Clockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop"
unc_r2_ring_bl_used.cw_even,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x9,umask=0x1/",,R2 BL Ring in Use; Clockwise and Even. Unit: uncore_r2pcie ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Even ring polarity"
unc_r2_ring_bl_used.cw_odd,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x9,umask=0x2/",,R2 BL Ring in Use; Clockwise and Odd. Unit: uncore_r2pcie ,"Counts the number of cycles that the BL ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sunk, but does not include when packets are being sent from the ring stop.; Filters for the Clockwise and Odd ring polarity"
unc_r2_ring_iv_used.any,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0xa,umask=0xf/",,R2 IV Ring in Use; Any. Unit: uncore_r2pcie ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop"
unc_r2_ring_iv_used.ccw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0xa,umask=0xc/",,R2 IV Ring in Use; Counterclockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop"
unc_r2_ring_iv_used.cw,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0xa,umask=0x3/",,R2 IV Ring in Use; Clockwise. Unit: uncore_r2pcie ,"Counts the number of cycles that the IV ring is being used at this ring stop.  This includes when packets are passing by and when packets are being sent, but does not include when packets are being sunk into the ring stop"
unc_r2_rxr_cycles_ne.ncb,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x10,umask=0x10/",,Ingress Cycles Not Empty; NCB. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue
unc_r2_rxr_cycles_ne.ncs,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x10,umask=0x20/",,Ingress Cycles Not Empty; NCS. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Ingress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue occupancy.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue
unc_r2_rxr_inserts.ncb,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x11,umask=0x10/",,Ingress Allocations; NCB. Unit: uncore_r2pcie ,Counts the number of allocations into the R2PCIe Ingress.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCB Ingress Queue
unc_r2_rxr_inserts.ncs,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x11,umask=0x20/",,Ingress Allocations; NCS. Unit: uncore_r2pcie ,Counts the number of allocations into the R2PCIe Ingress.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Ingress Occupancy Accumulator event in order to calculate average queue latency.  Multiple ingress buffers can be tracked at a given time using multiple counters.; NCS Ingress Queue
unc_r2_rxr_occupancy.drs,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x13,umask=0x8/",,Ingress Occupancy Accumulator; DRS. Unit: uncore_r2pcie ,Accumulates the occupancy of a given R2PCIe Ingress queue in each cycles.  This tracks one of the three ring Ingress buffers.  This can be used with the R2PCIe Ingress Not Empty event to calculate average occupancy or the R2PCIe Ingress Allocations event in order to calculate average queuing latency.; DRS Ingress Queue
unc_r2_sbo0_credit_occupancy.ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2a,umask=0x1/",,SBo0 Credits Occupancy; For AD Ring. Unit: uncore_r2pcie ,"Number of Sbo 0 credits in use in a given cycle, per ring"
unc_r2_sbo0_credit_occupancy.bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2a,umask=0x2/",,SBo0 Credits Occupancy; For BL Ring. Unit: uncore_r2pcie ,"Number of Sbo 0 credits in use in a given cycle, per ring"
unc_r2_sbo0_credits_acquired.ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x28,umask=0x1/",,SBo0 Credits Acquired; For AD Ring. Unit: uncore_r2pcie ,"Number of Sbo 0 credits acquired in a given cycle, per ring"
unc_r2_sbo0_credits_acquired.bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x28,umask=0x2/",,SBo0 Credits Acquired; For BL Ring. Unit: uncore_r2pcie ,"Number of Sbo 0 credits acquired in a given cycle, per ring"
unc_r2_stall_no_sbo_credit.sbo0_ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2c,umask=0x1/",,"Stall on No Sbo Credits; For SBo0, AD Ring. Unit: uncore_r2pcie ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r2_stall_no_sbo_credit.sbo0_bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2c,umask=0x4/",,"Stall on No Sbo Credits; For SBo0, BL Ring. Unit: uncore_r2pcie ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r2_stall_no_sbo_credit.sbo1_ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2c,umask=0x2/",,"Stall on No Sbo Credits; For SBo1, AD Ring. Unit: uncore_r2pcie ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r2_stall_no_sbo_credit.sbo1_bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x2c,umask=0x8/",,"Stall on No Sbo Credits; For SBo1, BL Ring. Unit: uncore_r2pcie ","Number of cycles Egress is stalled waiting for an Sbo credit to become available.  Per Sbo, per Ring"
unc_r2_txr_cycles_full.ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x25,umask=0x1/",,Egress Cycles Full; AD. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Egress buffer is full.; AD Egress Queue
unc_r2_txr_cycles_full.ak,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x25,umask=0x2/",,Egress Cycles Full; AK. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Egress buffer is full.; AK Egress Queue
unc_r2_txr_cycles_full.bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x25,umask=0x4/",,Egress Cycles Full; BL. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Egress buffer is full.; BL Egress Queue
unc_r2_txr_cycles_ne.ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x23,umask=0x1/",,Egress Cycles Not Empty; AD. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; AD Egress Queue
unc_r2_txr_cycles_ne.ak,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x23,umask=0x2/",,Egress Cycles Not Empty; AK. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; AK Egress Queue
unc_r2_txr_cycles_ne.bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x23,umask=0x4/",,Egress Cycles Not Empty; BL. Unit: uncore_r2pcie ,Counts the number of cycles when the R2PCIe Egress is not empty.  This tracks one of the three rings that are used by the R2PCIe agent.  This can be used in conjunction with the R2PCIe Egress Occupancy Accumulator event in order to calculate average queue occupancy.  Only a single Egress queue can be tracked at any given time.  It is not possible to filter based on direction or polarity.; BL Egress Queue
unc_r2_txr_nack_cw.dn_ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x26,umask=0x1/",,Egress CCW NACK; AD CCW. Unit: uncore_r2pcie ,AD CounterClockwise Egress Queue
unc_r2_txr_nack_cw.dn_ak,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x26,umask=0x4/",,Egress CCW NACK; AK CCW. Unit: uncore_r2pcie ,AK CounterClockwise Egress Queue
unc_r2_txr_nack_cw.dn_bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x26,umask=0x2/",,Egress CCW NACK; BL CCW. Unit: uncore_r2pcie ,BL CounterClockwise Egress Queue
unc_r2_txr_nack_cw.up_ad,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x26,umask=0x8/",,Egress CCW NACK; AK CCW. Unit: uncore_r2pcie ,BL CounterClockwise Egress Queue
unc_r2_txr_nack_cw.up_ak,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x26,umask=0x20/",,Egress CCW NACK; BL CW. Unit: uncore_r2pcie ,AD Clockwise Egress Queue
unc_r2_txr_nack_cw.up_bl,,Kernel PMU event,uncore_r2pcie,uncore io,"uncore_r2pcie/event=0x26,umask=0x10/",,Egress CCW NACK; BL CCW. Unit: uncore_r2pcie ,AD CounterClockwise Egress Queue
llc_misses.mem_read,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x3/",64Bytes,read requests to memory controller. Derived from unc_m_cas_count.rd. Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands; Counts the total number of DRAM Read CAS commands issued on this channel (including underfills)
llc_misses.mem_write,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0xc/",64Bytes,write requests to memory controller. Derived from unc_m_cas_count.wr. Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands; Counts the total number of DRAM Write CAS commands issued on this channel
unc_m_act_count.byp,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x1,umask=0x8/",,DRAM Activate Count; Activate due to Write. Unit: uncore_imc ,Counts the number of DRAM Activate commands sent on this channel.  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS.  One can calculate the number of Page Misses by subtracting the number of Page Miss precharges from the number of Activates
unc_m_act_count.rd,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x1,umask=0x1/",,DRAM Activate Count; Activate due to Read. Unit: uncore_imc ,Counts the number of DRAM Activate commands sent on this channel.  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS.  One can calculate the number of Page Misses by subtracting the number of Page Miss precharges from the number of Activates
unc_m_act_count.wr,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x1,umask=0x2/",,DRAM Activate Count; Activate due to Write. Unit: uncore_imc ,Counts the number of DRAM Activate commands sent on this channel.  Activate commands are issued to open up a page on the DRAM devices so that it can be read or written to with a CAS.  One can calculate the number of Page Misses by subtracting the number of Page Miss precharges from the number of Activates
unc_m_byp_cmds.act,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xa1,umask=0x1/",,ACT command issued by 2 cycle bypass. Unit: uncore_imc ,ACT command issued by 2 cycle bypass. Unit: uncore_imc 
unc_m_byp_cmds.cas,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xa1,umask=0x2/",,CAS command issued by 2 cycle bypass. Unit: uncore_imc ,CAS command issued by 2 cycle bypass. Unit: uncore_imc 
unc_m_byp_cmds.pre,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xa1,umask=0x4/",,PRE command issued by 2 cycle bypass. Unit: uncore_imc ,PRE command issued by 2 cycle bypass. Unit: uncore_imc 
unc_m_cas_count.all,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0xf/",,DRAM RD_CAS and WR_CAS Commands.; All DRAM WR_CAS (w/ and w/out auto-pre). Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands; Counts the total number of DRAM CAS commands issued on this channel
unc_m_cas_count.rd,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x3/",,DRAM RD_CAS and WR_CAS Commands.; All DRAM Reads (RD_CAS + Underfills). Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands; Counts the total number of DRAM Read CAS commands issued on this channel (including underfills)
unc_m_cas_count.rd_reg,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x1/",,DRAM RD_CAS and WR_CAS Commands.; All DRAM RD_CAS (w/ and w/out auto-pre). Unit: uncore_imc ,"DRAM RD_CAS and WR_CAS Commands; Counts the total number or DRAM Read CAS commands issued on this channel.  This includes both regular RD CAS commands as well as those with implicit Precharge.  AutoPre is only used in systems that are using closed page policy.  We do not filter based on major mode, as RD_CAS is not issued during WMM (with the exception of underfills)"
unc_m_cas_count.rd_rmm,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x20/",,DRAM RD_CAS and WR_CAS Commands.; Read CAS issued in RMM. Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands.; Read CAS issued in RMM. Unit: uncore_imc 
unc_m_cas_count.rd_underfill,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x2/",,DRAM RD_CAS and WR_CAS Commands.; Underfill Read Issued. Unit: uncore_imc ,"DRAM RD_CAS and WR_CAS Commands; Counts the number of underfill reads that are issued by the memory controller.  This will generally be about the same as the number of partial writes, but may be slightly less because of partials hitting in the WPQ.  While it is possible for underfills to be issed in both WMM and RMM, this event counts both"
unc_m_cas_count.rd_wmm,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x10/",,DRAM RD_CAS and WR_CAS Commands.; Read CAS issued in WMM. Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands.; Read CAS issued in WMM. Unit: uncore_imc 
unc_m_cas_count.wr,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0xc/",,DRAM RD_CAS and WR_CAS Commands.; All DRAM WR_CAS (both Modes). Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands; Counts the total number of DRAM Write CAS commands issued on this channel
unc_m_cas_count.wr_rmm,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x8/",,DRAM RD_CAS and WR_CAS Commands.; DRAM WR_CAS (w/ and w/out auto-pre) in Read Major Mode. Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands; Counts the total number of Opportunistic DRAM Write CAS commands issued on this channel while in Read-Major-Mode
unc_m_cas_count.wr_wmm,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x4,umask=0x4/",,DRAM RD_CAS and WR_CAS Commands.; DRAM WR_CAS (w/ and w/out auto-pre) in Write Major Mode. Unit: uncore_imc ,DRAM RD_CAS and WR_CAS Commands; Counts the total number or DRAM Write CAS commands issued on this channel while in Write-Major-Mode
unc_m_clockticks,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0/,,DRAM Clockticks. Unit: uncore_imc ,DRAM Clockticks. Unit: uncore_imc 
unc_m_dclockticks,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0/,,DRAM Clockticks. Unit: uncore_imc ,DRAM Clockticks. Unit: uncore_imc 
unc_m_dram_pre_all,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x6/,,DRAM Precharge All Commands. Unit: uncore_imc ,Counts the number of times that the precharge all command was sent
unc_m_dram_refresh.high,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x5,umask=0x4/",,Number of DRAM Refreshes Issued. Unit: uncore_imc ,Counts the number of refreshes issued
unc_m_dram_refresh.panic,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x5,umask=0x2/",,Number of DRAM Refreshes Issued. Unit: uncore_imc ,Counts the number of refreshes issued
unc_m_ecc_correctable_errors,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x9/,,ECC Correctable Errors. Unit: uncore_imc ,Counts the number of ECC errors detected and corrected by the iMC on this channel.  This counter is only useful with ECC DRAM devices.  This count will increment one time for each correction regardless of the number of bits corrected.  The iMC can correct up to 4 bit errors in independent channel mode and 8 bit errors in lockstep mode
unc_m_major_modes.isoch,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x7,umask=0x8/",,Cycles in a Major Mode; Isoch Major Mode. Unit: uncore_imc ,"Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.; We group these two modes together so that we can use four counters to track each of the major modes at one time.  These major modes are used whenever there is an ISOCH txn in the memory controller.  In these mode, only ISOCH transactions are processed"
unc_m_major_modes.partial,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x7,umask=0x4/",,Cycles in a Major Mode; Partial Major Mode. Unit: uncore_imc ,"Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.; This major mode is used to drain starved underfill reads.  Regular reads and writes are blocked and only underfill reads will be processed"
unc_m_major_modes.read,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x7,umask=0x1/",,Cycles in a Major Mode; Read Major Mode. Unit: uncore_imc ,"Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.; Read Major Mode is the default mode for the iMC, as reads are generally more critical to forward progress than writes"
unc_m_major_modes.write,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x7,umask=0x2/",,Cycles in a Major Mode; Write Major Mode. Unit: uncore_imc ,"Counts the total number of cycles spent in a major mode (selected by a filter) on the given channel.   Major modea are channel-wide, and not a per-rank (or dimm or bank) mode.; This mode is triggered when the WPQ hits high occupancy and causes writes to be higher priority than reads.  This can cause blips in the available read bandwidth in the system and temporarily increase read latencies in order to achieve better bus utilizations and higher bandwidth"
unc_m_power_channel_dlloff,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x84/,,Channel DLLOFF Cycles. Unit: uncore_imc ,Number of cycles when all the ranks in the channel are in CKE Slow (DLLOFF) mode
unc_m_power_channel_ppd,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x85/,,Channel PPD Cycles. Unit: uncore_imc ,"Number of cycles when all the ranks in the channel are in PPD mode.  If IBT=off is enabled, then this can be used to count those cycles.  If it is not enabled, then this can count the number of cycles when that could have been taken advantage of"
unc_m_power_cke_cycles.rank0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x1/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_cke_cycles.rank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x2/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_cke_cycles.rank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x4/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_cke_cycles.rank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x8/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_cke_cycles.rank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x10/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_cke_cycles.rank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x20/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_cke_cycles.rank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x40/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_cke_cycles.rank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x83,umask=0x80/",,CKE_ON_CYCLES by Rank; DIMM ID. Unit: uncore_imc ,"Number of cycles spent in CKE ON mode.  The filter allows you to select a rank to monitor.  If multiple ranks are in CKE ON mode at one time, the counter will ONLY increment by one rather than doing accumulation.  Multiple counters will need to be used to track multiple ranks simultaneously.  There is no distinction between the different CKE modes (APD, PPDS, PPDF).  This can be determined based on the system programming.  These events should commonly be used with Invert to get the number of cycles in power saving mode.  Edge Detect is also useful here.  Make sure that you do NOT use Invert with Edge Detect (this just confuses the system and is not necessary)"
unc_m_power_critical_throttle_cycles,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x86/,,Critical Throttle Cycles. Unit: uncore_imc ,"Counts the number of cycles when the iMC is in critical thermal throttling.  When this happens, all traffic is blocked.  This should be rare unless something bad is going on in the platform.  There is no filtering by rank for this event"
unc_m_power_pcu_throttling,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x42/,,UNC_M_POWER_PCU_THROTTLING. Unit: uncore_imc ,UNC_M_POWER_PCU_THROTTLING. Unit: uncore_imc 
unc_m_power_self_refresh,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x43/,,Clock-Enabled Self-Refresh. Unit: uncore_imc ,"Counts the number of cycles when the iMC is in self-refresh and the iMC still has a clock.  This happens in some package C-states.  For example, the PCU may ask the iMC to enter self-refresh even though some of the cores are still processing.  One use of this is for Monroe technology.  Self-refresh is required during package C3 and C6, but there is no clock in the iMC at this time, so it is not possible to count these cases"
unc_m_power_throttle_cycles.rank0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x1/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1.; Thermal throttling is performed per DIMM.  We support 3 DIMMs per channel.  This ID allows us to filter by ID"
unc_m_power_throttle_cycles.rank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x2/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1"
unc_m_power_throttle_cycles.rank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x4/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1"
unc_m_power_throttle_cycles.rank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x8/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1"
unc_m_power_throttle_cycles.rank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x10/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1"
unc_m_power_throttle_cycles.rank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x20/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1"
unc_m_power_throttle_cycles.rank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x40/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1"
unc_m_power_throttle_cycles.rank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x41,umask=0x80/",,Throttle Cycles for Rank 0; DIMM ID. Unit: uncore_imc ,"Counts the number of cycles while the iMC is being throttled by either thermal constraints or by the PCU throttling.  It is not possible to distinguish between the two.  This can be filtered by rank.  If multiple ranks are selected and are being throttled at the same time, the counter will only increment by 1"
unc_m_pre_count.byp,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x2,umask=0x10/",,DRAM Precharge commands.; Precharge due to bypass. Unit: uncore_imc ,Counts the number of DRAM Precharge commands sent on this channel
unc_m_pre_count.page_close,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x2,umask=0x2/",,DRAM Precharge commands.; Precharge due to timer expiration. Unit: uncore_imc ,Counts the number of DRAM Precharge commands sent on this channel.; Counts the number of DRAM Precharge commands sent on this channel as a result of the page close counter expiring.  This does not include implicit precharge commands sent in auto-precharge mode
unc_m_pre_count.page_miss,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x2,umask=0x1/",,DRAM Precharge commands.; Precharges due to page miss. Unit: uncore_imc ,Counts the number of DRAM Precharge commands sent on this channel.; Counts the number of DRAM Precharge commands sent on this channel as a result of page misses.  This does not include explicit precharge commands sent with CAS commands in Auto-Precharge mode.  This does not include PRE commands sent as a result of the page close counter expiration
unc_m_pre_count.rd,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x2,umask=0x4/",,DRAM Precharge commands.; Precharge due to read. Unit: uncore_imc ,Counts the number of DRAM Precharge commands sent on this channel
unc_m_pre_count.wr,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x2,umask=0x8/",,DRAM Precharge commands.; Precharge due to write. Unit: uncore_imc ,Counts the number of DRAM Precharge commands sent on this channel
unc_m_preemption.rd_preempt_rd,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x8,umask=0x1/",,Read Preemption Count; Read over Read Preemption. Unit: uncore_imc ,"Counts the number of times a read in the iMC preempts another read or write.  Generally reads to an open page are issued ahead of requests to closed pages.  This improves the page hit rate of the system.  However, high priority requests can cause pages of active requests to be closed in order to get them out.  This will reduce the latency of the high-priority request at the expense of lower bandwidth and increased overall average latency.; Filter for when a read preempts another read"
unc_m_preemption.rd_preempt_wr,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x8,umask=0x2/",,Read Preemption Count; Read over Write Preemption. Unit: uncore_imc ,"Counts the number of times a read in the iMC preempts another read or write.  Generally reads to an open page are issued ahead of requests to closed pages.  This improves the page hit rate of the system.  However, high priority requests can cause pages of active requests to be closed in order to get them out.  This will reduce the latency of the high-priority request at the expense of lower bandwidth and increased overall average latency.; Filter for when a read preempts a write"
unc_m_rd_cas_prio.high,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xa0,umask=0x4/",,Read CAS issued with HIGH priority. Unit: uncore_imc ,Read CAS issued with HIGH priority. Unit: uncore_imc 
unc_m_rd_cas_prio.low,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xa0,umask=0x1/",,Read CAS issued with LOW priority. Unit: uncore_imc ,Read CAS issued with LOW priority. Unit: uncore_imc 
unc_m_rd_cas_prio.med,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xa0,umask=0x2/",,Read CAS issued with MEDIUM priority. Unit: uncore_imc ,Read CAS issued with MEDIUM priority. Unit: uncore_imc 
unc_m_rd_cas_prio.panic,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xa0,umask=0x8/",,Read CAS issued with PANIC NON ISOCH priority (starved). Unit: uncore_imc ,Read CAS issued with PANIC NON ISOCH priority (starved). Unit: uncore_imc 
unc_m_rd_cas_rank0.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x10/",,RD_CAS Access to Rank 0; All Banks. Unit: uncore_imc ,RD_CAS Access to Rank 0 : All Banks
unc_m_rd_cas_rank0.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb0/,,RD_CAS Access to Rank 0; Bank 0. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 0
unc_m_rd_cas_rank0.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x1/",,RD_CAS Access to Rank 0; Bank 1. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 1
unc_m_rd_cas_rank0.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0xa/",,RD_CAS Access to Rank 0; Bank 10. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 10
unc_m_rd_cas_rank0.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0xb/",,RD_CAS Access to Rank 0; Bank 11. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 11
unc_m_rd_cas_rank0.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0xc/",,RD_CAS Access to Rank 0; Bank 12. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 12
unc_m_rd_cas_rank0.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0xd/",,RD_CAS Access to Rank 0; Bank 13. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 13
unc_m_rd_cas_rank0.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0xe/",,RD_CAS Access to Rank 0; Bank 14. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 14
unc_m_rd_cas_rank0.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0xf/",,RD_CAS Access to Rank 0; Bank 15. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 15
unc_m_rd_cas_rank0.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x2/",,RD_CAS Access to Rank 0; Bank 2. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 2
unc_m_rd_cas_rank0.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x3/",,RD_CAS Access to Rank 0; Bank 3. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 3
unc_m_rd_cas_rank0.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x4/",,RD_CAS Access to Rank 0; Bank 4. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 4
unc_m_rd_cas_rank0.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x5/",,RD_CAS Access to Rank 0; Bank 5. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 5
unc_m_rd_cas_rank0.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x6/",,RD_CAS Access to Rank 0; Bank 6. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 6
unc_m_rd_cas_rank0.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x7/",,RD_CAS Access to Rank 0; Bank 7. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 7
unc_m_rd_cas_rank0.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x8/",,RD_CAS Access to Rank 0; Bank 8. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 8
unc_m_rd_cas_rank0.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x9/",,RD_CAS Access to Rank 0; Bank 9. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 9
unc_m_rd_cas_rank0.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x11/",,RD_CAS Access to Rank 0; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_rd_cas_rank0.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x12/",,RD_CAS Access to Rank 0; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_rd_cas_rank0.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x13/",,RD_CAS Access to Rank 0; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_rd_cas_rank0.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb0,umask=0x14/",,RD_CAS Access to Rank 0; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_rd_cas_rank1.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x10/",,RD_CAS Access to Rank 1; All Banks. Unit: uncore_imc ,RD_CAS Access to Rank 0 : All Banks
unc_m_rd_cas_rank1.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb1/,,RD_CAS Access to Rank 1; Bank 0. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 0
unc_m_rd_cas_rank1.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x1/",,RD_CAS Access to Rank 1; Bank 1. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 1
unc_m_rd_cas_rank1.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0xa/",,RD_CAS Access to Rank 1; Bank 10. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 10
unc_m_rd_cas_rank1.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0xb/",,RD_CAS Access to Rank 1; Bank 11. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 11
unc_m_rd_cas_rank1.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0xc/",,RD_CAS Access to Rank 1; Bank 12. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 12
unc_m_rd_cas_rank1.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0xd/",,RD_CAS Access to Rank 1; Bank 13. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 13
unc_m_rd_cas_rank1.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0xe/",,RD_CAS Access to Rank 1; Bank 14. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 14
unc_m_rd_cas_rank1.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0xf/",,RD_CAS Access to Rank 1; Bank 15. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 15
unc_m_rd_cas_rank1.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x2/",,RD_CAS Access to Rank 1; Bank 2. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 2
unc_m_rd_cas_rank1.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x3/",,RD_CAS Access to Rank 1; Bank 3. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 3
unc_m_rd_cas_rank1.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x4/",,RD_CAS Access to Rank 1; Bank 4. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 4
unc_m_rd_cas_rank1.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x5/",,RD_CAS Access to Rank 1; Bank 5. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 5
unc_m_rd_cas_rank1.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x6/",,RD_CAS Access to Rank 1; Bank 6. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 6
unc_m_rd_cas_rank1.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x7/",,RD_CAS Access to Rank 1; Bank 7. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 7
unc_m_rd_cas_rank1.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x8/",,RD_CAS Access to Rank 1; Bank 8. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 8
unc_m_rd_cas_rank1.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x9/",,RD_CAS Access to Rank 1; Bank 9. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 9
unc_m_rd_cas_rank1.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x11/",,RD_CAS Access to Rank 1; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_rd_cas_rank1.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x12/",,RD_CAS Access to Rank 1; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_rd_cas_rank1.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x13/",,RD_CAS Access to Rank 1; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_rd_cas_rank1.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb1,umask=0x14/",,RD_CAS Access to Rank 1; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_rd_cas_rank2.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb2/,,RD_CAS Access to Rank 2; Bank 0. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 0
unc_m_rd_cas_rank4.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x10/",,RD_CAS Access to Rank 4; All Banks. Unit: uncore_imc ,RD_CAS Access to Rank 0 : All Banks
unc_m_rd_cas_rank4.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb4/,,RD_CAS Access to Rank 4; Bank 0. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 0
unc_m_rd_cas_rank4.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x1/",,RD_CAS Access to Rank 4; Bank 1. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 1
unc_m_rd_cas_rank4.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0xa/",,RD_CAS Access to Rank 4; Bank 10. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 10
unc_m_rd_cas_rank4.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0xb/",,RD_CAS Access to Rank 4; Bank 11. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 11
unc_m_rd_cas_rank4.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0xc/",,RD_CAS Access to Rank 4; Bank 12. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 12
unc_m_rd_cas_rank4.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0xd/",,RD_CAS Access to Rank 4; Bank 13. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 13
unc_m_rd_cas_rank4.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0xe/",,RD_CAS Access to Rank 4; Bank 14. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 14
unc_m_rd_cas_rank4.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0xf/",,RD_CAS Access to Rank 4; Bank 15. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 15
unc_m_rd_cas_rank4.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x2/",,RD_CAS Access to Rank 4; Bank 2. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 2
unc_m_rd_cas_rank4.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x3/",,RD_CAS Access to Rank 4; Bank 3. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 3
unc_m_rd_cas_rank4.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x4/",,RD_CAS Access to Rank 4; Bank 4. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 4
unc_m_rd_cas_rank4.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x5/",,RD_CAS Access to Rank 4; Bank 5. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 5
unc_m_rd_cas_rank4.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x6/",,RD_CAS Access to Rank 4; Bank 6. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 6
unc_m_rd_cas_rank4.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x7/",,RD_CAS Access to Rank 4; Bank 7. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 7
unc_m_rd_cas_rank4.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x8/",,RD_CAS Access to Rank 4; Bank 8. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 8
unc_m_rd_cas_rank4.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x9/",,RD_CAS Access to Rank 4; Bank 9. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 9
unc_m_rd_cas_rank4.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x11/",,RD_CAS Access to Rank 4; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_rd_cas_rank4.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x12/",,RD_CAS Access to Rank 4; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_rd_cas_rank4.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x13/",,RD_CAS Access to Rank 4; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_rd_cas_rank4.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb4,umask=0x14/",,RD_CAS Access to Rank 4; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_rd_cas_rank5.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x10/",,RD_CAS Access to Rank 5; All Banks. Unit: uncore_imc ,RD_CAS Access to Rank 0 : All Banks
unc_m_rd_cas_rank5.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb5/,,RD_CAS Access to Rank 5; Bank 0. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 0
unc_m_rd_cas_rank5.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x1/",,RD_CAS Access to Rank 5; Bank 1. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 1
unc_m_rd_cas_rank5.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0xa/",,RD_CAS Access to Rank 5; Bank 10. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 10
unc_m_rd_cas_rank5.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0xb/",,RD_CAS Access to Rank 5; Bank 11. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 11
unc_m_rd_cas_rank5.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0xc/",,RD_CAS Access to Rank 5; Bank 12. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 12
unc_m_rd_cas_rank5.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0xd/",,RD_CAS Access to Rank 5; Bank 13. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 13
unc_m_rd_cas_rank5.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0xe/",,RD_CAS Access to Rank 5; Bank 14. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 14
unc_m_rd_cas_rank5.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0xf/",,RD_CAS Access to Rank 5; Bank 15. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 15
unc_m_rd_cas_rank5.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x2/",,RD_CAS Access to Rank 5; Bank 2. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 2
unc_m_rd_cas_rank5.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x3/",,RD_CAS Access to Rank 5; Bank 3. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 3
unc_m_rd_cas_rank5.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x4/",,RD_CAS Access to Rank 5; Bank 4. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 4
unc_m_rd_cas_rank5.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x5/",,RD_CAS Access to Rank 5; Bank 5. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 5
unc_m_rd_cas_rank5.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x6/",,RD_CAS Access to Rank 5; Bank 6. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 6
unc_m_rd_cas_rank5.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x7/",,RD_CAS Access to Rank 5; Bank 7. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 7
unc_m_rd_cas_rank5.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x8/",,RD_CAS Access to Rank 5; Bank 8. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 8
unc_m_rd_cas_rank5.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x9/",,RD_CAS Access to Rank 5; Bank 9. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 9
unc_m_rd_cas_rank5.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x11/",,RD_CAS Access to Rank 5; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_rd_cas_rank5.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x12/",,RD_CAS Access to Rank 5; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_rd_cas_rank5.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x13/",,RD_CAS Access to Rank 5; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_rd_cas_rank5.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb5,umask=0x14/",,RD_CAS Access to Rank 5; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_rd_cas_rank6.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x10/",,RD_CAS Access to Rank 6; All Banks. Unit: uncore_imc ,RD_CAS Access to Rank 0 : All Banks
unc_m_rd_cas_rank6.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb6/,,RD_CAS Access to Rank 6; Bank 0. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 0
unc_m_rd_cas_rank6.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x1/",,RD_CAS Access to Rank 6; Bank 1. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 1
unc_m_rd_cas_rank6.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0xa/",,RD_CAS Access to Rank 6; Bank 10. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 10
unc_m_rd_cas_rank6.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0xb/",,RD_CAS Access to Rank 6; Bank 11. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 11
unc_m_rd_cas_rank6.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0xc/",,RD_CAS Access to Rank 6; Bank 12. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 12
unc_m_rd_cas_rank6.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0xd/",,RD_CAS Access to Rank 6; Bank 13. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 13
unc_m_rd_cas_rank6.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0xe/",,RD_CAS Access to Rank 6; Bank 14. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 14
unc_m_rd_cas_rank6.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0xf/",,RD_CAS Access to Rank 6; Bank 15. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 15
unc_m_rd_cas_rank6.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x2/",,RD_CAS Access to Rank 6; Bank 2. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 2
unc_m_rd_cas_rank6.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x3/",,RD_CAS Access to Rank 6; Bank 3. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 3
unc_m_rd_cas_rank6.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x4/",,RD_CAS Access to Rank 6; Bank 4. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 4
unc_m_rd_cas_rank6.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x5/",,RD_CAS Access to Rank 6; Bank 5. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 5
unc_m_rd_cas_rank6.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x6/",,RD_CAS Access to Rank 6; Bank 6. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 6
unc_m_rd_cas_rank6.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x7/",,RD_CAS Access to Rank 6; Bank 7. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 7
unc_m_rd_cas_rank6.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x8/",,RD_CAS Access to Rank 6; Bank 8. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 8
unc_m_rd_cas_rank6.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x9/",,RD_CAS Access to Rank 6; Bank 9. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 9
unc_m_rd_cas_rank6.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x11/",,RD_CAS Access to Rank 6; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_rd_cas_rank6.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x12/",,RD_CAS Access to Rank 6; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_rd_cas_rank6.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x13/",,RD_CAS Access to Rank 6; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_rd_cas_rank6.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb6,umask=0x14/",,RD_CAS Access to Rank 6; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_rd_cas_rank7.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x10/",,RD_CAS Access to Rank 7; All Banks. Unit: uncore_imc ,RD_CAS Access to Rank 0 : All Banks
unc_m_rd_cas_rank7.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb7/,,RD_CAS Access to Rank 7; Bank 0. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 0
unc_m_rd_cas_rank7.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x1/",,RD_CAS Access to Rank 7; Bank 1. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 1
unc_m_rd_cas_rank7.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0xa/",,RD_CAS Access to Rank 7; Bank 10. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 10
unc_m_rd_cas_rank7.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0xb/",,RD_CAS Access to Rank 7; Bank 11. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 11
unc_m_rd_cas_rank7.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0xc/",,RD_CAS Access to Rank 7; Bank 12. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 12
unc_m_rd_cas_rank7.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0xd/",,RD_CAS Access to Rank 7; Bank 13. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 13
unc_m_rd_cas_rank7.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0xe/",,RD_CAS Access to Rank 7; Bank 14. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 14
unc_m_rd_cas_rank7.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0xf/",,RD_CAS Access to Rank 7; Bank 15. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 15
unc_m_rd_cas_rank7.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x2/",,RD_CAS Access to Rank 7; Bank 2. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 2
unc_m_rd_cas_rank7.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x3/",,RD_CAS Access to Rank 7; Bank 3. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 3
unc_m_rd_cas_rank7.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x4/",,RD_CAS Access to Rank 7; Bank 4. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 4
unc_m_rd_cas_rank7.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x5/",,RD_CAS Access to Rank 7; Bank 5. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 5
unc_m_rd_cas_rank7.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x6/",,RD_CAS Access to Rank 7; Bank 6. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 6
unc_m_rd_cas_rank7.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x7/",,RD_CAS Access to Rank 7; Bank 7. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 7
unc_m_rd_cas_rank7.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x8/",,RD_CAS Access to Rank 7; Bank 8. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 8
unc_m_rd_cas_rank7.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x9/",,RD_CAS Access to Rank 7; Bank 9. Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank 9
unc_m_rd_cas_rank7.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x11/",,RD_CAS Access to Rank 7; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_rd_cas_rank7.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x12/",,RD_CAS Access to Rank 7; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_rd_cas_rank7.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x13/",,RD_CAS Access to Rank 7; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_rd_cas_rank7.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb7,umask=0x14/",,RD_CAS Access to Rank 7; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,RD_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_rpq_cycles_ne,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x11/,,Read Pending Queue Not Empty. Unit: uncore_imc ,"Counts the number of cycles that the Read Pending Queue is not empty.  This can then be used to calculate the average occupancy (in conjunction with the Read Pending Queue Occupancy count).  The RPQ is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This filter is to be used in conjunction with the occupancy filter so that one can correctly track the average occupancies for schedulable entries and scheduled requests"
unc_m_rpq_inserts,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x10/,,Read Pending Queue Allocations. Unit: uncore_imc ,"Counts the number of allocations into the Read Pending Queue.  This queue is used to schedule reads out to the memory controller and to track the requests.  Requests allocate into the RPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after the CAS command has been issued to memory.  This includes both ISOCH and non-ISOCH requests"
unc_m_vmse_mxb_wr_occupancy,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x91/,,VMSE MXB write buffer occupancy. Unit: uncore_imc ,VMSE MXB write buffer occupancy. Unit: uncore_imc 
unc_m_vmse_wr_push.rmm,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x90,umask=0x2/",,VMSE WR PUSH issued; VMSE write PUSH issued in RMM. Unit: uncore_imc ,VMSE WR PUSH issued; VMSE write PUSH issued in RMM. Unit: uncore_imc 
unc_m_vmse_wr_push.wmm,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0x90,umask=0x1/",,VMSE WR PUSH issued; VMSE write PUSH issued in WMM. Unit: uncore_imc ,VMSE WR PUSH issued; VMSE write PUSH issued in WMM. Unit: uncore_imc 
unc_m_wmm_to_rmm.low_thresh,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xc0,umask=0x1/",,Transition from WMM to RMM because of low threshold; Transition from WMM to RMM because of starve counter. Unit: uncore_imc ,Transition from WMM to RMM because of low threshold; Transition from WMM to RMM because of starve counter. Unit: uncore_imc 
unc_m_wmm_to_rmm.starve,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xc0,umask=0x2/",,Transition from WMM to RMM because of low threshold. Unit: uncore_imc ,Transition from WMM to RMM because of low threshold. Unit: uncore_imc 
unc_m_wmm_to_rmm.vmse_retry,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xc0,umask=0x4/",,Transition from WMM to RMM because of low threshold. Unit: uncore_imc ,Transition from WMM to RMM because of low threshold. Unit: uncore_imc 
unc_m_wpq_cycles_full,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x22/,,Write Pending Queue Full Cycles. Unit: uncore_imc ,"Counts the number of cycles when the Write Pending Queue is full.  When the WPQ is full, the HA will not be able to issue any additional read requests into the iMC.  This count should be similar count in the HA which tracks the number of cycles that the HA has no WPQ credits, just somewhat smaller to account for the credit return overhead"
unc_m_wpq_cycles_ne,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x21/,,Write Pending Queue Not Empty. Unit: uncore_imc ,"Counts the number of cycles that the Write Pending Queue is not empty.  This can then be used to calculate the average queue occupancy (in conjunction with the WPQ Occupancy Accumulation count).  The WPQ is used to schedule write out to the memory controller and to track the writes.  Requests allocate into the WPQ soon after they enter the memory controller, and need credits for an entry in this buffer before being sent from the HA to the iMC.  They deallocate after being issued to DRAM.  Write requests themselves are able to complete (from the perspective of the rest of the system) as soon they have posted to the iMC.  This is not to be confused with actually performing the write to DRAM.  Therefore, the average latency for this queue is actually not useful for deconstruction intermediate write latencies"
unc_m_wpq_read_hit,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x23/,,Write Pending Queue CAM Match. Unit: uncore_imc ,"Counts the number of times a request hits in the WPQ (write-pending queue).  The iMC allows writes and reads to pass up other writes to different addresses.  Before a read or a write is issued, it will first CAM the WPQ to see if there is a write pending to that address.  When reads hit, they are able to directly pull their data from the WPQ instead of going to memory.  Writes that hit will overwrite the existing data.  Partial writes that hit will not need to do underfill reads and will simply update their relevant sections"
unc_m_wpq_write_hit,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0x24/,,Write Pending Queue CAM Match. Unit: uncore_imc ,"Counts the number of times a request hits in the WPQ (write-pending queue).  The iMC allows writes and reads to pass up other writes to different addresses.  Before a read or a write is issued, it will first CAM the WPQ to see if there is a write pending to that address.  When reads hit, they are able to directly pull their data from the WPQ instead of going to memory.  Writes that hit will overwrite the existing data.  Partial writes that hit will not need to do underfill reads and will simply update their relevant sections"
unc_m_wr_cas_rank0.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x10/",,WR_CAS Access to Rank 0; All Banks. Unit: uncore_imc ,WR_CAS Access to Rank 0 : All Banks
unc_m_wr_cas_rank0.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb8/,,WR_CAS Access to Rank 0; Bank 0. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 0
unc_m_wr_cas_rank0.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x1/",,WR_CAS Access to Rank 0; Bank 1. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 1
unc_m_wr_cas_rank0.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0xa/",,WR_CAS Access to Rank 0; Bank 10. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 10
unc_m_wr_cas_rank0.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0xb/",,WR_CAS Access to Rank 0; Bank 11. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 11
unc_m_wr_cas_rank0.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0xc/",,WR_CAS Access to Rank 0; Bank 12. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 12
unc_m_wr_cas_rank0.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0xd/",,WR_CAS Access to Rank 0; Bank 13. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 13
unc_m_wr_cas_rank0.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0xe/",,WR_CAS Access to Rank 0; Bank 14. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 14
unc_m_wr_cas_rank0.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0xf/",,WR_CAS Access to Rank 0; Bank 15. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 15
unc_m_wr_cas_rank0.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x2/",,WR_CAS Access to Rank 0; Bank 2. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 2
unc_m_wr_cas_rank0.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x3/",,WR_CAS Access to Rank 0; Bank 3. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 3
unc_m_wr_cas_rank0.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x4/",,WR_CAS Access to Rank 0; Bank 4. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 4
unc_m_wr_cas_rank0.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x5/",,WR_CAS Access to Rank 0; Bank 5. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 5
unc_m_wr_cas_rank0.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x6/",,WR_CAS Access to Rank 0; Bank 6. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 6
unc_m_wr_cas_rank0.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x7/",,WR_CAS Access to Rank 0; Bank 7. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 7
unc_m_wr_cas_rank0.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x8/",,WR_CAS Access to Rank 0; Bank 8. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 8
unc_m_wr_cas_rank0.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x9/",,WR_CAS Access to Rank 0; Bank 9. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 9
unc_m_wr_cas_rank0.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x11/",,WR_CAS Access to Rank 0; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_wr_cas_rank0.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x12/",,WR_CAS Access to Rank 0; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_wr_cas_rank0.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x13/",,WR_CAS Access to Rank 0; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_wr_cas_rank0.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb8,umask=0x14/",,WR_CAS Access to Rank 0; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_wr_cas_rank1.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x10/",,WR_CAS Access to Rank 1; All Banks. Unit: uncore_imc ,WR_CAS Access to Rank 0 : All Banks
unc_m_wr_cas_rank1.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xb9/,,WR_CAS Access to Rank 1; Bank 0. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 0
unc_m_wr_cas_rank1.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x1/",,WR_CAS Access to Rank 1; Bank 1. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 1
unc_m_wr_cas_rank1.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0xa/",,WR_CAS Access to Rank 1; Bank 10. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 10
unc_m_wr_cas_rank1.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0xb/",,WR_CAS Access to Rank 1; Bank 11. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 11
unc_m_wr_cas_rank1.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0xc/",,WR_CAS Access to Rank 1; Bank 12. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 12
unc_m_wr_cas_rank1.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0xd/",,WR_CAS Access to Rank 1; Bank 13. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 13
unc_m_wr_cas_rank1.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0xe/",,WR_CAS Access to Rank 1; Bank 14. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 14
unc_m_wr_cas_rank1.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0xf/",,WR_CAS Access to Rank 1; Bank 15. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 15
unc_m_wr_cas_rank1.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x2/",,WR_CAS Access to Rank 1; Bank 2. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 2
unc_m_wr_cas_rank1.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x3/",,WR_CAS Access to Rank 1; Bank 3. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 3
unc_m_wr_cas_rank1.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x4/",,WR_CAS Access to Rank 1; Bank 4. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 4
unc_m_wr_cas_rank1.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x5/",,WR_CAS Access to Rank 1; Bank 5. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 5
unc_m_wr_cas_rank1.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x6/",,WR_CAS Access to Rank 1; Bank 6. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 6
unc_m_wr_cas_rank1.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x7/",,WR_CAS Access to Rank 1; Bank 7. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 7
unc_m_wr_cas_rank1.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x8/",,WR_CAS Access to Rank 1; Bank 8. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 8
unc_m_wr_cas_rank1.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x9/",,WR_CAS Access to Rank 1; Bank 9. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 9
unc_m_wr_cas_rank1.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x11/",,WR_CAS Access to Rank 1; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_wr_cas_rank1.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x12/",,WR_CAS Access to Rank 1; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_wr_cas_rank1.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x13/",,WR_CAS Access to Rank 1; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_wr_cas_rank1.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xb9,umask=0x14/",,WR_CAS Access to Rank 1; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_wr_cas_rank4.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x10/",,WR_CAS Access to Rank 4; All Banks. Unit: uncore_imc ,WR_CAS Access to Rank 0 : All Banks
unc_m_wr_cas_rank4.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xbc/,,WR_CAS Access to Rank 4; Bank 0. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 0
unc_m_wr_cas_rank4.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x1/",,WR_CAS Access to Rank 4; Bank 1. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 1
unc_m_wr_cas_rank4.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0xa/",,WR_CAS Access to Rank 4; Bank 10. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 10
unc_m_wr_cas_rank4.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0xb/",,WR_CAS Access to Rank 4; Bank 11. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 11
unc_m_wr_cas_rank4.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0xc/",,WR_CAS Access to Rank 4; Bank 12. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 12
unc_m_wr_cas_rank4.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0xd/",,WR_CAS Access to Rank 4; Bank 13. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 13
unc_m_wr_cas_rank4.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0xe/",,WR_CAS Access to Rank 4; Bank 14. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 14
unc_m_wr_cas_rank4.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0xf/",,WR_CAS Access to Rank 4; Bank 15. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 15
unc_m_wr_cas_rank4.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x2/",,WR_CAS Access to Rank 4; Bank 2. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 2
unc_m_wr_cas_rank4.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x3/",,WR_CAS Access to Rank 4; Bank 3. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 3
unc_m_wr_cas_rank4.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x4/",,WR_CAS Access to Rank 4; Bank 4. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 4
unc_m_wr_cas_rank4.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x5/",,WR_CAS Access to Rank 4; Bank 5. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 5
unc_m_wr_cas_rank4.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x6/",,WR_CAS Access to Rank 4; Bank 6. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 6
unc_m_wr_cas_rank4.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x7/",,WR_CAS Access to Rank 4; Bank 7. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 7
unc_m_wr_cas_rank4.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x8/",,WR_CAS Access to Rank 4; Bank 8. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 8
unc_m_wr_cas_rank4.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x9/",,WR_CAS Access to Rank 4; Bank 9. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 9
unc_m_wr_cas_rank4.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x11/",,WR_CAS Access to Rank 4; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_wr_cas_rank4.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x12/",,WR_CAS Access to Rank 4; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_wr_cas_rank4.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x13/",,WR_CAS Access to Rank 4; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_wr_cas_rank4.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbc,umask=0x14/",,WR_CAS Access to Rank 4; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_wr_cas_rank5.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x10/",,WR_CAS Access to Rank 5; All Banks. Unit: uncore_imc ,WR_CAS Access to Rank 0 : All Banks
unc_m_wr_cas_rank5.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xbd/,,WR_CAS Access to Rank 5; Bank 0. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 0
unc_m_wr_cas_rank5.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x1/",,WR_CAS Access to Rank 5; Bank 1. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 1
unc_m_wr_cas_rank5.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0xa/",,WR_CAS Access to Rank 5; Bank 10. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 10
unc_m_wr_cas_rank5.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0xb/",,WR_CAS Access to Rank 5; Bank 11. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 11
unc_m_wr_cas_rank5.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0xc/",,WR_CAS Access to Rank 5; Bank 12. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 12
unc_m_wr_cas_rank5.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0xd/",,WR_CAS Access to Rank 5; Bank 13. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 13
unc_m_wr_cas_rank5.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0xe/",,WR_CAS Access to Rank 5; Bank 14. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 14
unc_m_wr_cas_rank5.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0xf/",,WR_CAS Access to Rank 5; Bank 15. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 15
unc_m_wr_cas_rank5.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x2/",,WR_CAS Access to Rank 5; Bank 2. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 2
unc_m_wr_cas_rank5.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x3/",,WR_CAS Access to Rank 5; Bank 3. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 3
unc_m_wr_cas_rank5.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x4/",,WR_CAS Access to Rank 5; Bank 4. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 4
unc_m_wr_cas_rank5.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x5/",,WR_CAS Access to Rank 5; Bank 5. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 5
unc_m_wr_cas_rank5.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x6/",,WR_CAS Access to Rank 5; Bank 6. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 6
unc_m_wr_cas_rank5.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x7/",,WR_CAS Access to Rank 5; Bank 7. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 7
unc_m_wr_cas_rank5.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x8/",,WR_CAS Access to Rank 5; Bank 8. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 8
unc_m_wr_cas_rank5.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x9/",,WR_CAS Access to Rank 5; Bank 9. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 9
unc_m_wr_cas_rank5.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x11/",,WR_CAS Access to Rank 5; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_wr_cas_rank5.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x12/",,WR_CAS Access to Rank 5; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_wr_cas_rank5.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x13/",,WR_CAS Access to Rank 5; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_wr_cas_rank5.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbd,umask=0x14/",,WR_CAS Access to Rank 5; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_wr_cas_rank6.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x10/",,WR_CAS Access to Rank 6; All Banks. Unit: uncore_imc ,WR_CAS Access to Rank 0 : All Banks
unc_m_wr_cas_rank6.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xbe/,,WR_CAS Access to Rank 6; Bank 0. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 0
unc_m_wr_cas_rank6.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x1/",,WR_CAS Access to Rank 6; Bank 1. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 1
unc_m_wr_cas_rank6.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0xa/",,WR_CAS Access to Rank 6; Bank 10. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 10
unc_m_wr_cas_rank6.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0xb/",,WR_CAS Access to Rank 6; Bank 11. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 11
unc_m_wr_cas_rank6.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0xc/",,WR_CAS Access to Rank 6; Bank 12. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 12
unc_m_wr_cas_rank6.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0xd/",,WR_CAS Access to Rank 6; Bank 13. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 13
unc_m_wr_cas_rank6.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0xe/",,WR_CAS Access to Rank 6; Bank 14. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 14
unc_m_wr_cas_rank6.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0xf/",,WR_CAS Access to Rank 6; Bank 15. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 15
unc_m_wr_cas_rank6.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x2/",,WR_CAS Access to Rank 6; Bank 2. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 2
unc_m_wr_cas_rank6.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x3/",,WR_CAS Access to Rank 6; Bank 3. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 3
unc_m_wr_cas_rank6.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x4/",,WR_CAS Access to Rank 6; Bank 4. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 4
unc_m_wr_cas_rank6.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x5/",,WR_CAS Access to Rank 6; Bank 5. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 5
unc_m_wr_cas_rank6.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x6/",,WR_CAS Access to Rank 6; Bank 6. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 6
unc_m_wr_cas_rank6.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x7/",,WR_CAS Access to Rank 6; Bank 7. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 7
unc_m_wr_cas_rank6.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x8/",,WR_CAS Access to Rank 6; Bank 8. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 8
unc_m_wr_cas_rank6.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x9/",,WR_CAS Access to Rank 6; Bank 9. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 9
unc_m_wr_cas_rank6.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x11/",,WR_CAS Access to Rank 6; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_wr_cas_rank6.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x12/",,WR_CAS Access to Rank 6; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_wr_cas_rank6.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x13/",,WR_CAS Access to Rank 6; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_wr_cas_rank6.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbe,umask=0x14/",,WR_CAS Access to Rank 6; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_wr_cas_rank7.allbanks,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x10/",,WR_CAS Access to Rank 7; All Banks. Unit: uncore_imc ,WR_CAS Access to Rank 0 : All Banks
unc_m_wr_cas_rank7.bank0,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xbf/,,WR_CAS Access to Rank 7; Bank 0. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 0
unc_m_wr_cas_rank7.bank1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x1/",,WR_CAS Access to Rank 7; Bank 1. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 1
unc_m_wr_cas_rank7.bank10,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0xa/",,WR_CAS Access to Rank 7; Bank 10. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 10
unc_m_wr_cas_rank7.bank11,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0xb/",,WR_CAS Access to Rank 7; Bank 11. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 11
unc_m_wr_cas_rank7.bank12,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0xc/",,WR_CAS Access to Rank 7; Bank 12. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 12
unc_m_wr_cas_rank7.bank13,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0xd/",,WR_CAS Access to Rank 7; Bank 13. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 13
unc_m_wr_cas_rank7.bank14,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0xe/",,WR_CAS Access to Rank 7; Bank 14. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 14
unc_m_wr_cas_rank7.bank15,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0xf/",,WR_CAS Access to Rank 7; Bank 15. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 15
unc_m_wr_cas_rank7.bank2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x2/",,WR_CAS Access to Rank 7; Bank 2. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 2
unc_m_wr_cas_rank7.bank3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x3/",,WR_CAS Access to Rank 7; Bank 3. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 3
unc_m_wr_cas_rank7.bank4,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x4/",,WR_CAS Access to Rank 7; Bank 4. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 4
unc_m_wr_cas_rank7.bank5,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x5/",,WR_CAS Access to Rank 7; Bank 5. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 5
unc_m_wr_cas_rank7.bank6,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x6/",,WR_CAS Access to Rank 7; Bank 6. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 6
unc_m_wr_cas_rank7.bank7,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x7/",,WR_CAS Access to Rank 7; Bank 7. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 7
unc_m_wr_cas_rank7.bank8,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x8/",,WR_CAS Access to Rank 7; Bank 8. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 8
unc_m_wr_cas_rank7.bank9,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x9/",,WR_CAS Access to Rank 7; Bank 9. Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank 9
unc_m_wr_cas_rank7.bankg0,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x11/",,WR_CAS Access to Rank 7; Bank Group 0 (Banks 0-3). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 0 (Banks 0-3)
unc_m_wr_cas_rank7.bankg1,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x12/",,WR_CAS Access to Rank 7; Bank Group 1 (Banks 4-7). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 1 (Banks 4-7)
unc_m_wr_cas_rank7.bankg2,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x13/",,WR_CAS Access to Rank 7; Bank Group 2 (Banks 8-11). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 2 (Banks 8-11)
unc_m_wr_cas_rank7.bankg3,,Kernel PMU event,uncore_imc,uncore memory,"uncore_imc/event=0xbf,umask=0x14/",,WR_CAS Access to Rank 7; Bank Group 3 (Banks 12-15). Unit: uncore_imc ,WR_CAS Access to Rank 0 : Bank Group 3 (Banks 12-15)
unc_m_wrong_mm,,Kernel PMU event,uncore_imc,uncore memory,uncore_imc/event=0xc1/,,Not getting the requested Major Mode. Unit: uncore_imc ,Not getting the requested Major Mode. Unit: uncore_imc 
unc_p_clockticks,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0/,,pclk Cycles. Unit: uncore_pcu ,"The PCU runs off a fixed 800 MHz clock.  This event counts the number of pclk cycles measured while the counter was enabled.  The pclk, like the Memory Controller's dclk, counts at a constant rate making it a good measure of actual wall time"
unc_p_core0_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x60/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core10_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x6a/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core11_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x6b/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core12_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x6c/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core13_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x6d/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core14_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x6e/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core15_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x6f/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core16_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x70/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core17_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x71/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core1_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x61/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core2_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x62/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core3_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x63/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core4_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x64/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core5_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x65/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core6_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x66/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core7_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x67/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core8_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x68/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_core9_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x69/,,Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions.  There is one event per core
unc_p_demotions_core0,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x30/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core1,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x31/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core10,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x3a/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core11,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x3b/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core12,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x3c/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core13,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x3d/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core14,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x3e/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core15,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x3f/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core16,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x40/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core17,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x41/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core2,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x32/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core3,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x33/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core4,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x34/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core5,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x35/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core6,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x36/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core7,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x37/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core8,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x38/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_demotions_core9,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x39/,,Core C State Demotions. Unit: uncore_pcu ,Counts the number of times when a configurable cores had a C-state demotion
unc_p_freq_band0_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0xb/,,Frequency Residency. Unit: uncore_pcu ,"Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency"
unc_p_freq_band1_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0xc/,,Frequency Residency. Unit: uncore_pcu ,"Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency"
unc_p_freq_band2_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0xd/,,Frequency Residency. Unit: uncore_pcu ,"Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency"
unc_p_freq_band3_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0xe/,,Frequency Residency. Unit: uncore_pcu ,"Counts the number of cycles that the uncore was running at a frequency greater than or equal to the frequency that is configured in the filter.  One can use all four counters with this event, so it is possible to track up to 4 configurable bands.  One can use edge detect in conjunction with this event to track the number of times that we transitioned into a frequency greater than or equal to the configurable frequency. One can also use inversion to track cycles when we were less than the configured frequency"
unc_p_freq_max_limit_thermal_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x4/,,Thermal Strongest Upper Limit Cycles. Unit: uncore_pcu ,"Counts the number of cycles when thermal conditions are the upper limit on frequency.  This is related to the THERMAL_THROTTLE CYCLES_ABOVE_TEMP event, which always counts cycles when we are above the thermal temperature.  This event (STRONGEST_UPPER_LIMIT) is sampled at the output of the algorithm that determines the actual frequency, while THERMAL_THROTTLE looks at the input"
unc_p_freq_max_os_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x6/,,OS Strongest Upper Limit Cycles. Unit: uncore_pcu ,Counts the number of cycles when the OS is the upper limit on frequency
unc_p_freq_max_power_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x5/,,Power Strongest Upper Limit Cycles. Unit: uncore_pcu ,Counts the number of cycles when power is the upper limit on frequency
unc_p_freq_min_io_p_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x73/,,IO P Limit Strongest Lower Limit Cycles. Unit: uncore_pcu ,Counts the number of cycles when IO P Limit is preventing us from dropping the frequency lower.  This algorithm monitors the needs to the IO subsystem on both local and remote sockets and will maintain a frequency high enough to maintain good IO BW.  This is necessary for when all the IA cores on a socket are idle but a user still would like to maintain high IO Bandwidth
unc_p_freq_trans_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x74/,,Cycles spent changing Frequency. Unit: uncore_pcu ,Counts the number of cycles when the system is changing frequency.  This can not be filtered by thread ID.  One can also use it with the occupancy counter that monitors number of threads in C0 to estimate the performance impact that frequency transitions had on the system
unc_p_memory_phase_shedding_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x2f/,,Memory Phase Shedding Cycles. Unit: uncore_pcu ,Counts the number of cycles that the PCU has triggered memory phase shedding.  This is a mode that can be run in the iMC physicals that saves power at the expense of additional latency
unc_p_pkg_residency_c0_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x2a/,,Package C State Residency - C0. Unit: uncore_pcu ,Counts the number of cycles when the package was in C0.  This event can be used in conjunction with edge detect to count C0 entrances (or exits using invert).  Residency events do not include transition times
unc_p_pkg_residency_c1e_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x4e/,,Package C State Residency - C1E. Unit: uncore_pcu ,Counts the number of cycles when the package was in C1E.  This event can be used in conjunction with edge detect to count C1E entrances (or exits using invert).  Residency events do not include transition times
unc_p_pkg_residency_c2e_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x2b/,,Package C State Residency - C2E. Unit: uncore_pcu ,Counts the number of cycles when the package was in C2E.  This event can be used in conjunction with edge detect to count C2E entrances (or exits using invert).  Residency events do not include transition times
unc_p_pkg_residency_c3_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x2c/,,Package C State Residency - C3. Unit: uncore_pcu ,Counts the number of cycles when the package was in C3.  This event can be used in conjunction with edge detect to count C3 entrances (or exits using invert).  Residency events do not include transition times
unc_p_pkg_residency_c6_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x2d/,,Package C State Residency - C6. Unit: uncore_pcu ,Counts the number of cycles when the package was in C6.  This event can be used in conjunction with edge detect to count C6 entrances (or exits using invert).  Residency events do not include transition times
unc_p_pkg_residency_c7_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x2e/,,Package C7 State Residency. Unit: uncore_pcu ,Counts the number of cycles when the package was in C7.  This event can be used in conjunction with edge detect to count C7 entrances (or exits using invert).  Residency events do not include transition times
unc_p_power_state_occupancy.cores_c0,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x80/,,Number of cores in C-State; C0 and C1. Unit: uncore_pcu ,"This is an occupancy event that tracks the number of cores that are in the chosen C-State.  It can be used by itself to get the average number of cores in that C-state with thresholding to generate histograms, or with other PCU events and occupancy triggering to capture other details"
unc_p_power_state_occupancy.cores_c3,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x80/,,Number of cores in C-State; C3. Unit: uncore_pcu ,"This is an occupancy event that tracks the number of cores that are in the chosen C-State.  It can be used by itself to get the average number of cores in that C-state with thresholding to generate histograms, or with other PCU events and occupancy triggering to capture other details"
unc_p_power_state_occupancy.cores_c6,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x80/,,Number of cores in C-State; C6 and C7. Unit: uncore_pcu ,"This is an occupancy event that tracks the number of cores that are in the chosen C-State.  It can be used by itself to get the average number of cores in that C-state with thresholding to generate histograms, or with other PCU events and occupancy triggering to capture other details"
unc_p_prochot_external_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0xa/,,External Prochot. Unit: uncore_pcu ,Counts the number of cycles that we are in external PROCHOT mode.  This mode is triggered when a sensor off the die determines that something off-die (like DRAM) is too hot and must throttle to avoid damaging the chip
unc_p_prochot_internal_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x9/,,Internal Prochot. Unit: uncore_pcu ,Counts the number of cycles that we are in Internal PROCHOT mode.  This mode is triggered when a sensor on the die determines that we are too hot and must throttle to avoid damaging the chip
unc_p_total_transition_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x72/,,Total Core C State Transition Cycles. Unit: uncore_pcu ,Number of cycles spent performing core C state transitions across all cores
unc_p_ufs_transitions_no_change,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x79/,,UNC_P_UFS_TRANSITIONS_NO_CHANGE. Unit: uncore_pcu ,Ring GV with same final and initial frequency
unc_p_ufs_transitions_ring_gv,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x79/,,UNC_P_UFS_TRANSITIONS_RING_GV. Unit: uncore_pcu ,Ring GV with same final and initial frequency
unc_p_vr_hot_cycles,,Kernel PMU event,uncore_pcu,uncore power,uncore_pcu/event=0x42/,,VR Hot. Unit: uncore_pcu ,VR Hot : Number of cycles that a CPU SVID VR is hot.  Does not cover DRAM VRs
dtlb_load_misses.miss_causes_a_walk,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x186a3,umask=0x1/",,Load misses in all DTLB levels that cause page walks,Misses in all TLB levels that cause a page walk of any page size
dtlb_load_misses.pde_cache_miss,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x186a3,umask=0x80/",,DTLB demand load misses with low part of linear-to-physical address translation missed,DTLB demand load misses with low part of linear-to-physical address translation missed
dtlb_load_misses.stlb_hit,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x1e8483,umask=0x60/",,Load operations that miss the first DTLB level but hit the second and do not cause page walks,Number of cache load STLB hits. No page walk
dtlb_load_misses.stlb_hit_2m,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x1e8483,umask=0x40/",,Load misses that miss the  DTLB and hit the STLB (2M),This event counts load operations from a 2M page that miss the first DTLB level but hit the second and do not cause page walks
dtlb_load_misses.stlb_hit_4k,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x1e8483,umask=0x20/",,Load misses that miss the  DTLB and hit the STLB (4K),This event counts load operations from a 4K page that miss the first DTLB level but hit the second and do not cause page walks
dtlb_load_misses.walk_completed,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x186a3,umask=0xe/",,Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes of any page size,Completed page walks in any TLB of any page size due to demand load misses
dtlb_load_misses.walk_completed_1g,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x1e8483,umask=0x8/",,Load miss in all TLB levels causes a page walk that completes. (1G),Load miss in all TLB levels causes a page walk that completes. (1G)
dtlb_load_misses.walk_completed_2m_4m,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x1e8483,umask=0x4/",,Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (2M/4M),Completed page walks due to demand load misses that caused 2M/4M page walks in any TLB levels
dtlb_load_misses.walk_completed_4k,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x1e8483,umask=0x2/",,Demand load Miss in all translation lookaside buffer (TLB) levels causes a page walk that completes (4K),Completed page walks due to demand load misses that caused 4K page walks in any TLB levels
dtlb_load_misses.walk_duration,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x8,period=0x1e8483,umask=0x10/",,Cycles when PMH is busy with page walks,This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by DTLB load misses
dtlb_store_misses.miss_causes_a_walk,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x1/",,Store misses in all DTLB levels that cause page walks,Miss in all TLB levels causes a page walk of any page size (4K/2M/4M/1G)
dtlb_store_misses.pde_cache_miss,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x80/",,DTLB store misses with low part of linear-to-physical address translation missed,DTLB store misses with low part of linear-to-physical address translation missed
dtlb_store_misses.stlb_hit,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x60/",,Store operations that miss the first TLB level but hit the second and do not cause page walks,Store operations that miss the first TLB level but hit the second and do not cause page walks
dtlb_store_misses.stlb_hit_2m,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x40/",,Store misses that miss the  DTLB and hit the STLB (2M),This event counts store operations from a 2M page that miss the first DTLB level but hit the second and do not cause page walks
dtlb_store_misses.stlb_hit_4k,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x20/",,Store misses that miss the  DTLB and hit the STLB (4K),This event counts store operations from a 4K page that miss the first DTLB level but hit the second and do not cause page walks
dtlb_store_misses.walk_completed,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0xe/",,Store misses in all DTLB levels that cause completed page walks,Completed page walks due to store miss in any TLB levels of any page size (4K/2M/4M/1G)
dtlb_store_misses.walk_completed_1g,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x8/",,Store misses in all DTLB levels that cause completed page walks. (1G),Store misses in all DTLB levels that cause completed page walks. (1G)
dtlb_store_misses.walk_completed_2m_4m,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x4/",,Store misses in all DTLB levels that cause completed page walks (2M/4M),Completed page walks due to store misses in one or more TLB levels of 2M/4M page structure
dtlb_store_misses.walk_completed_4k,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x2/",,Store miss in all TLB levels causes a page walk that completes. (4K),Completed page walks due to store misses in one or more TLB levels of 4K page structure
dtlb_store_misses.walk_duration,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x49,period=0x186a3,umask=0x10/",,Cycles when PMH is busy with page walks,This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by DTLB store misses
ept.walk_cycles,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x4f,period=0x1e8483,umask=0x10/",,Cycle count for an Extended Page table walk,Cycle count for an Extended Page table walk
itlb.itlb_flush,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xae,period=0x186a3,umask=0x1/",,"Flushing of the Instruction TLB (ITLB) pages, includes 4k/2M/4M pages","Counts the number of ITLB flushes, includes 4k/2M/4M pages"
itlb_misses.miss_causes_a_walk,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x1/",,Misses at all ITLB levels that cause page walks,Misses in ITLB that causes a page walk of any page size
itlb_misses.stlb_hit,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x60/",,Operations that miss the first ITLB level but hit the second and do not cause any page walks,ITLB misses that hit STLB. No page walk
itlb_misses.stlb_hit_2m,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x40/",,Code misses that miss the  DTLB and hit the STLB (2M),ITLB misses that hit STLB (2M)
itlb_misses.stlb_hit_4k,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x20/",,Core misses that miss the  DTLB and hit the STLB (4K),ITLB misses that hit STLB (4K)
itlb_misses.walk_completed,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0xe/",,Misses in all ITLB levels that cause completed page walks,Completed page walks in ITLB of any page size
itlb_misses.walk_completed_1g,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x8/",,Store miss in all TLB levels causes a page walk that completes. (1G),Store miss in all TLB levels causes a page walk that completes. (1G)
itlb_misses.walk_completed_2m_4m,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x4/",,Code miss in all TLB levels causes a page walk that completes. (2M/4M),Completed page walks due to misses in ITLB 2M/4M page entries
itlb_misses.walk_completed_4k,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x2/",,Code miss in all TLB levels causes a page walk that completes. (4K),Completed page walks due to misses in ITLB 4K page entries
itlb_misses.walk_duration,,Kernel PMU event,cpu,virtual memory,"cpu/event=0x85,period=0x186a3,umask=0x10/",,Cycles when PMH is busy with page walks,This event counts cycles when the  page miss handler (PMH) is servicing page walks caused by ITLB misses
page_walker_loads.dtlb_l1,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x11/",,Number of DTLB page walker hits in the L1+FB,Number of DTLB page walker loads that hit in the L1+FB
page_walker_loads.dtlb_l2,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x12/",,Number of DTLB page walker hits in the L2,Number of DTLB page walker loads that hit in the L2
page_walker_loads.dtlb_l3,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x14/",,Number of DTLB page walker hits in the L3 + XSNP  Spec update: HSD25,Number of DTLB page walker loads that hit in the L3  Spec update: HSD25
page_walker_loads.dtlb_memory,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x18/",,Number of DTLB page walker hits in Memory  Spec update: HSD25,Number of DTLB page walker loads from memory  Spec update: HSD25
page_walker_loads.ept_dtlb_l1,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x41/",,Counts the number of Extended Page Table walks from the DTLB that hit in the L1 and FB,Counts the number of Extended Page Table walks from the DTLB that hit in the L1 and FB
page_walker_loads.ept_dtlb_l2,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x42/",,Counts the number of Extended Page Table walks from the DTLB that hit in the L2,Counts the number of Extended Page Table walks from the DTLB that hit in the L2
page_walker_loads.ept_dtlb_l3,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x44/",,Counts the number of Extended Page Table walks from the DTLB that hit in the L3,Counts the number of Extended Page Table walks from the DTLB that hit in the L3
page_walker_loads.ept_dtlb_memory,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x48/",,Counts the number of Extended Page Table walks from the DTLB that hit in memory,Counts the number of Extended Page Table walks from the DTLB that hit in memory
page_walker_loads.ept_itlb_l1,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x81/",,Counts the number of Extended Page Table walks from the ITLB that hit in the L1 and FB,Counts the number of Extended Page Table walks from the ITLB that hit in the L1 and FB
page_walker_loads.ept_itlb_l2,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x82/",,Counts the number of Extended Page Table walks from the ITLB that hit in the L2,Counts the number of Extended Page Table walks from the ITLB that hit in the L2
page_walker_loads.ept_itlb_l3,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x84/",,Counts the number of Extended Page Table walks from the ITLB that hit in the L2,Counts the number of Extended Page Table walks from the ITLB that hit in the L2
page_walker_loads.ept_itlb_memory,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x88/",,Counts the number of Extended Page Table walks from the ITLB that hit in memory,Counts the number of Extended Page Table walks from the ITLB that hit in memory
page_walker_loads.itlb_l1,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x21/",,Number of ITLB page walker hits in the L1+FB,Number of ITLB page walker loads that hit in the L1+FB
page_walker_loads.itlb_l2,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x22/",,Number of ITLB page walker hits in the L2,Number of ITLB page walker loads that hit in the L2
page_walker_loads.itlb_l3,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x24/",,Number of ITLB page walker hits in the L3 + XSNP  Spec update: HSD25,Number of ITLB page walker loads that hit in the L3  Spec update: HSD25
page_walker_loads.itlb_memory,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbc,period=0x1e8483,umask=0x28/",,Number of ITLB page walker hits in Memory  Spec update: HSD25,Number of ITLB page walker loads from memory  Spec update: HSD25
tlb_flush.dtlb_thread,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbd,period=0x186a3,umask=0x1/",,DTLB flush attempts of the thread-specific entries,DTLB flush attempts of the thread-specific entries
tlb_flush.stlb_any,,Kernel PMU event,cpu,virtual memory,"cpu/event=0xbd,period=0x186a3,umask=0x20/",,STLB flush attempts,Count number of STLB flush attempts
rNNN,,Raw hardware event descriptor,,,,,,
"cpu/t1=v1[,t2=v2,t3 ...]/modifier",,Raw hardware event descriptor,,,,,(see 'man perf-list' on how to encode it),
mem:<addr>[/len][:access],,Hardware breakpoint,,,,,,
alarmtimer:alarmtimer_cancel,,Tracepoint event,,,,,,
alarmtimer:alarmtimer_fired,,Tracepoint event,,,,,,
alarmtimer:alarmtimer_start,,Tracepoint event,,,,,,
alarmtimer:alarmtimer_suspend,,Tracepoint event,,,,,,
amd_cpu:amd_pstate_perf,,Tracepoint event,,,,,,
avc:selinux_audited,,Tracepoint event,,,,,,
block:block_bio_backmerge,,Tracepoint event,,,,,,
block:block_bio_bounce,,Tracepoint event,,,,,,
block:block_bio_complete,,Tracepoint event,,,,,,
block:block_bio_frontmerge,,Tracepoint event,,,,,,
block:block_bio_queue,,Tracepoint event,,,,,,
block:block_bio_remap,,Tracepoint event,,,,,,
block:block_dirty_buffer,,Tracepoint event,,,,,,
block:block_getrq,,Tracepoint event,,,,,,
block:block_io_done,,Tracepoint event,,,,,,
block:block_io_start,,Tracepoint event,,,,,,
block:block_plug,,Tracepoint event,,,,,,
block:block_rq_complete,,Tracepoint event,,,,,,
block:block_rq_error,,Tracepoint event,,,,,,
block:block_rq_insert,,Tracepoint event,,,,,,
block:block_rq_issue,,Tracepoint event,,,,,,
block:block_rq_merge,,Tracepoint event,,,,,,
block:block_rq_remap,,Tracepoint event,,,,,,
block:block_rq_requeue,,Tracepoint event,,,,,,
block:block_split,,Tracepoint event,,,,,,
block:block_touch_buffer,,Tracepoint event,,,,,,
block:block_unplug,,Tracepoint event,,,,,,
bpf_test_run:bpf_test_finish,,Tracepoint event,,,,,,
bpf_trace:bpf_trace_printk,,Tracepoint event,,,,,,
bridge:br_fdb_add,,Tracepoint event,,,,,,
bridge:br_fdb_external_learn_add,,Tracepoint event,,,,,,
bridge:br_fdb_update,,Tracepoint event,,,,,,
bridge:br_mdb_full,,Tracepoint event,,,,,,
bridge:fdb_delete,,Tracepoint event,,,,,,
cgroup:cgroup_attach_task,,Tracepoint event,,,,,,
cgroup:cgroup_destroy_root,,Tracepoint event,,,,,,
cgroup:cgroup_freeze,,Tracepoint event,,,,,,
cgroup:cgroup_mkdir,,Tracepoint event,,,,,,
cgroup:cgroup_notify_frozen,,Tracepoint event,,,,,,
cgroup:cgroup_notify_populated,,Tracepoint event,,,,,,
cgroup:cgroup_release,,Tracepoint event,,,,,,
cgroup:cgroup_remount,,Tracepoint event,,,,,,
cgroup:cgroup_rename,,Tracepoint event,,,,,,
cgroup:cgroup_rmdir,,Tracepoint event,,,,,,
cgroup:cgroup_setup_root,,Tracepoint event,,,,,,
cgroup:cgroup_transfer_tasks,,Tracepoint event,,,,,,
cgroup:cgroup_unfreeze,,Tracepoint event,,,,,,
clk:clk_disable,,Tracepoint event,,,,,,
clk:clk_disable_complete,,Tracepoint event,,,,,,
clk:clk_enable,,Tracepoint event,,,,,,
clk:clk_enable_complete,,Tracepoint event,,,,,,
clk:clk_prepare,,Tracepoint event,,,,,,
clk:clk_prepare_complete,,Tracepoint event,,,,,,
clk:clk_rate_request_done,,Tracepoint event,,,,,,
clk:clk_rate_request_start,,Tracepoint event,,,,,,
clk:clk_set_duty_cycle,,Tracepoint event,,,,,,
clk:clk_set_duty_cycle_complete,,Tracepoint event,,,,,,
clk:clk_set_max_rate,,Tracepoint event,,,,,,
clk:clk_set_min_rate,,Tracepoint event,,,,,,
clk:clk_set_parent,,Tracepoint event,,,,,,
clk:clk_set_parent_complete,,Tracepoint event,,,,,,
clk:clk_set_phase,,Tracepoint event,,,,,,
clk:clk_set_phase_complete,,Tracepoint event,,,,,,
clk:clk_set_rate,,Tracepoint event,,,,,,
clk:clk_set_rate_complete,,Tracepoint event,,,,,,
clk:clk_set_rate_range,,Tracepoint event,,,,,,
clk:clk_unprepare,,Tracepoint event,,,,,,
clk:clk_unprepare_complete,,Tracepoint event,,,,,,
compaction:mm_compaction_begin,,Tracepoint event,,,,,,
compaction:mm_compaction_defer_compaction,,Tracepoint event,,,,,,
compaction:mm_compaction_defer_reset,,Tracepoint event,,,,,,
compaction:mm_compaction_deferred,,Tracepoint event,,,,,,
compaction:mm_compaction_end,,Tracepoint event,,,,,,
compaction:mm_compaction_fast_isolate_freepages,,Tracepoint event,,,,,,
compaction:mm_compaction_finished,,Tracepoint event,,,,,,
compaction:mm_compaction_isolate_freepages,,Tracepoint event,,,,,,
compaction:mm_compaction_isolate_migratepages,,Tracepoint event,,,,,,
compaction:mm_compaction_kcompactd_sleep,,Tracepoint event,,,,,,
compaction:mm_compaction_kcompactd_wake,,Tracepoint event,,,,,,
compaction:mm_compaction_migratepages,,Tracepoint event,,,,,,
compaction:mm_compaction_suitable,,Tracepoint event,,,,,,
compaction:mm_compaction_try_to_compact_pages,,Tracepoint event,,,,,,
compaction:mm_compaction_wakeup_kcompactd,,Tracepoint event,,,,,,
cpuhp:cpuhp_enter,,Tracepoint event,,,,,,
cpuhp:cpuhp_exit,,Tracepoint event,,,,,,
cpuhp:cpuhp_multi_enter,,Tracepoint event,,,,,,
cros_ec:cros_ec_request_done,,Tracepoint event,,,,,,
cros_ec:cros_ec_request_start,,Tracepoint event,,,,,,
csd:csd_function_entry,,Tracepoint event,,,,,,
csd:csd_function_exit,,Tracepoint event,,,,,,
csd:csd_queue_cpu,,Tracepoint event,,,,,,
dev:devres_log,,Tracepoint event,,,,,,
devfreq:devfreq_frequency,,Tracepoint event,,,,,,
devfreq:devfreq_monitor,,Tracepoint event,,,,,,
devlink:devlink_health_recover_aborted,,Tracepoint event,,,,,,
devlink:devlink_health_report,,Tracepoint event,,,,,,
devlink:devlink_health_reporter_state_update,,Tracepoint event,,,,,,
devlink:devlink_hwerr,,Tracepoint event,,,,,,
devlink:devlink_hwmsg,,Tracepoint event,,,,,,
devlink:devlink_trap_report,,Tracepoint event,,,,,,
dma_fence:dma_fence_destroy,,Tracepoint event,,,,,,
dma_fence:dma_fence_emit,,Tracepoint event,,,,,,
dma_fence:dma_fence_enable_signal,,Tracepoint event,,,,,,
dma_fence:dma_fence_init,,Tracepoint event,,,,,,
dma_fence:dma_fence_signaled,,Tracepoint event,,,,,,
dma_fence:dma_fence_wait_end,,Tracepoint event,,,,,,
dma_fence:dma_fence_wait_start,,Tracepoint event,,,,,,
drm:drm_vblank_event,,Tracepoint event,,,,,,
drm:drm_vblank_event_delivered,,Tracepoint event,,,,,,
drm:drm_vblank_event_queued,,Tracepoint event,,,,,,
error_report:error_report_end,,Tracepoint event,,,,,,
exceptions:page_fault_kernel,,Tracepoint event,,,,,,
exceptions:page_fault_user,,Tracepoint event,,,,,,
ext4:ext4_alloc_da_blocks,,Tracepoint event,,,,,,
ext4:ext4_allocate_blocks,,Tracepoint event,,,,,,
ext4:ext4_allocate_inode,,Tracepoint event,,,,,,
ext4:ext4_begin_ordered_truncate,,Tracepoint event,,,,,,
ext4:ext4_collapse_range,,Tracepoint event,,,,,,
ext4:ext4_da_release_space,,Tracepoint event,,,,,,
ext4:ext4_da_reserve_space,,Tracepoint event,,,,,,
ext4:ext4_da_update_reserve_space,,Tracepoint event,,,,,,
ext4:ext4_da_write_begin,,Tracepoint event,,,,,,
ext4:ext4_da_write_end,,Tracepoint event,,,,,,
ext4:ext4_da_write_pages,,Tracepoint event,,,,,,
ext4:ext4_da_write_pages_extent,,Tracepoint event,,,,,,
ext4:ext4_discard_blocks,,Tracepoint event,,,,,,
ext4:ext4_discard_preallocations,,Tracepoint event,,,,,,
ext4:ext4_drop_inode,,Tracepoint event,,,,,,
ext4:ext4_error,,Tracepoint event,,,,,,
ext4:ext4_es_cache_extent,,Tracepoint event,,,,,,
ext4:ext4_es_find_extent_range_enter,,Tracepoint event,,,,,,
ext4:ext4_es_find_extent_range_exit,,Tracepoint event,,,,,,
ext4:ext4_es_insert_delayed_block,,Tracepoint event,,,,,,
ext4:ext4_es_insert_extent,,Tracepoint event,,,,,,
ext4:ext4_es_lookup_extent_enter,,Tracepoint event,,,,,,
ext4:ext4_es_lookup_extent_exit,,Tracepoint event,,,,,,
ext4:ext4_es_remove_extent,,Tracepoint event,,,,,,
ext4:ext4_es_shrink,,Tracepoint event,,,,,,
ext4:ext4_es_shrink_count,,Tracepoint event,,,,,,
ext4:ext4_es_shrink_scan_enter,,Tracepoint event,,,,,,
ext4:ext4_es_shrink_scan_exit,,Tracepoint event,,,,,,
ext4:ext4_evict_inode,,Tracepoint event,,,,,,
ext4:ext4_ext_convert_to_initialized_enter,,Tracepoint event,,,,,,
ext4:ext4_ext_convert_to_initialized_fastpath,,Tracepoint event,,,,,,
ext4:ext4_ext_handle_unwritten_extents,,Tracepoint event,,,,,,
ext4:ext4_ext_load_extent,,Tracepoint event,,,,,,
ext4:ext4_ext_map_blocks_enter,,Tracepoint event,,,,,,
ext4:ext4_ext_map_blocks_exit,,Tracepoint event,,,,,,
ext4:ext4_ext_remove_space,,Tracepoint event,,,,,,
ext4:ext4_ext_remove_space_done,,Tracepoint event,,,,,,
ext4:ext4_ext_rm_idx,,Tracepoint event,,,,,,
ext4:ext4_ext_rm_leaf,,Tracepoint event,,,,,,
ext4:ext4_ext_show_extent,,Tracepoint event,,,,,,
ext4:ext4_fallocate_enter,,Tracepoint event,,,,,,
ext4:ext4_fallocate_exit,,Tracepoint event,,,,,,
ext4:ext4_fc_cleanup,,Tracepoint event,,,,,,
ext4:ext4_fc_commit_start,,Tracepoint event,,,,,,
ext4:ext4_fc_commit_stop,,Tracepoint event,,,,,,
ext4:ext4_fc_replay,,Tracepoint event,,,,,,
ext4:ext4_fc_replay_scan,,Tracepoint event,,,,,,
ext4:ext4_fc_stats,,Tracepoint event,,,,,,
ext4:ext4_fc_track_create,,Tracepoint event,,,,,,
ext4:ext4_fc_track_inode,,Tracepoint event,,,,,,
ext4:ext4_fc_track_link,,Tracepoint event,,,,,,
ext4:ext4_fc_track_range,,Tracepoint event,,,,,,
ext4:ext4_fc_track_unlink,,Tracepoint event,,,,,,
ext4:ext4_forget,,Tracepoint event,,,,,,
ext4:ext4_free_blocks,,Tracepoint event,,,,,,
ext4:ext4_free_inode,,Tracepoint event,,,,,,
ext4:ext4_fsmap_high_key,,Tracepoint event,,,,,,
ext4:ext4_fsmap_low_key,,Tracepoint event,,,,,,
ext4:ext4_fsmap_mapping,,Tracepoint event,,,,,,
ext4:ext4_get_implied_cluster_alloc_exit,,Tracepoint event,,,,,,
ext4:ext4_getfsmap_high_key,,Tracepoint event,,,,,,
ext4:ext4_getfsmap_low_key,,Tracepoint event,,,,,,
ext4:ext4_getfsmap_mapping,,Tracepoint event,,,,,,
ext4:ext4_ind_map_blocks_enter,,Tracepoint event,,,,,,
ext4:ext4_ind_map_blocks_exit,,Tracepoint event,,,,,,
ext4:ext4_insert_range,,Tracepoint event,,,,,,
ext4:ext4_invalidate_folio,,Tracepoint event,,,,,,
ext4:ext4_journal_start_inode,,Tracepoint event,,,,,,
ext4:ext4_journal_start_reserved,,Tracepoint event,,,,,,
ext4:ext4_journal_start_sb,,Tracepoint event,,,,,,
ext4:ext4_journalled_invalidate_folio,,Tracepoint event,,,,,,
ext4:ext4_journalled_write_end,,Tracepoint event,,,,,,
ext4:ext4_lazy_itable_init,,Tracepoint event,,,,,,
ext4:ext4_load_inode,,Tracepoint event,,,,,,
ext4:ext4_load_inode_bitmap,,Tracepoint event,,,,,,
ext4:ext4_mark_inode_dirty,,Tracepoint event,,,,,,
ext4:ext4_mb_bitmap_load,,Tracepoint event,,,,,,
ext4:ext4_mb_buddy_bitmap_load,,Tracepoint event,,,,,,
ext4:ext4_mb_discard_preallocations,,Tracepoint event,,,,,,
ext4:ext4_mb_new_group_pa,,Tracepoint event,,,,,,
ext4:ext4_mb_new_inode_pa,,Tracepoint event,,,,,,
ext4:ext4_mb_release_group_pa,,Tracepoint event,,,,,,
ext4:ext4_mb_release_inode_pa,,Tracepoint event,,,,,,
ext4:ext4_mballoc_alloc,,Tracepoint event,,,,,,
ext4:ext4_mballoc_discard,,Tracepoint event,,,,,,
ext4:ext4_mballoc_free,,Tracepoint event,,,,,,
ext4:ext4_mballoc_prealloc,,Tracepoint event,,,,,,
ext4:ext4_nfs_commit_metadata,,Tracepoint event,,,,,,
ext4:ext4_other_inode_update_time,,Tracepoint event,,,,,,
ext4:ext4_prefetch_bitmaps,,Tracepoint event,,,,,,
ext4:ext4_punch_hole,,Tracepoint event,,,,,,
ext4:ext4_read_block_bitmap_load,,Tracepoint event,,,,,,
ext4:ext4_read_folio,,Tracepoint event,,,,,,
ext4:ext4_release_folio,,Tracepoint event,,,,,,
ext4:ext4_remove_blocks,,Tracepoint event,,,,,,
ext4:ext4_request_blocks,,Tracepoint event,,,,,,
ext4:ext4_request_inode,,Tracepoint event,,,,,,
ext4:ext4_shutdown,,Tracepoint event,,,,,,
ext4:ext4_sync_file_enter,,Tracepoint event,,,,,,
ext4:ext4_sync_file_exit,,Tracepoint event,,,,,,
ext4:ext4_sync_fs,,Tracepoint event,,,,,,
ext4:ext4_trim_all_free,,Tracepoint event,,,,,,
ext4:ext4_trim_extent,,Tracepoint event,,,,,,
ext4:ext4_truncate_enter,,Tracepoint event,,,,,,
ext4:ext4_truncate_exit,,Tracepoint event,,,,,,
ext4:ext4_unlink_enter,,Tracepoint event,,,,,,
ext4:ext4_unlink_exit,,Tracepoint event,,,,,,
ext4:ext4_update_sb,,Tracepoint event,,,,,,
ext4:ext4_write_begin,,Tracepoint event,,,,,,
ext4:ext4_write_end,,Tracepoint event,,,,,,
ext4:ext4_writepages,,Tracepoint event,,,,,,
ext4:ext4_writepages_result,,Tracepoint event,,,,,,
ext4:ext4_zero_range,,Tracepoint event,,,,,,
fib:fib_table_lookup,,Tracepoint event,,,,,,
fib6:fib6_table_lookup,,Tracepoint event,,,,,,
filelock:break_lease_block,,Tracepoint event,,,,,,
filelock:break_lease_noblock,,Tracepoint event,,,,,,
filelock:break_lease_unblock,,Tracepoint event,,,,,,
filelock:fcntl_setlk,,Tracepoint event,,,,,,
filelock:flock_lock_inode,,Tracepoint event,,,,,,
filelock:generic_add_lease,,Tracepoint event,,,,,,
filelock:generic_delete_lease,,Tracepoint event,,,,,,
filelock:leases_conflict,,Tracepoint event,,,,,,
filelock:locks_get_lock_context,,Tracepoint event,,,,,,
filelock:locks_remove_posix,,Tracepoint event,,,,,,
filelock:posix_lock_inode,,Tracepoint event,,,,,,
filelock:time_out_leases,,Tracepoint event,,,,,,
filemap:file_check_and_advance_wb_err,,Tracepoint event,,,,,,
filemap:filemap_set_wb_err,,Tracepoint event,,,,,,
filemap:mm_filemap_add_to_page_cache,,Tracepoint event,,,,,,
filemap:mm_filemap_delete_from_page_cache,,Tracepoint event,,,,,,
fs_dax:dax_insert_mapping,,Tracepoint event,,,,,,
fs_dax:dax_insert_pfn_mkwrite,,Tracepoint event,,,,,,
fs_dax:dax_insert_pfn_mkwrite_no_entry,,Tracepoint event,,,,,,
fs_dax:dax_load_hole,,Tracepoint event,,,,,,
fs_dax:dax_pmd_fault,,Tracepoint event,,,,,,
fs_dax:dax_pmd_fault_done,,Tracepoint event,,,,,,
fs_dax:dax_pmd_insert_mapping,,Tracepoint event,,,,,,
fs_dax:dax_pmd_load_hole,,Tracepoint event,,,,,,
fs_dax:dax_pmd_load_hole_fallback,,Tracepoint event,,,,,,
fs_dax:dax_pte_fault,,Tracepoint event,,,,,,
fs_dax:dax_pte_fault_done,,Tracepoint event,,,,,,
fs_dax:dax_writeback_one,,Tracepoint event,,,,,,
fs_dax:dax_writeback_range,,Tracepoint event,,,,,,
fs_dax:dax_writeback_range_done,,Tracepoint event,,,,,,
fscache:fscache_access,,Tracepoint event,,,,,,
fscache:fscache_access_cache,,Tracepoint event,,,,,,
fscache:fscache_access_volume,,Tracepoint event,,,,,,
fscache:fscache_acquire,,Tracepoint event,,,,,,
fscache:fscache_active,,Tracepoint event,,,,,,
fscache:fscache_cache,,Tracepoint event,,,,,,
fscache:fscache_cookie,,Tracepoint event,,,,,,
fscache:fscache_invalidate,,Tracepoint event,,,,,,
fscache:fscache_relinquish,,Tracepoint event,,,,,,
fscache:fscache_resize,,Tracepoint event,,,,,,
fscache:fscache_volume,,Tracepoint event,,,,,,
ftrace:function,,Tracepoint event,,,,,,
ftrace:print,,Tracepoint event,,,,,,
gpio:gpio_direction,,Tracepoint event,,,,,,
gpio:gpio_value,,Tracepoint event,,,,,,
handshake:handshake_cancel,,Tracepoint event,,,,,,
handshake:handshake_cancel_busy,,Tracepoint event,,,,,,
handshake:handshake_cancel_none,,Tracepoint event,,,,,,
handshake:handshake_cmd_accept,,Tracepoint event,,,,,,
handshake:handshake_cmd_accept_err,,Tracepoint event,,,,,,
handshake:handshake_cmd_done,,Tracepoint event,,,,,,
handshake:handshake_cmd_done_err,,Tracepoint event,,,,,,
handshake:handshake_complete,,Tracepoint event,,,,,,
handshake:handshake_destruct,,Tracepoint event,,,,,,
handshake:handshake_notify_err,,Tracepoint event,,,,,,
handshake:handshake_submit,,Tracepoint event,,,,,,
handshake:handshake_submit_err,,Tracepoint event,,,,,,
huge_memory:mm_collapse_huge_page,,Tracepoint event,,,,,,
huge_memory:mm_collapse_huge_page_isolate,,Tracepoint event,,,,,,
huge_memory:mm_collapse_huge_page_swapin,,Tracepoint event,,,,,,
huge_memory:mm_khugepaged_collapse_file,,Tracepoint event,,,,,,
huge_memory:mm_khugepaged_scan_file,,Tracepoint event,,,,,,
huge_memory:mm_khugepaged_scan_pmd,,Tracepoint event,,,,,,
hwmon:hwmon_attr_show,,Tracepoint event,,,,,,
hwmon:hwmon_attr_show_string,,Tracepoint event,,,,,,
hwmon:hwmon_attr_store,,Tracepoint event,,,,,,
hyperv:hyperv_mmu_flush_tlb_multi,,Tracepoint event,,,,,,
hyperv:hyperv_nested_flush_guest_mapping,,Tracepoint event,,,,,,
hyperv:hyperv_nested_flush_guest_mapping_range,,Tracepoint event,,,,,,
hyperv:hyperv_send_ipi_mask,,Tracepoint event,,,,,,
hyperv:hyperv_send_ipi_one,,Tracepoint event,,,,,,
i2c:i2c_read,,Tracepoint event,,,,,,
i2c:i2c_reply,,Tracepoint event,,,,,,
i2c:i2c_result,,Tracepoint event,,,,,,
i2c:i2c_write,,Tracepoint event,,,,,,
initcall:initcall_finish,,Tracepoint event,,,,,,
initcall:initcall_level,,Tracepoint event,,,,,,
initcall:initcall_start,,Tracepoint event,,,,,,
intel_iommu:prq_report,,Tracepoint event,,,,,,
intel_iommu:qi_submit,,Tracepoint event,,,,,,
interconnect:icc_set_bw,,Tracepoint event,,,,,,
interconnect:icc_set_bw_end,,Tracepoint event,,,,,,
io_uring:io_uring_complete,,Tracepoint event,,,,,,
io_uring:io_uring_cqe_overflow,,Tracepoint event,,,,,,
io_uring:io_uring_cqring_wait,,Tracepoint event,,,,,,
io_uring:io_uring_create,,Tracepoint event,,,,,,
io_uring:io_uring_defer,,Tracepoint event,,,,,,
io_uring:io_uring_fail_link,,Tracepoint event,,,,,,
io_uring:io_uring_file_get,,Tracepoint event,,,,,,
io_uring:io_uring_link,,Tracepoint event,,,,,,
io_uring:io_uring_local_work_run,,Tracepoint event,,,,,,
io_uring:io_uring_poll_arm,,Tracepoint event,,,,,,
io_uring:io_uring_queue_async_work,,Tracepoint event,,,,,,
io_uring:io_uring_register,,Tracepoint event,,,,,,
io_uring:io_uring_req_failed,,Tracepoint event,,,,,,
io_uring:io_uring_short_write,,Tracepoint event,,,,,,
io_uring:io_uring_submit_req,,Tracepoint event,,,,,,
io_uring:io_uring_task_add,,Tracepoint event,,,,,,
io_uring:io_uring_task_work_run,,Tracepoint event,,,,,,
iocost:iocost_inuse_adjust,,Tracepoint event,,,,,,
iocost:iocost_inuse_shortage,,Tracepoint event,,,,,,
iocost:iocost_inuse_transfer,,Tracepoint event,,,,,,
iocost:iocost_ioc_vrate_adj,,Tracepoint event,,,,,,
iocost:iocost_iocg_activate,,Tracepoint event,,,,,,
iocost:iocost_iocg_forgive_debt,,Tracepoint event,,,,,,
iocost:iocost_iocg_idle,,Tracepoint event,,,,,,
iomap:iomap_dio_complete,,Tracepoint event,,,,,,
iomap:iomap_dio_invalidate_fail,,Tracepoint event,,,,,,
iomap:iomap_dio_rw_begin,,Tracepoint event,,,,,,
iomap:iomap_dio_rw_queued,,Tracepoint event,,,,,,
iomap:iomap_invalidate_folio,,Tracepoint event,,,,,,
iomap:iomap_iter,,Tracepoint event,,,,,,
iomap:iomap_iter_dstmap,,Tracepoint event,,,,,,
iomap:iomap_iter_srcmap,,Tracepoint event,,,,,,
iomap:iomap_readahead,,Tracepoint event,,,,,,
iomap:iomap_readpage,,Tracepoint event,,,,,,
iomap:iomap_release_folio,,Tracepoint event,,,,,,
iomap:iomap_writepage,,Tracepoint event,,,,,,
iomap:iomap_writepage_map,,Tracepoint event,,,,,,
iommu:add_device_to_group,,Tracepoint event,,,,,,
iommu:attach_device_to_domain,,Tracepoint event,,,,,,
iommu:io_page_fault,,Tracepoint event,,,,,,
iommu:map,,Tracepoint event,,,,,,
iommu:remove_device_from_group,,Tracepoint event,,,,,,
iommu:unmap,,Tracepoint event,,,,,,
ipi:ipi_entry,,Tracepoint event,,,,,,
ipi:ipi_exit,,Tracepoint event,,,,,,
ipi:ipi_raise,,Tracepoint event,,,,,,
ipi:ipi_send_cpu,,Tracepoint event,,,,,,
ipi:ipi_send_cpumask,,Tracepoint event,,,,,,
irq:irq_handler_entry,,Tracepoint event,,,,,,
irq:irq_handler_exit,,Tracepoint event,,,,,,
irq:softirq_entry,,Tracepoint event,,,,,,
irq:softirq_exit,,Tracepoint event,,,,,,
irq:softirq_raise,,Tracepoint event,,,,,,
irq:tasklet_entry,,Tracepoint event,,,,,,
irq:tasklet_exit,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_alloc,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_alloc_managed,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_alloc_reserved,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_assign,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_assign_system,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_free,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_offline,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_online,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_remove_managed,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_remove_reserved,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_reserve,,Tracepoint event,,,,,,
irq_matrix:irq_matrix_reserve_managed,,Tracepoint event,,,,,,
irq_vectors:call_function_entry,,Tracepoint event,,,,,,
irq_vectors:call_function_exit,,Tracepoint event,,,,,,
irq_vectors:call_function_single_entry,,Tracepoint event,,,,,,
irq_vectors:call_function_single_exit,,Tracepoint event,,,,,,
irq_vectors:deferred_error_apic_entry,,Tracepoint event,,,,,,
irq_vectors:deferred_error_apic_exit,,Tracepoint event,,,,,,
irq_vectors:error_apic_entry,,Tracepoint event,,,,,,
irq_vectors:error_apic_exit,,Tracepoint event,,,,,,
irq_vectors:irq_work_entry,,Tracepoint event,,,,,,
irq_vectors:irq_work_exit,,Tracepoint event,,,,,,
irq_vectors:local_timer_entry,,Tracepoint event,,,,,,
irq_vectors:local_timer_exit,,Tracepoint event,,,,,,
irq_vectors:reschedule_entry,,Tracepoint event,,,,,,
irq_vectors:reschedule_exit,,Tracepoint event,,,,,,
irq_vectors:spurious_apic_entry,,Tracepoint event,,,,,,
irq_vectors:spurious_apic_exit,,Tracepoint event,,,,,,
irq_vectors:thermal_apic_entry,,Tracepoint event,,,,,,
irq_vectors:thermal_apic_exit,,Tracepoint event,,,,,,
irq_vectors:threshold_apic_entry,,Tracepoint event,,,,,,
irq_vectors:threshold_apic_exit,,Tracepoint event,,,,,,
irq_vectors:vector_activate,,Tracepoint event,,,,,,
irq_vectors:vector_alloc,,Tracepoint event,,,,,,
irq_vectors:vector_alloc_managed,,Tracepoint event,,,,,,
irq_vectors:vector_clear,,Tracepoint event,,,,,,
irq_vectors:vector_config,,Tracepoint event,,,,,,
irq_vectors:vector_deactivate,,Tracepoint event,,,,,,
irq_vectors:vector_free_moved,,Tracepoint event,,,,,,
irq_vectors:vector_reserve,,Tracepoint event,,,,,,
irq_vectors:vector_reserve_managed,,Tracepoint event,,,,,,
irq_vectors:vector_setup,,Tracepoint event,,,,,,
irq_vectors:vector_teardown,,Tracepoint event,,,,,,
irq_vectors:vector_update,,Tracepoint event,,,,,,
irq_vectors:x86_platform_ipi_entry,,Tracepoint event,,,,,,
irq_vectors:x86_platform_ipi_exit,,Tracepoint event,,,,,,
jbd2:jbd2_checkpoint,,Tracepoint event,,,,,,
jbd2:jbd2_checkpoint_stats,,Tracepoint event,,,,,,
jbd2:jbd2_commit_flushing,,Tracepoint event,,,,,,
jbd2:jbd2_commit_locking,,Tracepoint event,,,,,,
jbd2:jbd2_commit_logging,,Tracepoint event,,,,,,
jbd2:jbd2_drop_transaction,,Tracepoint event,,,,,,
jbd2:jbd2_end_commit,,Tracepoint event,,,,,,
jbd2:jbd2_handle_extend,,Tracepoint event,,,,,,
jbd2:jbd2_handle_restart,,Tracepoint event,,,,,,
jbd2:jbd2_handle_start,,Tracepoint event,,,,,,
jbd2:jbd2_handle_stats,,Tracepoint event,,,,,,
jbd2:jbd2_lock_buffer_stall,,Tracepoint event,,,,,,
jbd2:jbd2_run_stats,,Tracepoint event,,,,,,
jbd2:jbd2_shrink_checkpoint_list,,Tracepoint event,,,,,,
jbd2:jbd2_shrink_count,,Tracepoint event,,,,,,
jbd2:jbd2_shrink_scan_enter,,Tracepoint event,,,,,,
jbd2:jbd2_shrink_scan_exit,,Tracepoint event,,,,,,
jbd2:jbd2_start_commit,,Tracepoint event,,,,,,
jbd2:jbd2_submit_inode_data,,Tracepoint event,,,,,,
jbd2:jbd2_update_log_tail,,Tracepoint event,,,,,,
jbd2:jbd2_write_superblock,,Tracepoint event,,,,,,
kmem:kfree,,Tracepoint event,,,,,,
kmem:kmalloc,,Tracepoint event,,,,,,
kmem:kmem_cache_alloc,,Tracepoint event,,,,,,
kmem:kmem_cache_free,,Tracepoint event,,,,,,
kmem:mm_page_alloc,,Tracepoint event,,,,,,
kmem:mm_page_alloc_extfrag,,Tracepoint event,,,,,,
kmem:mm_page_alloc_zone_locked,,Tracepoint event,,,,,,
kmem:mm_page_free,,Tracepoint event,,,,,,
kmem:mm_page_free_batched,,Tracepoint event,,,,,,
kmem:mm_page_pcpu_drain,,Tracepoint event,,,,,,
kmem:rss_stat,,Tracepoint event,,,,,,
ksm:ksm_enter,,Tracepoint event,,,,,,
ksm:ksm_exit,,Tracepoint event,,,,,,
ksm:ksm_merge_one_page,,Tracepoint event,,,,,,
ksm:ksm_merge_with_ksm_page,,Tracepoint event,,,,,,
ksm:ksm_remove_ksm_page,,Tracepoint event,,,,,,
ksm:ksm_remove_rmap_item,,Tracepoint event,,,,,,
ksm:ksm_start_scan,,Tracepoint event,,,,,,
ksm:ksm_stop_scan,,Tracepoint event,,,,,,
kvm:kvm_ack_irq,,Tracepoint event,,,,,,
kvm:kvm_age_hva,,Tracepoint event,,,,,,
kvm:kvm_apic,,Tracepoint event,,,,,,
kvm:kvm_apic_accept_irq,,Tracepoint event,,,,,,
kvm:kvm_apic_ipi,,Tracepoint event,,,,,,
kvm:kvm_apicv_accept_irq,,Tracepoint event,,,,,,
kvm:kvm_apicv_inhibit_changed,,Tracepoint event,,,,,,
kvm:kvm_async_pf_completed,,Tracepoint event,,,,,,
kvm:kvm_async_pf_not_present,,Tracepoint event,,,,,,
kvm:kvm_async_pf_ready,,Tracepoint event,,,,,,
kvm:kvm_async_pf_repeated_fault,,Tracepoint event,,,,,,
kvm:kvm_avic_doorbell,,Tracepoint event,,,,,,
kvm:kvm_avic_ga_log,,Tracepoint event,,,,,,
kvm:kvm_avic_incomplete_ipi,,Tracepoint event,,,,,,
kvm:kvm_avic_kick_vcpu_slowpath,,Tracepoint event,,,,,,
kvm:kvm_avic_unaccelerated_access,,Tracepoint event,,,,,,
kvm:kvm_cpuid,,Tracepoint event,,,,,,
kvm:kvm_cr,,Tracepoint event,,,,,,
kvm:kvm_dirty_ring_exit,,Tracepoint event,,,,,,
kvm:kvm_dirty_ring_push,,Tracepoint event,,,,,,
kvm:kvm_dirty_ring_reset,,Tracepoint event,,,,,,
kvm:kvm_emulate_insn,,Tracepoint event,,,,,,
kvm:kvm_entry,,Tracepoint event,,,,,,
kvm:kvm_eoi,,Tracepoint event,,,,,,
kvm:kvm_exit,,Tracepoint event,,,,,,
kvm:kvm_fast_mmio,,Tracepoint event,,,,,,
kvm:kvm_fpu,,Tracepoint event,,,,,,
kvm:kvm_halt_poll_ns,,Tracepoint event,,,,,,
kvm:kvm_hv_flush_tlb,,Tracepoint event,,,,,,
kvm:kvm_hv_flush_tlb_ex,,Tracepoint event,,,,,,
kvm:kvm_hv_hypercall,,Tracepoint event,,,,,,
kvm:kvm_hv_hypercall_done,,Tracepoint event,,,,,,
kvm:kvm_hv_notify_acked_sint,,Tracepoint event,,,,,,
kvm:kvm_hv_send_ipi,,Tracepoint event,,,,,,
kvm:kvm_hv_send_ipi_ex,,Tracepoint event,,,,,,
kvm:kvm_hv_stimer_callback,,Tracepoint event,,,,,,
kvm:kvm_hv_stimer_cleanup,,Tracepoint event,,,,,,
kvm:kvm_hv_stimer_expiration,,Tracepoint event,,,,,,
kvm:kvm_hv_stimer_set_config,,Tracepoint event,,,,,,
kvm:kvm_hv_stimer_set_count,,Tracepoint event,,,,,,
kvm:kvm_hv_stimer_start_one_shot,,Tracepoint event,,,,,,
kvm:kvm_hv_stimer_start_periodic,,Tracepoint event,,,,,,
kvm:kvm_hv_syndbg_get_msr,,Tracepoint event,,,,,,
kvm:kvm_hv_syndbg_set_msr,,Tracepoint event,,,,,,
kvm:kvm_hv_synic_send_eoi,,Tracepoint event,,,,,,
kvm:kvm_hv_synic_set_irq,,Tracepoint event,,,,,,
kvm:kvm_hv_synic_set_msr,,Tracepoint event,,,,,,
kvm:kvm_hv_timer_state,,Tracepoint event,,,,,,
kvm:kvm_hypercall,,Tracepoint event,,,,,,
kvm:kvm_inj_exception,,Tracepoint event,,,,,,
kvm:kvm_inj_virq,,Tracepoint event,,,,,,
kvm:kvm_invlpga,,Tracepoint event,,,,,,
kvm:kvm_ioapic_delayed_eoi_inj,,Tracepoint event,,,,,,
kvm:kvm_ioapic_set_irq,,Tracepoint event,,,,,,
kvm:kvm_mmio,,Tracepoint event,,,,,,
kvm:kvm_msi_set_irq,,Tracepoint event,,,,,,
kvm:kvm_msr,,Tracepoint event,,,,,,
kvm:kvm_nested_intercepts,,Tracepoint event,,,,,,
kvm:kvm_nested_intr_vmexit,,Tracepoint event,,,,,,
kvm:kvm_nested_vmenter,,Tracepoint event,,,,,,
kvm:kvm_nested_vmenter_failed,,Tracepoint event,,,,,,
kvm:kvm_nested_vmexit,,Tracepoint event,,,,,,
kvm:kvm_nested_vmexit_inject,,Tracepoint event,,,,,,
kvm:kvm_page_fault,,Tracepoint event,,,,,,
kvm:kvm_pi_irte_update,,Tracepoint event,,,,,,
kvm:kvm_pic_set_irq,,Tracepoint event,,,,,,
kvm:kvm_pio,,Tracepoint event,,,,,,
kvm:kvm_ple_window_update,,Tracepoint event,,,,,,
kvm:kvm_pml_full,,Tracepoint event,,,,,,
kvm:kvm_pv_eoi,,Tracepoint event,,,,,,
kvm:kvm_pv_tlb_flush,,Tracepoint event,,,,,,
kvm:kvm_pvclock_update,,Tracepoint event,,,,,,
kvm:kvm_set_irq,,Tracepoint event,,,,,,
kvm:kvm_set_spte_hva,,Tracepoint event,,,,,,
kvm:kvm_skinit,,Tracepoint event,,,,,,
kvm:kvm_smm_transition,,Tracepoint event,,,,,,
kvm:kvm_test_age_hva,,Tracepoint event,,,,,,
kvm:kvm_track_tsc,,Tracepoint event,,,,,,
kvm:kvm_try_async_get_page,,Tracepoint event,,,,,,
kvm:kvm_unmap_hva_range,,Tracepoint event,,,,,,
kvm:kvm_update_master_clock,,Tracepoint event,,,,,,
kvm:kvm_userspace_exit,,Tracepoint event,,,,,,
kvm:kvm_vcpu_wakeup,,Tracepoint event,,,,,,
kvm:kvm_vmgexit_enter,,Tracepoint event,,,,,,
kvm:kvm_vmgexit_exit,,Tracepoint event,,,,,,
kvm:kvm_vmgexit_msr_protocol_enter,,Tracepoint event,,,,,,
kvm:kvm_vmgexit_msr_protocol_exit,,Tracepoint event,,,,,,
kvm:kvm_wait_lapic_expire,,Tracepoint event,,,,,,
kvm:kvm_write_tsc_offset,,Tracepoint event,,,,,,
kvm:kvm_xen_hypercall,,Tracepoint event,,,,,,
kvm:vcpu_match_mmio,,Tracepoint event,,,,,,
kvmmmu:check_mmio_spte,,Tracepoint event,,,,,,
kvmmmu:fast_page_fault,,Tracepoint event,,,,,,
kvmmmu:handle_mmio_page_fault,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_get_page,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_pagetable_walk,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_paging_element,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_prepare_zap_page,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_set_accessed_bit,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_set_dirty_bit,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_set_spte,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_split_huge_page,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_spte_requested,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_sync_page,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_unsync_page,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_walker_error,,Tracepoint event,,,,,,
kvmmmu:kvm_mmu_zap_all_fast,,Tracepoint event,,,,,,
kvmmmu:kvm_tdp_mmu_spte_changed,,Tracepoint event,,,,,,
kvmmmu:mark_mmio_spte,,Tracepoint event,,,,,,
libata:ata_bmdma_setup,,Tracepoint event,,,,,,
libata:ata_bmdma_start,,Tracepoint event,,,,,,
libata:ata_bmdma_status,,Tracepoint event,,,,,,
libata:ata_bmdma_stop,,Tracepoint event,,,,,,
libata:ata_eh_about_to_do,,Tracepoint event,,,,,,
libata:ata_eh_done,,Tracepoint event,,,,,,
libata:ata_eh_link_autopsy,,Tracepoint event,,,,,,
libata:ata_eh_link_autopsy_qc,,Tracepoint event,,,,,,
libata:ata_exec_command,,Tracepoint event,,,,,,
libata:ata_link_hardreset_begin,,Tracepoint event,,,,,,
libata:ata_link_hardreset_end,,Tracepoint event,,,,,,
libata:ata_link_postreset,,Tracepoint event,,,,,,
libata:ata_link_softreset_begin,,Tracepoint event,,,,,,
libata:ata_link_softreset_end,,Tracepoint event,,,,,,
libata:ata_port_freeze,,Tracepoint event,,,,,,
libata:ata_port_thaw,,Tracepoint event,,,,,,
libata:ata_qc_complete_done,,Tracepoint event,,,,,,
libata:ata_qc_complete_failed,,Tracepoint event,,,,,,
libata:ata_qc_complete_internal,,Tracepoint event,,,,,,
libata:ata_qc_issue,,Tracepoint event,,,,,,
libata:ata_qc_prep,,Tracepoint event,,,,,,
libata:ata_sff_flush_pio_task,,Tracepoint event,,,,,,
libata:ata_sff_hsm_command_complete,,Tracepoint event,,,,,,
libata:ata_sff_hsm_state,,Tracepoint event,,,,,,
libata:ata_sff_pio_transfer_data,,Tracepoint event,,,,,,
libata:ata_sff_port_intr,,Tracepoint event,,,,,,
libata:ata_slave_hardreset_begin,,Tracepoint event,,,,,,
libata:ata_slave_hardreset_end,,Tracepoint event,,,,,,
libata:ata_slave_postreset,,Tracepoint event,,,,,,
libata:ata_std_sched_eh,,Tracepoint event,,,,,,
libata:ata_tf_load,,Tracepoint event,,,,,,
libata:atapi_pio_transfer_data,,Tracepoint event,,,,,,
libata:atapi_send_cdb,,Tracepoint event,,,,,,
lock:contention_begin,,Tracepoint event,,,,,,
lock:contention_end,,Tracepoint event,,,,,,
lockd:nlmclnt_grant,,Tracepoint event,,,,,,
lockd:nlmclnt_lock,,Tracepoint event,,,,,,
lockd:nlmclnt_test,,Tracepoint event,,,,,,
lockd:nlmclnt_unlock,,Tracepoint event,,,,,,
maple_tree:ma_op,,Tracepoint event,,,,,,
maple_tree:ma_read,,Tracepoint event,,,,,,
maple_tree:ma_write,,Tracepoint event,,,,,,
mce:mce_record,,Tracepoint event,,,,,,
mctp:mctp_key_acquire,,Tracepoint event,,,,,,
mctp:mctp_key_release,,Tracepoint event,,,,,,
mdio:mdio_access,,Tracepoint event,,,,,,
migrate:mm_migrate_pages,,Tracepoint event,,,,,,
migrate:mm_migrate_pages_start,,Tracepoint event,,,,,,
migrate:remove_migration_pte,,Tracepoint event,,,,,,
migrate:set_migration_pte,,Tracepoint event,,,,,,
mmap:exit_mmap,,Tracepoint event,,,,,,
mmap:vm_unmapped_area,,Tracepoint event,,,,,,
mmap:vma_mas_szero,,Tracepoint event,,,,,,
mmap:vma_store,,Tracepoint event,,,,,,
mmap_lock:mmap_lock_acquire_returned,,Tracepoint event,,,,,,
mmap_lock:mmap_lock_released,,Tracepoint event,,,,,,
mmap_lock:mmap_lock_start_locking,,Tracepoint event,,,,,,
mmc:mmc_request_done,,Tracepoint event,,,,,,
mmc:mmc_request_start,,Tracepoint event,,,,,,
module:module_free,,Tracepoint event,,,,,,
module:module_get,,Tracepoint event,,,,,,
module:module_load,,Tracepoint event,,,,,,
module:module_put,,Tracepoint event,,,,,,
module:module_request,,Tracepoint event,,,,,,
mptcp:ack_update_msk,,Tracepoint event,,,,,,
mptcp:get_mapping_status,,Tracepoint event,,,,,,
mptcp:mptcp_sendmsg_frag,,Tracepoint event,,,,,,
mptcp:mptcp_subflow_get_send,,Tracepoint event,,,,,,
mptcp:subflow_check_data_avail,,Tracepoint event,,,,,,
msr:rdpmc,,Tracepoint event,,,,,,
msr:read_msr,,Tracepoint event,,,,,,
msr:write_msr,,Tracepoint event,,,,,,
napi:napi_poll,,Tracepoint event,,,,,,
neigh:neigh_cleanup_and_release,,Tracepoint event,,,,,,
neigh:neigh_create,,Tracepoint event,,,,,,
neigh:neigh_event_send_dead,,Tracepoint event,,,,,,
neigh:neigh_event_send_done,,Tracepoint event,,,,,,
neigh:neigh_timer_handler,,Tracepoint event,,,,,,
neigh:neigh_update,,Tracepoint event,,,,,,
neigh:neigh_update_done,,Tracepoint event,,,,,,
net:napi_gro_frags_entry,,Tracepoint event,,,,,,
net:napi_gro_frags_exit,,Tracepoint event,,,,,,
net:napi_gro_receive_entry,,Tracepoint event,,,,,,
net:napi_gro_receive_exit,,Tracepoint event,,,,,,
net:net_dev_queue,,Tracepoint event,,,,,,
net:net_dev_start_xmit,,Tracepoint event,,,,,,
net:net_dev_xmit,,Tracepoint event,,,,,,
net:net_dev_xmit_timeout,,Tracepoint event,,,,,,
net:netif_receive_skb,,Tracepoint event,,,,,,
net:netif_receive_skb_entry,,Tracepoint event,,,,,,
net:netif_receive_skb_exit,,Tracepoint event,,,,,,
net:netif_receive_skb_list_entry,,Tracepoint event,,,,,,
net:netif_receive_skb_list_exit,,Tracepoint event,,,,,,
net:netif_rx,,Tracepoint event,,,,,,
net:netif_rx_entry,,Tracepoint event,,,,,,
net:netif_rx_exit,,Tracepoint event,,,,,,
netfs:netfs_failure,,Tracepoint event,,,,,,
netfs:netfs_read,,Tracepoint event,,,,,,
netfs:netfs_rreq,,Tracepoint event,,,,,,
netfs:netfs_rreq_ref,,Tracepoint event,,,,,,
netfs:netfs_sreq,,Tracepoint event,,,,,,
netfs:netfs_sreq_ref,,Tracepoint event,,,,,,
netlink:netlink_extack,,Tracepoint event,,,,,,
nfs:nfs_access_enter,,Tracepoint event,,,,,,
nfs:nfs_access_exit,,Tracepoint event,,,,,,
nfs:nfs_aop_readahead,,Tracepoint event,,,,,,
nfs:nfs_aop_readahead_done,,Tracepoint event,,,,,,
nfs:nfs_aop_readpage,,Tracepoint event,,,,,,
nfs:nfs_aop_readpage_done,,Tracepoint event,,,,,,
nfs:nfs_atomic_open_enter,,Tracepoint event,,,,,,
nfs:nfs_atomic_open_exit,,Tracepoint event,,,,,,
nfs:nfs_commit_done,,Tracepoint event,,,,,,
nfs:nfs_commit_error,,Tracepoint event,,,,,,
nfs:nfs_comp_error,,Tracepoint event,,,,,,
nfs:nfs_create_enter,,Tracepoint event,,,,,,
nfs:nfs_create_exit,,Tracepoint event,,,,,,
nfs:nfs_direct_commit_complete,,Tracepoint event,,,,,,
nfs:nfs_direct_resched_write,,Tracepoint event,,,,,,
nfs:nfs_direct_write_complete,,Tracepoint event,,,,,,
nfs:nfs_direct_write_completion,,Tracepoint event,,,,,,
nfs:nfs_direct_write_reschedule_io,,Tracepoint event,,,,,,
nfs:nfs_direct_write_schedule_iovec,,Tracepoint event,,,,,,
nfs:nfs_fh_to_dentry,,Tracepoint event,,,,,,
nfs:nfs_fsync_enter,,Tracepoint event,,,,,,
nfs:nfs_fsync_exit,,Tracepoint event,,,,,,
nfs:nfs_getattr_enter,,Tracepoint event,,,,,,
nfs:nfs_getattr_exit,,Tracepoint event,,,,,,
nfs:nfs_initiate_commit,,Tracepoint event,,,,,,
nfs:nfs_initiate_read,,Tracepoint event,,,,,,
nfs:nfs_initiate_write,,Tracepoint event,,,,,,
nfs:nfs_invalidate_folio,,Tracepoint event,,,,,,
nfs:nfs_invalidate_mapping_enter,,Tracepoint event,,,,,,
nfs:nfs_invalidate_mapping_exit,,Tracepoint event,,,,,,
nfs:nfs_launder_folio_done,,Tracepoint event,,,,,,
nfs:nfs_link_enter,,Tracepoint event,,,,,,
nfs:nfs_link_exit,,Tracepoint event,,,,,,
nfs:nfs_lookup_enter,,Tracepoint event,,,,,,
nfs:nfs_lookup_exit,,Tracepoint event,,,,,,
nfs:nfs_lookup_revalidate_enter,,Tracepoint event,,,,,,
nfs:nfs_lookup_revalidate_exit,,Tracepoint event,,,,,,
nfs:nfs_mkdir_enter,,Tracepoint event,,,,,,
nfs:nfs_mkdir_exit,,Tracepoint event,,,,,,
nfs:nfs_mknod_enter,,Tracepoint event,,,,,,
nfs:nfs_mknod_exit,,Tracepoint event,,,,,,
nfs:nfs_mount_assign,,Tracepoint event,,,,,,
nfs:nfs_mount_option,,Tracepoint event,,,,,,
nfs:nfs_mount_path,,Tracepoint event,,,,,,
nfs:nfs_pgio_error,,Tracepoint event,,,,,,
nfs:nfs_readdir_cache_fill,,Tracepoint event,,,,,,
nfs:nfs_readdir_cache_fill_done,,Tracepoint event,,,,,,
nfs:nfs_readdir_force_readdirplus,,Tracepoint event,,,,,,
nfs:nfs_readdir_invalidate_cache_range,,Tracepoint event,,,,,,
nfs:nfs_readdir_lookup,,Tracepoint event,,,,,,
nfs:nfs_readdir_lookup_revalidate,,Tracepoint event,,,,,,
nfs:nfs_readdir_lookup_revalidate_failed,,Tracepoint event,,,,,,
nfs:nfs_readdir_uncached,,Tracepoint event,,,,,,
nfs:nfs_readdir_uncached_done,,Tracepoint event,,,,,,
nfs:nfs_readpage_done,,Tracepoint event,,,,,,
nfs:nfs_readpage_short,,Tracepoint event,,,,,,
nfs:nfs_refresh_inode_enter,,Tracepoint event,,,,,,
nfs:nfs_refresh_inode_exit,,Tracepoint event,,,,,,
nfs:nfs_remove_enter,,Tracepoint event,,,,,,
nfs:nfs_remove_exit,,Tracepoint event,,,,,,
nfs:nfs_rename_enter,,Tracepoint event,,,,,,
nfs:nfs_rename_exit,,Tracepoint event,,,,,,
nfs:nfs_revalidate_inode_enter,,Tracepoint event,,,,,,
nfs:nfs_revalidate_inode_exit,,Tracepoint event,,,,,,
nfs:nfs_rmdir_enter,,Tracepoint event,,,,,,
nfs:nfs_rmdir_exit,,Tracepoint event,,,,,,
nfs:nfs_set_cache_invalid,,Tracepoint event,,,,,,
nfs:nfs_set_inode_stale,,Tracepoint event,,,,,,
nfs:nfs_setattr_enter,,Tracepoint event,,,,,,
nfs:nfs_setattr_exit,,Tracepoint event,,,,,,
nfs:nfs_sillyrename_rename,,Tracepoint event,,,,,,
nfs:nfs_sillyrename_unlink,,Tracepoint event,,,,,,
nfs:nfs_size_grow,,Tracepoint event,,,,,,
nfs:nfs_size_truncate,,Tracepoint event,,,,,,
nfs:nfs_size_update,,Tracepoint event,,,,,,
nfs:nfs_size_wcc,,Tracepoint event,,,,,,
nfs:nfs_symlink_enter,,Tracepoint event,,,,,,
nfs:nfs_symlink_exit,,Tracepoint event,,,,,,
nfs:nfs_unlink_enter,,Tracepoint event,,,,,,
nfs:nfs_unlink_exit,,Tracepoint event,,,,,,
nfs:nfs_write_error,,Tracepoint event,,,,,,
nfs:nfs_writeback_done,,Tracepoint event,,,,,,
nfs:nfs_writeback_folio,,Tracepoint event,,,,,,
nfs:nfs_writeback_folio_done,,Tracepoint event,,,,,,
nfs:nfs_writeback_inode_enter,,Tracepoint event,,,,,,
nfs:nfs_writeback_inode_exit,,Tracepoint event,,,,,,
nfs:nfs_xdr_bad_filehandle,,Tracepoint event,,,,,,
nfs:nfs_xdr_status,,Tracepoint event,,,,,,
nmi:nmi_handler,,Tracepoint event,,,,,,
notifier:notifier_register,,Tracepoint event,,,,,,
notifier:notifier_run,,Tracepoint event,,,,,,
notifier:notifier_unregister,,Tracepoint event,,,,,,
oom:compact_retry,,Tracepoint event,,,,,,
oom:finish_task_reaping,,Tracepoint event,,,,,,
oom:mark_victim,,Tracepoint event,,,,,,
oom:oom_score_adj_update,,Tracepoint event,,,,,,
oom:reclaim_retry_zone,,Tracepoint event,,,,,,
oom:skip_task_reaping,,Tracepoint event,,,,,,
oom:start_task_reaping,,Tracepoint event,,,,,,
oom:wake_reaper,,Tracepoint event,,,,,,
osnoise:irq_noise,,Tracepoint event,,,,,,
osnoise:nmi_noise,,Tracepoint event,,,,,,
osnoise:sample_threshold,,Tracepoint event,,,,,,
osnoise:softirq_noise,,Tracepoint event,,,,,,
osnoise:thread_noise,,Tracepoint event,,,,,,
page_isolation:test_pages_isolated,,Tracepoint event,,,,,,
page_pool:page_pool_release,,Tracepoint event,,,,,,
page_pool:page_pool_state_hold,,Tracepoint event,,,,,,
page_pool:page_pool_state_release,,Tracepoint event,,,,,,
page_pool:page_pool_update_nid,,Tracepoint event,,,,,,
pagemap:mm_lru_activate,,Tracepoint event,,,,,,
pagemap:mm_lru_insertion,,Tracepoint event,,,,,,
percpu:percpu_alloc_percpu,,Tracepoint event,,,,,,
percpu:percpu_alloc_percpu_fail,,Tracepoint event,,,,,,
percpu:percpu_create_chunk,,Tracepoint event,,,,,,
percpu:percpu_destroy_chunk,,Tracepoint event,,,,,,
percpu:percpu_free_percpu,,Tracepoint event,,,,,,
power:clock_disable,,Tracepoint event,,,,,,
power:clock_enable,,Tracepoint event,,,,,,
power:clock_set_rate,,Tracepoint event,,,,,,
power:cpu_frequency,,Tracepoint event,,,,,,
power:cpu_frequency_limits,,Tracepoint event,,,,,,
power:cpu_idle,,Tracepoint event,,,,,,
power:cpu_idle_miss,,Tracepoint event,,,,,,
power:dev_pm_qos_add_request,,Tracepoint event,,,,,,
power:dev_pm_qos_remove_request,,Tracepoint event,,,,,,
power:dev_pm_qos_update_request,,Tracepoint event,,,,,,
power:device_pm_callback_end,,Tracepoint event,,,,,,
power:device_pm_callback_start,,Tracepoint event,,,,,,
power:guest_halt_poll_ns,,Tracepoint event,,,,,,
power:pm_qos_add_request,,Tracepoint event,,,,,,
power:pm_qos_remove_request,,Tracepoint event,,,,,,
power:pm_qos_update_flags,,Tracepoint event,,,,,,
power:pm_qos_update_request,,Tracepoint event,,,,,,
power:pm_qos_update_target,,Tracepoint event,,,,,,
power:power_domain_target,,Tracepoint event,,,,,,
power:powernv_throttle,,Tracepoint event,,,,,,
power:pstate_sample,,Tracepoint event,,,,,,
power:suspend_resume,,Tracepoint event,,,,,,
power:wakeup_source_activate,,Tracepoint event,,,,,,
power:wakeup_source_deactivate,,Tracepoint event,,,,,,
printk:console,,Tracepoint event,,,,,,
pwm:pwm_apply,,Tracepoint event,,,,,,
pwm:pwm_get,,Tracepoint event,,,,,,
qdisc:qdisc_create,,Tracepoint event,,,,,,
qdisc:qdisc_dequeue,,Tracepoint event,,,,,,
qdisc:qdisc_destroy,,Tracepoint event,,,,,,
qdisc:qdisc_enqueue,,Tracepoint event,,,,,,
qdisc:qdisc_reset,,Tracepoint event,,,,,,
ras:aer_event,,Tracepoint event,,,,,,
ras:arm_event,,Tracepoint event,,,,,,
ras:extlog_mem_event,,Tracepoint event,,,,,,
ras:mc_event,,Tracepoint event,,,,,,
ras:memory_failure_event,,Tracepoint event,,,,,,
ras:non_standard_event,,Tracepoint event,,,,,,
raw_syscalls:sys_enter,,Tracepoint event,,,,,,
raw_syscalls:sys_exit,,Tracepoint event,,,,,,
rcu:rcu_stall_warning,,Tracepoint event,,,,,,
rcu:rcu_utilization,,Tracepoint event,,,,,,
regmap:regcache_drop_region,,Tracepoint event,,,,,,
regmap:regcache_sync,,Tracepoint event,,,,,,
regmap:regmap_async_complete_done,,Tracepoint event,,,,,,
regmap:regmap_async_complete_start,,Tracepoint event,,,,,,
regmap:regmap_async_io_complete,,Tracepoint event,,,,,,
regmap:regmap_async_write_start,,Tracepoint event,,,,,,
regmap:regmap_bulk_read,,Tracepoint event,,,,,,
regmap:regmap_bulk_write,,Tracepoint event,,,,,,
regmap:regmap_cache_bypass,,Tracepoint event,,,,,,
regmap:regmap_cache_only,,Tracepoint event,,,,,,
regmap:regmap_hw_read_done,,Tracepoint event,,,,,,
regmap:regmap_hw_read_start,,Tracepoint event,,,,,,
regmap:regmap_hw_write_done,,Tracepoint event,,,,,,
regmap:regmap_hw_write_start,,Tracepoint event,,,,,,
regmap:regmap_reg_read,,Tracepoint event,,,,,,
regmap:regmap_reg_read_cache,,Tracepoint event,,,,,,
regmap:regmap_reg_write,,Tracepoint event,,,,,,
regulator:regulator_bypass_disable,,Tracepoint event,,,,,,
regulator:regulator_bypass_disable_complete,,Tracepoint event,,,,,,
regulator:regulator_bypass_enable,,Tracepoint event,,,,,,
regulator:regulator_bypass_enable_complete,,Tracepoint event,,,,,,
regulator:regulator_disable,,Tracepoint event,,,,,,
regulator:regulator_disable_complete,,Tracepoint event,,,,,,
regulator:regulator_enable,,Tracepoint event,,,,,,
regulator:regulator_enable_complete,,Tracepoint event,,,,,,
regulator:regulator_enable_delay,,Tracepoint event,,,,,,
regulator:regulator_set_voltage,,Tracepoint event,,,,,,
regulator:regulator_set_voltage_complete,,Tracepoint event,,,,,,
resctrl:pseudo_lock_l2,,Tracepoint event,,,,,,
resctrl:pseudo_lock_l3,,Tracepoint event,,,,,,
resctrl:pseudo_lock_mem_latency,,Tracepoint event,,,,,,
rpm:rpm_idle,,Tracepoint event,,,,,,
rpm:rpm_resume,,Tracepoint event,,,,,,
rpm:rpm_return_int,,Tracepoint event,,,,,,
rpm:rpm_suspend,,Tracepoint event,,,,,,
rpm:rpm_usage,,Tracepoint event,,,,,,
rseq:rseq_ip_fixup,,Tracepoint event,,,,,,
rseq:rseq_update,,Tracepoint event,,,,,,
rtc:rtc_alarm_irq_enable,,Tracepoint event,,,,,,
rtc:rtc_irq_set_freq,,Tracepoint event,,,,,,
rtc:rtc_irq_set_state,,Tracepoint event,,,,,,
rtc:rtc_read_alarm,,Tracepoint event,,,,,,
rtc:rtc_read_offset,,Tracepoint event,,,,,,
rtc:rtc_read_time,,Tracepoint event,,,,,,
rtc:rtc_set_alarm,,Tracepoint event,,,,,,
rtc:rtc_set_offset,,Tracepoint event,,,,,,
rtc:rtc_set_time,,Tracepoint event,,,,,,
rtc:rtc_timer_dequeue,,Tracepoint event,,,,,,
rtc:rtc_timer_enqueue,,Tracepoint event,,,,,,
rtc:rtc_timer_fired,,Tracepoint event,,,,,,
rv:error_wwnr,,Tracepoint event,,,,,,
rv:event_wwnr,,Tracepoint event,,,,,,
sched:sched_kthread_stop,,Tracepoint event,,,,,,
sched:sched_kthread_stop_ret,,Tracepoint event,,,,,,
sched:sched_kthread_work_execute_end,,Tracepoint event,,,,,,
sched:sched_kthread_work_execute_start,,Tracepoint event,,,,,,
sched:sched_kthread_work_queue_work,,Tracepoint event,,,,,,
sched:sched_migrate_task,,Tracepoint event,,,,,,
sched:sched_move_numa,,Tracepoint event,,,,,,
sched:sched_pi_setprio,,Tracepoint event,,,,,,
sched:sched_process_exec,,Tracepoint event,,,,,,
sched:sched_process_exit,,Tracepoint event,,,,,,
sched:sched_process_fork,,Tracepoint event,,,,,,
sched:sched_process_free,,Tracepoint event,,,,,,
sched:sched_process_hang,,Tracepoint event,,,,,,
sched:sched_process_wait,,Tracepoint event,,,,,,
sched:sched_stat_blocked,,Tracepoint event,,,,,,
sched:sched_stat_iowait,,Tracepoint event,,,,,,
sched:sched_stat_runtime,,Tracepoint event,,,,,,
sched:sched_stat_sleep,,Tracepoint event,,,,,,
sched:sched_stat_wait,,Tracepoint event,,,,,,
sched:sched_stick_numa,,Tracepoint event,,,,,,
sched:sched_swap_numa,,Tracepoint event,,,,,,
sched:sched_switch,,Tracepoint event,,,,,,
sched:sched_wait_task,,Tracepoint event,,,,,,
sched:sched_wake_idle_without_ipi,,Tracepoint event,,,,,,
sched:sched_wakeup,,Tracepoint event,,,,,,
sched:sched_wakeup_new,,Tracepoint event,,,,,,
sched:sched_waking,,Tracepoint event,,,,,,
scsi:scsi_dispatch_cmd_done,,Tracepoint event,,,,,,
scsi:scsi_dispatch_cmd_error,,Tracepoint event,,,,,,
scsi:scsi_dispatch_cmd_start,,Tracepoint event,,,,,,
scsi:scsi_dispatch_cmd_timeout,,Tracepoint event,,,,,,
scsi:scsi_eh_wakeup,,Tracepoint event,,,,,,
sd:scsi_prepare_zone_append,,Tracepoint event,,,,,,
sd:scsi_zone_wp_update,,Tracepoint event,,,,,,
signal:signal_deliver,,Tracepoint event,,,,,,
signal:signal_generate,,Tracepoint event,,,,,,
skb:consume_skb,,Tracepoint event,,,,,,
skb:kfree_skb,,Tracepoint event,,,,,,
skb:skb_copy_datagram_iovec,,Tracepoint event,,,,,,
smbus:smbus_read,,Tracepoint event,,,,,,
smbus:smbus_reply,,Tracepoint event,,,,,,
smbus:smbus_result,,Tracepoint event,,,,,,
smbus:smbus_write,,Tracepoint event,,,,,,
sock:inet_sk_error_report,,Tracepoint event,,,,,,
sock:inet_sock_set_state,,Tracepoint event,,,,,,
sock:sk_data_ready,,Tracepoint event,,,,,,
sock:sock_exceed_buf_limit,,Tracepoint event,,,,,,
sock:sock_rcvqueue_full,,Tracepoint event,,,,,,
sock:sock_recv_length,,Tracepoint event,,,,,,
sock:sock_send_length,,Tracepoint event,,,,,,
spi:spi_controller_busy,,Tracepoint event,,,,,,
spi:spi_controller_idle,,Tracepoint event,,,,,,
spi:spi_message_done,,Tracepoint event,,,,,,
spi:spi_message_start,,Tracepoint event,,,,,,
spi:spi_message_submit,,Tracepoint event,,,,,,
spi:spi_set_cs,,Tracepoint event,,,,,,
spi:spi_setup,,Tracepoint event,,,,,,
spi:spi_transfer_start,,Tracepoint event,,,,,,
spi:spi_transfer_stop,,Tracepoint event,,,,,,
sunrpc:cache_entry_expired,,Tracepoint event,,,,,,
sunrpc:cache_entry_make_negative,,Tracepoint event,,,,,,
sunrpc:cache_entry_no_listener,,Tracepoint event,,,,,,
sunrpc:cache_entry_upcall,,Tracepoint event,,,,,,
sunrpc:cache_entry_update,,Tracepoint event,,,,,,
sunrpc:pmap_register,,Tracepoint event,,,,,,
sunrpc:rpc__auth_tooweak,,Tracepoint event,,,,,,
sunrpc:rpc__bad_creds,,Tracepoint event,,,,,,
sunrpc:rpc__garbage_args,,Tracepoint event,,,,,,
sunrpc:rpc__mismatch,,Tracepoint event,,,,,,
sunrpc:rpc__proc_unavail,,Tracepoint event,,,,,,
sunrpc:rpc__prog_mismatch,,Tracepoint event,,,,,,
sunrpc:rpc__prog_unavail,,Tracepoint event,,,,,,
sunrpc:rpc__stale_creds,,Tracepoint event,,,,,,
sunrpc:rpc__unparsable,,Tracepoint event,,,,,,
sunrpc:rpc_bad_callhdr,,Tracepoint event,,,,,,
sunrpc:rpc_bad_verifier,,Tracepoint event,,,,,,
sunrpc:rpc_buf_alloc,,Tracepoint event,,,,,,
sunrpc:rpc_call_rpcerror,,Tracepoint event,,,,,,
sunrpc:rpc_call_status,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_clone_err,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_free,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_killall,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_new,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_new_err,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_release,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_replace_xprt,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_replace_xprt_err,,Tracepoint event,,,,,,
sunrpc:rpc_clnt_shutdown,,Tracepoint event,,,,,,
sunrpc:rpc_connect_status,,Tracepoint event,,,,,,
sunrpc:rpc_refresh_status,,Tracepoint event,,,,,,
sunrpc:rpc_request,,Tracepoint event,,,,,,
sunrpc:rpc_retry_refresh_status,,Tracepoint event,,,,,,
sunrpc:rpc_socket_close,,Tracepoint event,,,,,,
sunrpc:rpc_socket_connect,,Tracepoint event,,,,,,
sunrpc:rpc_socket_error,,Tracepoint event,,,,,,
sunrpc:rpc_socket_nospace,,Tracepoint event,,,,,,
sunrpc:rpc_socket_reset_connection,,Tracepoint event,,,,,,
sunrpc:rpc_socket_shutdown,,Tracepoint event,,,,,,
sunrpc:rpc_socket_state_change,,Tracepoint event,,,,,,
sunrpc:rpc_stats_latency,,Tracepoint event,,,,,,
sunrpc:rpc_task_begin,,Tracepoint event,,,,,,
sunrpc:rpc_task_call_done,,Tracepoint event,,,,,,
sunrpc:rpc_task_complete,,Tracepoint event,,,,,,
sunrpc:rpc_task_end,,Tracepoint event,,,,,,
sunrpc:rpc_task_run_action,,Tracepoint event,,,,,,
sunrpc:rpc_task_signalled,,Tracepoint event,,,,,,
sunrpc:rpc_task_sleep,,Tracepoint event,,,,,,
sunrpc:rpc_task_sync_sleep,,Tracepoint event,,,,,,
sunrpc:rpc_task_sync_wake,,Tracepoint event,,,,,,
sunrpc:rpc_task_timeout,,Tracepoint event,,,,,,
sunrpc:rpc_task_wakeup,,Tracepoint event,,,,,,
sunrpc:rpc_timeout_status,,Tracepoint event,,,,,,
sunrpc:rpc_tls_not_started,,Tracepoint event,,,,,,
sunrpc:rpc_tls_unavailable,,Tracepoint event,,,,,,
sunrpc:rpc_xdr_alignment,,Tracepoint event,,,,,,
sunrpc:rpc_xdr_overflow,,Tracepoint event,,,,,,
sunrpc:rpc_xdr_recvfrom,,Tracepoint event,,,,,,
sunrpc:rpc_xdr_reply_pages,,Tracepoint event,,,,,,
sunrpc:rpc_xdr_sendto,,Tracepoint event,,,,,,
sunrpc:rpcb_bind_version_err,,Tracepoint event,,,,,,
sunrpc:rpcb_getport,,Tracepoint event,,,,,,
sunrpc:rpcb_prog_unavail_err,,Tracepoint event,,,,,,
sunrpc:rpcb_register,,Tracepoint event,,,,,,
sunrpc:rpcb_setport,,Tracepoint event,,,,,,
sunrpc:rpcb_timeout_err,,Tracepoint event,,,,,,
sunrpc:rpcb_unreachable_err,,Tracepoint event,,,,,,
sunrpc:rpcb_unrecognized_err,,Tracepoint event,,,,,,
sunrpc:rpcb_unregister,,Tracepoint event,,,,,,
sunrpc:svc_alloc_arg_err,,Tracepoint event,,,,,,
sunrpc:svc_authenticate,,Tracepoint event,,,,,,
sunrpc:svc_defer,,Tracepoint event,,,,,,
sunrpc:svc_defer_drop,,Tracepoint event,,,,,,
sunrpc:svc_defer_queue,,Tracepoint event,,,,,,
sunrpc:svc_defer_recv,,Tracepoint event,,,,,,
sunrpc:svc_drop,,Tracepoint event,,,,,,
sunrpc:svc_noregister,,Tracepoint event,,,,,,
sunrpc:svc_process,,Tracepoint event,,,,,,
sunrpc:svc_register,,Tracepoint event,,,,,,
sunrpc:svc_replace_page_err,,Tracepoint event,,,,,,
sunrpc:svc_send,,Tracepoint event,,,,,,
sunrpc:svc_stats_latency,,Tracepoint event,,,,,,
sunrpc:svc_tls_not_started,,Tracepoint event,,,,,,
sunrpc:svc_tls_start,,Tracepoint event,,,,,,
sunrpc:svc_tls_timed_out,,Tracepoint event,,,,,,
sunrpc:svc_tls_unavailable,,Tracepoint event,,,,,,
sunrpc:svc_tls_upcall,,Tracepoint event,,,,,,
sunrpc:svc_unregister,,Tracepoint event,,,,,,
sunrpc:svc_wake_up,,Tracepoint event,,,,,,
sunrpc:svc_xdr_recvfrom,,Tracepoint event,,,,,,
sunrpc:svc_xdr_sendto,,Tracepoint event,,,,,,
sunrpc:svc_xprt_accept,,Tracepoint event,,,,,,
sunrpc:svc_xprt_close,,Tracepoint event,,,,,,
sunrpc:svc_xprt_create_err,,Tracepoint event,,,,,,
sunrpc:svc_xprt_dequeue,,Tracepoint event,,,,,,
sunrpc:svc_xprt_detach,,Tracepoint event,,,,,,
sunrpc:svc_xprt_enqueue,,Tracepoint event,,,,,,
sunrpc:svc_xprt_free,,Tracepoint event,,,,,,
sunrpc:svc_xprt_no_write_space,,Tracepoint event,,,,,,
sunrpc:svcsock_accept_err,,Tracepoint event,,,,,,
sunrpc:svcsock_data_ready,,Tracepoint event,,,,,,
sunrpc:svcsock_free,,Tracepoint event,,,,,,
sunrpc:svcsock_getpeername_err,,Tracepoint event,,,,,,
sunrpc:svcsock_marker,,Tracepoint event,,,,,,
sunrpc:svcsock_new,,Tracepoint event,,,,,,
sunrpc:svcsock_tcp_recv,,Tracepoint event,,,,,,
sunrpc:svcsock_tcp_recv_eagain,,Tracepoint event,,,,,,
sunrpc:svcsock_tcp_recv_err,,Tracepoint event,,,,,,
sunrpc:svcsock_tcp_recv_short,,Tracepoint event,,,,,,
sunrpc:svcsock_tcp_send,,Tracepoint event,,,,,,
sunrpc:svcsock_tcp_state,,Tracepoint event,,,,,,
sunrpc:svcsock_udp_recv,,Tracepoint event,,,,,,
sunrpc:svcsock_udp_recv_err,,Tracepoint event,,,,,,
sunrpc:svcsock_udp_send,,Tracepoint event,,,,,,
sunrpc:svcsock_write_space,,Tracepoint event,,,,,,
sunrpc:xprt_connect,,Tracepoint event,,,,,,
sunrpc:xprt_create,,Tracepoint event,,,,,,
sunrpc:xprt_destroy,,Tracepoint event,,,,,,
sunrpc:xprt_disconnect_auto,,Tracepoint event,,,,,,
sunrpc:xprt_disconnect_done,,Tracepoint event,,,,,,
sunrpc:xprt_disconnect_force,,Tracepoint event,,,,,,
sunrpc:xprt_get_cong,,Tracepoint event,,,,,,
sunrpc:xprt_lookup_rqst,,Tracepoint event,,,,,,
sunrpc:xprt_ping,,Tracepoint event,,,,,,
sunrpc:xprt_put_cong,,Tracepoint event,,,,,,
sunrpc:xprt_release_cong,,Tracepoint event,,,,,,
sunrpc:xprt_release_xprt,,Tracepoint event,,,,,,
sunrpc:xprt_reserve,,Tracepoint event,,,,,,
sunrpc:xprt_reserve_cong,,Tracepoint event,,,,,,
sunrpc:xprt_reserve_xprt,,Tracepoint event,,,,,,
sunrpc:xprt_retransmit,,Tracepoint event,,,,,,
sunrpc:xprt_timer,,Tracepoint event,,,,,,
sunrpc:xprt_transmit,,Tracepoint event,,,,,,
sunrpc:xs_data_ready,,Tracepoint event,,,,,,
sunrpc:xs_stream_read_data,,Tracepoint event,,,,,,
sunrpc:xs_stream_read_request,,Tracepoint event,,,,,,
swiotlb:swiotlb_bounced,,Tracepoint event,,,,,,
sync_trace:sync_timeline,,Tracepoint event,,,,,,
syscalls:sys_enter_accept,,Tracepoint event,,,,,,
syscalls:sys_enter_accept4,,Tracepoint event,,,,,,
syscalls:sys_enter_access,,Tracepoint event,,,,,,
syscalls:sys_enter_acct,,Tracepoint event,,,,,,
syscalls:sys_enter_add_key,,Tracepoint event,,,,,,
syscalls:sys_enter_adjtimex,,Tracepoint event,,,,,,
syscalls:sys_enter_alarm,,Tracepoint event,,,,,,
syscalls:sys_enter_arch_prctl,,Tracepoint event,,,,,,
syscalls:sys_enter_bind,,Tracepoint event,,,,,,
syscalls:sys_enter_bpf,,Tracepoint event,,,,,,
syscalls:sys_enter_brk,,Tracepoint event,,,,,,
syscalls:sys_enter_cachestat,,Tracepoint event,,,,,,
syscalls:sys_enter_capget,,Tracepoint event,,,,,,
syscalls:sys_enter_capset,,Tracepoint event,,,,,,
syscalls:sys_enter_chdir,,Tracepoint event,,,,,,
syscalls:sys_enter_chmod,,Tracepoint event,,,,,,
syscalls:sys_enter_chown,,Tracepoint event,,,,,,
syscalls:sys_enter_chroot,,Tracepoint event,,,,,,
syscalls:sys_enter_clock_adjtime,,Tracepoint event,,,,,,
syscalls:sys_enter_clock_getres,,Tracepoint event,,,,,,
syscalls:sys_enter_clock_gettime,,Tracepoint event,,,,,,
syscalls:sys_enter_clock_nanosleep,,Tracepoint event,,,,,,
syscalls:sys_enter_clock_settime,,Tracepoint event,,,,,,
syscalls:sys_enter_clone,,Tracepoint event,,,,,,
syscalls:sys_enter_clone3,,Tracepoint event,,,,,,
syscalls:sys_enter_close,,Tracepoint event,,,,,,
syscalls:sys_enter_close_range,,Tracepoint event,,,,,,
syscalls:sys_enter_connect,,Tracepoint event,,,,,,
syscalls:sys_enter_copy_file_range,,Tracepoint event,,,,,,
syscalls:sys_enter_creat,,Tracepoint event,,,,,,
syscalls:sys_enter_delete_module,,Tracepoint event,,,,,,
syscalls:sys_enter_dup,,Tracepoint event,,,,,,
syscalls:sys_enter_dup2,,Tracepoint event,,,,,,
syscalls:sys_enter_dup3,,Tracepoint event,,,,,,
syscalls:sys_enter_epoll_create,,Tracepoint event,,,,,,
syscalls:sys_enter_epoll_create1,,Tracepoint event,,,,,,
syscalls:sys_enter_epoll_ctl,,Tracepoint event,,,,,,
syscalls:sys_enter_epoll_pwait,,Tracepoint event,,,,,,
syscalls:sys_enter_epoll_pwait2,,Tracepoint event,,,,,,
syscalls:sys_enter_epoll_wait,,Tracepoint event,,,,,,
syscalls:sys_enter_eventfd,,Tracepoint event,,,,,,
syscalls:sys_enter_eventfd2,,Tracepoint event,,,,,,
syscalls:sys_enter_execve,,Tracepoint event,,,,,,
syscalls:sys_enter_execveat,,Tracepoint event,,,,,,
syscalls:sys_enter_exit,,Tracepoint event,,,,,,
syscalls:sys_enter_exit_group,,Tracepoint event,,,,,,
syscalls:sys_enter_faccessat,,Tracepoint event,,,,,,
syscalls:sys_enter_faccessat2,,Tracepoint event,,,,,,
syscalls:sys_enter_fadvise64,,Tracepoint event,,,,,,
syscalls:sys_enter_fallocate,,Tracepoint event,,,,,,
syscalls:sys_enter_fanotify_init,,Tracepoint event,,,,,,
syscalls:sys_enter_fanotify_mark,,Tracepoint event,,,,,,
syscalls:sys_enter_fchdir,,Tracepoint event,,,,,,
syscalls:sys_enter_fchmod,,Tracepoint event,,,,,,
syscalls:sys_enter_fchmodat,,Tracepoint event,,,,,,
syscalls:sys_enter_fchown,,Tracepoint event,,,,,,
syscalls:sys_enter_fchownat,,Tracepoint event,,,,,,
syscalls:sys_enter_fcntl,,Tracepoint event,,,,,,
syscalls:sys_enter_fdatasync,,Tracepoint event,,,,,,
syscalls:sys_enter_fgetxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_finit_module,,Tracepoint event,,,,,,
syscalls:sys_enter_flistxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_flock,,Tracepoint event,,,,,,
syscalls:sys_enter_fork,,Tracepoint event,,,,,,
syscalls:sys_enter_fremovexattr,,Tracepoint event,,,,,,
syscalls:sys_enter_fsconfig,,Tracepoint event,,,,,,
syscalls:sys_enter_fsetxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_fsmount,,Tracepoint event,,,,,,
syscalls:sys_enter_fsopen,,Tracepoint event,,,,,,
syscalls:sys_enter_fspick,,Tracepoint event,,,,,,
syscalls:sys_enter_fstatfs,,Tracepoint event,,,,,,
syscalls:sys_enter_fsync,,Tracepoint event,,,,,,
syscalls:sys_enter_ftruncate,,Tracepoint event,,,,,,
syscalls:sys_enter_futex,,Tracepoint event,,,,,,
syscalls:sys_enter_futex_waitv,,Tracepoint event,,,,,,
syscalls:sys_enter_futimesat,,Tracepoint event,,,,,,
syscalls:sys_enter_get_mempolicy,,Tracepoint event,,,,,,
syscalls:sys_enter_get_robust_list,,Tracepoint event,,,,,,
syscalls:sys_enter_getcpu,,Tracepoint event,,,,,,
syscalls:sys_enter_getcwd,,Tracepoint event,,,,,,
syscalls:sys_enter_getdents,,Tracepoint event,,,,,,
syscalls:sys_enter_getdents64,,Tracepoint event,,,,,,
syscalls:sys_enter_getegid,,Tracepoint event,,,,,,
syscalls:sys_enter_geteuid,,Tracepoint event,,,,,,
syscalls:sys_enter_getgid,,Tracepoint event,,,,,,
syscalls:sys_enter_getgroups,,Tracepoint event,,,,,,
syscalls:sys_enter_getitimer,,Tracepoint event,,,,,,
syscalls:sys_enter_getpeername,,Tracepoint event,,,,,,
syscalls:sys_enter_getpgid,,Tracepoint event,,,,,,
syscalls:sys_enter_getpgrp,,Tracepoint event,,,,,,
syscalls:sys_enter_getpid,,Tracepoint event,,,,,,
syscalls:sys_enter_getppid,,Tracepoint event,,,,,,
syscalls:sys_enter_getpriority,,Tracepoint event,,,,,,
syscalls:sys_enter_getrandom,,Tracepoint event,,,,,,
syscalls:sys_enter_getresgid,,Tracepoint event,,,,,,
syscalls:sys_enter_getresuid,,Tracepoint event,,,,,,
syscalls:sys_enter_getrlimit,,Tracepoint event,,,,,,
syscalls:sys_enter_getrusage,,Tracepoint event,,,,,,
syscalls:sys_enter_getsid,,Tracepoint event,,,,,,
syscalls:sys_enter_getsockname,,Tracepoint event,,,,,,
syscalls:sys_enter_getsockopt,,Tracepoint event,,,,,,
syscalls:sys_enter_gettid,,Tracepoint event,,,,,,
syscalls:sys_enter_gettimeofday,,Tracepoint event,,,,,,
syscalls:sys_enter_getuid,,Tracepoint event,,,,,,
syscalls:sys_enter_getxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_init_module,,Tracepoint event,,,,,,
syscalls:sys_enter_inotify_add_watch,,Tracepoint event,,,,,,
syscalls:sys_enter_inotify_init,,Tracepoint event,,,,,,
syscalls:sys_enter_inotify_init1,,Tracepoint event,,,,,,
syscalls:sys_enter_inotify_rm_watch,,Tracepoint event,,,,,,
syscalls:sys_enter_io_cancel,,Tracepoint event,,,,,,
syscalls:sys_enter_io_destroy,,Tracepoint event,,,,,,
syscalls:sys_enter_io_getevents,,Tracepoint event,,,,,,
syscalls:sys_enter_io_pgetevents,,Tracepoint event,,,,,,
syscalls:sys_enter_io_setup,,Tracepoint event,,,,,,
syscalls:sys_enter_io_submit,,Tracepoint event,,,,,,
syscalls:sys_enter_io_uring_enter,,Tracepoint event,,,,,,
syscalls:sys_enter_io_uring_register,,Tracepoint event,,,,,,
syscalls:sys_enter_io_uring_setup,,Tracepoint event,,,,,,
syscalls:sys_enter_ioctl,,Tracepoint event,,,,,,
syscalls:sys_enter_ioperm,,Tracepoint event,,,,,,
syscalls:sys_enter_iopl,,Tracepoint event,,,,,,
syscalls:sys_enter_ioprio_get,,Tracepoint event,,,,,,
syscalls:sys_enter_ioprio_set,,Tracepoint event,,,,,,
syscalls:sys_enter_kcmp,,Tracepoint event,,,,,,
syscalls:sys_enter_kexec_file_load,,Tracepoint event,,,,,,
syscalls:sys_enter_kexec_load,,Tracepoint event,,,,,,
syscalls:sys_enter_keyctl,,Tracepoint event,,,,,,
syscalls:sys_enter_kill,,Tracepoint event,,,,,,
syscalls:sys_enter_landlock_add_rule,,Tracepoint event,,,,,,
syscalls:sys_enter_landlock_create_ruleset,,Tracepoint event,,,,,,
syscalls:sys_enter_landlock_restrict_self,,Tracepoint event,,,,,,
syscalls:sys_enter_lchown,,Tracepoint event,,,,,,
syscalls:sys_enter_lgetxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_link,,Tracepoint event,,,,,,
syscalls:sys_enter_linkat,,Tracepoint event,,,,,,
syscalls:sys_enter_listen,,Tracepoint event,,,,,,
syscalls:sys_enter_listxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_llistxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_lremovexattr,,Tracepoint event,,,,,,
syscalls:sys_enter_lseek,,Tracepoint event,,,,,,
syscalls:sys_enter_lsetxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_madvise,,Tracepoint event,,,,,,
syscalls:sys_enter_mbind,,Tracepoint event,,,,,,
syscalls:sys_enter_membarrier,,Tracepoint event,,,,,,
syscalls:sys_enter_memfd_create,,Tracepoint event,,,,,,
syscalls:sys_enter_memfd_secret,,Tracepoint event,,,,,,
syscalls:sys_enter_migrate_pages,,Tracepoint event,,,,,,
syscalls:sys_enter_mincore,,Tracepoint event,,,,,,
syscalls:sys_enter_mkdir,,Tracepoint event,,,,,,
syscalls:sys_enter_mkdirat,,Tracepoint event,,,,,,
syscalls:sys_enter_mknod,,Tracepoint event,,,,,,
syscalls:sys_enter_mknodat,,Tracepoint event,,,,,,
syscalls:sys_enter_mlock,,Tracepoint event,,,,,,
syscalls:sys_enter_mlock2,,Tracepoint event,,,,,,
syscalls:sys_enter_mlockall,,Tracepoint event,,,,,,
syscalls:sys_enter_mmap,,Tracepoint event,,,,,,
syscalls:sys_enter_modify_ldt,,Tracepoint event,,,,,,
syscalls:sys_enter_mount,,Tracepoint event,,,,,,
syscalls:sys_enter_mount_setattr,,Tracepoint event,,,,,,
syscalls:sys_enter_move_mount,,Tracepoint event,,,,,,
syscalls:sys_enter_move_pages,,Tracepoint event,,,,,,
syscalls:sys_enter_mprotect,,Tracepoint event,,,,,,
syscalls:sys_enter_mq_getsetattr,,Tracepoint event,,,,,,
syscalls:sys_enter_mq_notify,,Tracepoint event,,,,,,
syscalls:sys_enter_mq_open,,Tracepoint event,,,,,,
syscalls:sys_enter_mq_timedreceive,,Tracepoint event,,,,,,
syscalls:sys_enter_mq_timedsend,,Tracepoint event,,,,,,
syscalls:sys_enter_mq_unlink,,Tracepoint event,,,,,,
syscalls:sys_enter_mremap,,Tracepoint event,,,,,,
syscalls:sys_enter_msgctl,,Tracepoint event,,,,,,
syscalls:sys_enter_msgget,,Tracepoint event,,,,,,
syscalls:sys_enter_msgrcv,,Tracepoint event,,,,,,
syscalls:sys_enter_msgsnd,,Tracepoint event,,,,,,
syscalls:sys_enter_msync,,Tracepoint event,,,,,,
syscalls:sys_enter_munlock,,Tracepoint event,,,,,,
syscalls:sys_enter_munlockall,,Tracepoint event,,,,,,
syscalls:sys_enter_munmap,,Tracepoint event,,,,,,
syscalls:sys_enter_name_to_handle_at,,Tracepoint event,,,,,,
syscalls:sys_enter_nanosleep,,Tracepoint event,,,,,,
syscalls:sys_enter_newfstat,,Tracepoint event,,,,,,
syscalls:sys_enter_newfstatat,,Tracepoint event,,,,,,
syscalls:sys_enter_newlstat,,Tracepoint event,,,,,,
syscalls:sys_enter_newstat,,Tracepoint event,,,,,,
syscalls:sys_enter_newuname,,Tracepoint event,,,,,,
syscalls:sys_enter_open,,Tracepoint event,,,,,,
syscalls:sys_enter_open_by_handle_at,,Tracepoint event,,,,,,
syscalls:sys_enter_open_tree,,Tracepoint event,,,,,,
syscalls:sys_enter_openat,,Tracepoint event,,,,,,
syscalls:sys_enter_openat2,,Tracepoint event,,,,,,
syscalls:sys_enter_pause,,Tracepoint event,,,,,,
syscalls:sys_enter_perf_event_open,,Tracepoint event,,,,,,
syscalls:sys_enter_personality,,Tracepoint event,,,,,,
syscalls:sys_enter_pidfd_getfd,,Tracepoint event,,,,,,
syscalls:sys_enter_pidfd_open,,Tracepoint event,,,,,,
syscalls:sys_enter_pidfd_send_signal,,Tracepoint event,,,,,,
syscalls:sys_enter_pipe,,Tracepoint event,,,,,,
syscalls:sys_enter_pipe2,,Tracepoint event,,,,,,
syscalls:sys_enter_pivot_root,,Tracepoint event,,,,,,
syscalls:sys_enter_pkey_alloc,,Tracepoint event,,,,,,
syscalls:sys_enter_pkey_free,,Tracepoint event,,,,,,
syscalls:sys_enter_pkey_mprotect,,Tracepoint event,,,,,,
syscalls:sys_enter_poll,,Tracepoint event,,,,,,
syscalls:sys_enter_ppoll,,Tracepoint event,,,,,,
syscalls:sys_enter_prctl,,Tracepoint event,,,,,,
syscalls:sys_enter_pread64,,Tracepoint event,,,,,,
syscalls:sys_enter_preadv,,Tracepoint event,,,,,,
syscalls:sys_enter_preadv2,,Tracepoint event,,,,,,
syscalls:sys_enter_prlimit64,,Tracepoint event,,,,,,
syscalls:sys_enter_process_madvise,,Tracepoint event,,,,,,
syscalls:sys_enter_process_mrelease,,Tracepoint event,,,,,,
syscalls:sys_enter_process_vm_readv,,Tracepoint event,,,,,,
syscalls:sys_enter_process_vm_writev,,Tracepoint event,,,,,,
syscalls:sys_enter_pselect6,,Tracepoint event,,,,,,
syscalls:sys_enter_ptrace,,Tracepoint event,,,,,,
syscalls:sys_enter_pwrite64,,Tracepoint event,,,,,,
syscalls:sys_enter_pwritev,,Tracepoint event,,,,,,
syscalls:sys_enter_pwritev2,,Tracepoint event,,,,,,
syscalls:sys_enter_quotactl,,Tracepoint event,,,,,,
syscalls:sys_enter_quotactl_fd,,Tracepoint event,,,,,,
syscalls:sys_enter_read,,Tracepoint event,,,,,,
syscalls:sys_enter_readahead,,Tracepoint event,,,,,,
syscalls:sys_enter_readlink,,Tracepoint event,,,,,,
syscalls:sys_enter_readlinkat,,Tracepoint event,,,,,,
syscalls:sys_enter_readv,,Tracepoint event,,,,,,
syscalls:sys_enter_reboot,,Tracepoint event,,,,,,
syscalls:sys_enter_recvfrom,,Tracepoint event,,,,,,
syscalls:sys_enter_recvmmsg,,Tracepoint event,,,,,,
syscalls:sys_enter_recvmsg,,Tracepoint event,,,,,,
syscalls:sys_enter_remap_file_pages,,Tracepoint event,,,,,,
syscalls:sys_enter_removexattr,,Tracepoint event,,,,,,
syscalls:sys_enter_rename,,Tracepoint event,,,,,,
syscalls:sys_enter_renameat,,Tracepoint event,,,,,,
syscalls:sys_enter_renameat2,,Tracepoint event,,,,,,
syscalls:sys_enter_request_key,,Tracepoint event,,,,,,
syscalls:sys_enter_restart_syscall,,Tracepoint event,,,,,,
syscalls:sys_enter_rmdir,,Tracepoint event,,,,,,
syscalls:sys_enter_rseq,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_sigaction,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_sigpending,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_sigprocmask,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_sigqueueinfo,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_sigreturn,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_sigsuspend,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_sigtimedwait,,Tracepoint event,,,,,,
syscalls:sys_enter_rt_tgsigqueueinfo,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_get_priority_max,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_get_priority_min,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_getaffinity,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_getattr,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_getparam,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_getscheduler,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_rr_get_interval,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_setaffinity,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_setattr,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_setparam,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_setscheduler,,Tracepoint event,,,,,,
syscalls:sys_enter_sched_yield,,Tracepoint event,,,,,,
syscalls:sys_enter_seccomp,,Tracepoint event,,,,,,
syscalls:sys_enter_select,,Tracepoint event,,,,,,
syscalls:sys_enter_semctl,,Tracepoint event,,,,,,
syscalls:sys_enter_semget,,Tracepoint event,,,,,,
syscalls:sys_enter_semop,,Tracepoint event,,,,,,
syscalls:sys_enter_semtimedop,,Tracepoint event,,,,,,
syscalls:sys_enter_sendfile64,,Tracepoint event,,,,,,
syscalls:sys_enter_sendmmsg,,Tracepoint event,,,,,,
syscalls:sys_enter_sendmsg,,Tracepoint event,,,,,,
syscalls:sys_enter_sendto,,Tracepoint event,,,,,,
syscalls:sys_enter_set_mempolicy,,Tracepoint event,,,,,,
syscalls:sys_enter_set_mempolicy_home_node,,Tracepoint event,,,,,,
syscalls:sys_enter_set_robust_list,,Tracepoint event,,,,,,
syscalls:sys_enter_set_tid_address,,Tracepoint event,,,,,,
syscalls:sys_enter_setdomainname,,Tracepoint event,,,,,,
syscalls:sys_enter_setfsgid,,Tracepoint event,,,,,,
syscalls:sys_enter_setfsuid,,Tracepoint event,,,,,,
syscalls:sys_enter_setgid,,Tracepoint event,,,,,,
syscalls:sys_enter_setgroups,,Tracepoint event,,,,,,
syscalls:sys_enter_sethostname,,Tracepoint event,,,,,,
syscalls:sys_enter_setitimer,,Tracepoint event,,,,,,
syscalls:sys_enter_setns,,Tracepoint event,,,,,,
syscalls:sys_enter_setpgid,,Tracepoint event,,,,,,
syscalls:sys_enter_setpriority,,Tracepoint event,,,,,,
syscalls:sys_enter_setregid,,Tracepoint event,,,,,,
syscalls:sys_enter_setresgid,,Tracepoint event,,,,,,
syscalls:sys_enter_setresuid,,Tracepoint event,,,,,,
syscalls:sys_enter_setreuid,,Tracepoint event,,,,,,
syscalls:sys_enter_setrlimit,,Tracepoint event,,,,,,
syscalls:sys_enter_setsid,,Tracepoint event,,,,,,
syscalls:sys_enter_setsockopt,,Tracepoint event,,,,,,
syscalls:sys_enter_settimeofday,,Tracepoint event,,,,,,
syscalls:sys_enter_setuid,,Tracepoint event,,,,,,
syscalls:sys_enter_setxattr,,Tracepoint event,,,,,,
syscalls:sys_enter_shmat,,Tracepoint event,,,,,,
syscalls:sys_enter_shmctl,,Tracepoint event,,,,,,
syscalls:sys_enter_shmdt,,Tracepoint event,,,,,,
syscalls:sys_enter_shmget,,Tracepoint event,,,,,,
syscalls:sys_enter_shutdown,,Tracepoint event,,,,,,
syscalls:sys_enter_sigaltstack,,Tracepoint event,,,,,,
syscalls:sys_enter_signalfd,,Tracepoint event,,,,,,
syscalls:sys_enter_signalfd4,,Tracepoint event,,,,,,
syscalls:sys_enter_socket,,Tracepoint event,,,,,,
syscalls:sys_enter_socketpair,,Tracepoint event,,,,,,
syscalls:sys_enter_splice,,Tracepoint event,,,,,,
syscalls:sys_enter_statfs,,Tracepoint event,,,,,,
syscalls:sys_enter_statx,,Tracepoint event,,,,,,
syscalls:sys_enter_swapoff,,Tracepoint event,,,,,,
syscalls:sys_enter_swapon,,Tracepoint event,,,,,,
syscalls:sys_enter_symlink,,Tracepoint event,,,,,,
syscalls:sys_enter_symlinkat,,Tracepoint event,,,,,,
syscalls:sys_enter_sync,,Tracepoint event,,,,,,
syscalls:sys_enter_sync_file_range,,Tracepoint event,,,,,,
syscalls:sys_enter_syncfs,,Tracepoint event,,,,,,
syscalls:sys_enter_sysfs,,Tracepoint event,,,,,,
syscalls:sys_enter_sysinfo,,Tracepoint event,,,,,,
syscalls:sys_enter_syslog,,Tracepoint event,,,,,,
syscalls:sys_enter_tee,,Tracepoint event,,,,,,
syscalls:sys_enter_tgkill,,Tracepoint event,,,,,,
syscalls:sys_enter_time,,Tracepoint event,,,,,,
syscalls:sys_enter_timer_create,,Tracepoint event,,,,,,
syscalls:sys_enter_timer_delete,,Tracepoint event,,,,,,
syscalls:sys_enter_timer_getoverrun,,Tracepoint event,,,,,,
syscalls:sys_enter_timer_gettime,,Tracepoint event,,,,,,
syscalls:sys_enter_timer_settime,,Tracepoint event,,,,,,
syscalls:sys_enter_timerfd_create,,Tracepoint event,,,,,,
syscalls:sys_enter_timerfd_gettime,,Tracepoint event,,,,,,
syscalls:sys_enter_timerfd_settime,,Tracepoint event,,,,,,
syscalls:sys_enter_times,,Tracepoint event,,,,,,
syscalls:sys_enter_tkill,,Tracepoint event,,,,,,
syscalls:sys_enter_truncate,,Tracepoint event,,,,,,
syscalls:sys_enter_umask,,Tracepoint event,,,,,,
syscalls:sys_enter_umount,,Tracepoint event,,,,,,
syscalls:sys_enter_unlink,,Tracepoint event,,,,,,
syscalls:sys_enter_unlinkat,,Tracepoint event,,,,,,
syscalls:sys_enter_unshare,,Tracepoint event,,,,,,
syscalls:sys_enter_userfaultfd,,Tracepoint event,,,,,,
syscalls:sys_enter_ustat,,Tracepoint event,,,,,,
syscalls:sys_enter_utime,,Tracepoint event,,,,,,
syscalls:sys_enter_utimensat,,Tracepoint event,,,,,,
syscalls:sys_enter_utimes,,Tracepoint event,,,,,,
syscalls:sys_enter_vfork,,Tracepoint event,,,,,,
syscalls:sys_enter_vhangup,,Tracepoint event,,,,,,
syscalls:sys_enter_vmsplice,,Tracepoint event,,,,,,
syscalls:sys_enter_wait4,,Tracepoint event,,,,,,
syscalls:sys_enter_waitid,,Tracepoint event,,,,,,
syscalls:sys_enter_write,,Tracepoint event,,,,,,
syscalls:sys_enter_writev,,Tracepoint event,,,,,,
syscalls:sys_exit_accept,,Tracepoint event,,,,,,
syscalls:sys_exit_accept4,,Tracepoint event,,,,,,
syscalls:sys_exit_access,,Tracepoint event,,,,,,
syscalls:sys_exit_acct,,Tracepoint event,,,,,,
syscalls:sys_exit_add_key,,Tracepoint event,,,,,,
syscalls:sys_exit_adjtimex,,Tracepoint event,,,,,,
syscalls:sys_exit_alarm,,Tracepoint event,,,,,,
syscalls:sys_exit_arch_prctl,,Tracepoint event,,,,,,
syscalls:sys_exit_bind,,Tracepoint event,,,,,,
syscalls:sys_exit_bpf,,Tracepoint event,,,,,,
syscalls:sys_exit_brk,,Tracepoint event,,,,,,
syscalls:sys_exit_cachestat,,Tracepoint event,,,,,,
syscalls:sys_exit_capget,,Tracepoint event,,,,,,
syscalls:sys_exit_capset,,Tracepoint event,,,,,,
syscalls:sys_exit_chdir,,Tracepoint event,,,,,,
syscalls:sys_exit_chmod,,Tracepoint event,,,,,,
syscalls:sys_exit_chown,,Tracepoint event,,,,,,
syscalls:sys_exit_chroot,,Tracepoint event,,,,,,
syscalls:sys_exit_clock_adjtime,,Tracepoint event,,,,,,
syscalls:sys_exit_clock_getres,,Tracepoint event,,,,,,
syscalls:sys_exit_clock_gettime,,Tracepoint event,,,,,,
syscalls:sys_exit_clock_nanosleep,,Tracepoint event,,,,,,
syscalls:sys_exit_clock_settime,,Tracepoint event,,,,,,
syscalls:sys_exit_clone,,Tracepoint event,,,,,,
syscalls:sys_exit_clone3,,Tracepoint event,,,,,,
syscalls:sys_exit_close,,Tracepoint event,,,,,,
syscalls:sys_exit_close_range,,Tracepoint event,,,,,,
syscalls:sys_exit_connect,,Tracepoint event,,,,,,
syscalls:sys_exit_copy_file_range,,Tracepoint event,,,,,,
syscalls:sys_exit_creat,,Tracepoint event,,,,,,
syscalls:sys_exit_delete_module,,Tracepoint event,,,,,,
syscalls:sys_exit_dup,,Tracepoint event,,,,,,
syscalls:sys_exit_dup2,,Tracepoint event,,,,,,
syscalls:sys_exit_dup3,,Tracepoint event,,,,,,
syscalls:sys_exit_epoll_create,,Tracepoint event,,,,,,
syscalls:sys_exit_epoll_create1,,Tracepoint event,,,,,,
syscalls:sys_exit_epoll_ctl,,Tracepoint event,,,,,,
syscalls:sys_exit_epoll_pwait,,Tracepoint event,,,,,,
syscalls:sys_exit_epoll_pwait2,,Tracepoint event,,,,,,
syscalls:sys_exit_epoll_wait,,Tracepoint event,,,,,,
syscalls:sys_exit_eventfd,,Tracepoint event,,,,,,
syscalls:sys_exit_eventfd2,,Tracepoint event,,,,,,
syscalls:sys_exit_execve,,Tracepoint event,,,,,,
syscalls:sys_exit_execveat,,Tracepoint event,,,,,,
syscalls:sys_exit_exit,,Tracepoint event,,,,,,
syscalls:sys_exit_exit_group,,Tracepoint event,,,,,,
syscalls:sys_exit_faccessat,,Tracepoint event,,,,,,
syscalls:sys_exit_faccessat2,,Tracepoint event,,,,,,
syscalls:sys_exit_fadvise64,,Tracepoint event,,,,,,
syscalls:sys_exit_fallocate,,Tracepoint event,,,,,,
syscalls:sys_exit_fanotify_init,,Tracepoint event,,,,,,
syscalls:sys_exit_fanotify_mark,,Tracepoint event,,,,,,
syscalls:sys_exit_fchdir,,Tracepoint event,,,,,,
syscalls:sys_exit_fchmod,,Tracepoint event,,,,,,
syscalls:sys_exit_fchmodat,,Tracepoint event,,,,,,
syscalls:sys_exit_fchown,,Tracepoint event,,,,,,
syscalls:sys_exit_fchownat,,Tracepoint event,,,,,,
syscalls:sys_exit_fcntl,,Tracepoint event,,,,,,
syscalls:sys_exit_fdatasync,,Tracepoint event,,,,,,
syscalls:sys_exit_fgetxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_finit_module,,Tracepoint event,,,,,,
syscalls:sys_exit_flistxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_flock,,Tracepoint event,,,,,,
syscalls:sys_exit_fork,,Tracepoint event,,,,,,
syscalls:sys_exit_fremovexattr,,Tracepoint event,,,,,,
syscalls:sys_exit_fsconfig,,Tracepoint event,,,,,,
syscalls:sys_exit_fsetxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_fsmount,,Tracepoint event,,,,,,
syscalls:sys_exit_fsopen,,Tracepoint event,,,,,,
syscalls:sys_exit_fspick,,Tracepoint event,,,,,,
syscalls:sys_exit_fstatfs,,Tracepoint event,,,,,,
syscalls:sys_exit_fsync,,Tracepoint event,,,,,,
syscalls:sys_exit_ftruncate,,Tracepoint event,,,,,,
syscalls:sys_exit_futex,,Tracepoint event,,,,,,
syscalls:sys_exit_futex_waitv,,Tracepoint event,,,,,,
syscalls:sys_exit_futimesat,,Tracepoint event,,,,,,
syscalls:sys_exit_get_mempolicy,,Tracepoint event,,,,,,
syscalls:sys_exit_get_robust_list,,Tracepoint event,,,,,,
syscalls:sys_exit_getcpu,,Tracepoint event,,,,,,
syscalls:sys_exit_getcwd,,Tracepoint event,,,,,,
syscalls:sys_exit_getdents,,Tracepoint event,,,,,,
syscalls:sys_exit_getdents64,,Tracepoint event,,,,,,
syscalls:sys_exit_getegid,,Tracepoint event,,,,,,
syscalls:sys_exit_geteuid,,Tracepoint event,,,,,,
syscalls:sys_exit_getgid,,Tracepoint event,,,,,,
syscalls:sys_exit_getgroups,,Tracepoint event,,,,,,
syscalls:sys_exit_getitimer,,Tracepoint event,,,,,,
syscalls:sys_exit_getpeername,,Tracepoint event,,,,,,
syscalls:sys_exit_getpgid,,Tracepoint event,,,,,,
syscalls:sys_exit_getpgrp,,Tracepoint event,,,,,,
syscalls:sys_exit_getpid,,Tracepoint event,,,,,,
syscalls:sys_exit_getppid,,Tracepoint event,,,,,,
syscalls:sys_exit_getpriority,,Tracepoint event,,,,,,
syscalls:sys_exit_getrandom,,Tracepoint event,,,,,,
syscalls:sys_exit_getresgid,,Tracepoint event,,,,,,
syscalls:sys_exit_getresuid,,Tracepoint event,,,,,,
syscalls:sys_exit_getrlimit,,Tracepoint event,,,,,,
syscalls:sys_exit_getrusage,,Tracepoint event,,,,,,
syscalls:sys_exit_getsid,,Tracepoint event,,,,,,
syscalls:sys_exit_getsockname,,Tracepoint event,,,,,,
syscalls:sys_exit_getsockopt,,Tracepoint event,,,,,,
syscalls:sys_exit_gettid,,Tracepoint event,,,,,,
syscalls:sys_exit_gettimeofday,,Tracepoint event,,,,,,
syscalls:sys_exit_getuid,,Tracepoint event,,,,,,
syscalls:sys_exit_getxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_init_module,,Tracepoint event,,,,,,
syscalls:sys_exit_inotify_add_watch,,Tracepoint event,,,,,,
syscalls:sys_exit_inotify_init,,Tracepoint event,,,,,,
syscalls:sys_exit_inotify_init1,,Tracepoint event,,,,,,
syscalls:sys_exit_inotify_rm_watch,,Tracepoint event,,,,,,
syscalls:sys_exit_io_cancel,,Tracepoint event,,,,,,
syscalls:sys_exit_io_destroy,,Tracepoint event,,,,,,
syscalls:sys_exit_io_getevents,,Tracepoint event,,,,,,
syscalls:sys_exit_io_pgetevents,,Tracepoint event,,,,,,
syscalls:sys_exit_io_setup,,Tracepoint event,,,,,,
syscalls:sys_exit_io_submit,,Tracepoint event,,,,,,
syscalls:sys_exit_io_uring_enter,,Tracepoint event,,,,,,
syscalls:sys_exit_io_uring_register,,Tracepoint event,,,,,,
syscalls:sys_exit_io_uring_setup,,Tracepoint event,,,,,,
syscalls:sys_exit_ioctl,,Tracepoint event,,,,,,
syscalls:sys_exit_ioperm,,Tracepoint event,,,,,,
syscalls:sys_exit_iopl,,Tracepoint event,,,,,,
syscalls:sys_exit_ioprio_get,,Tracepoint event,,,,,,
syscalls:sys_exit_ioprio_set,,Tracepoint event,,,,,,
syscalls:sys_exit_kcmp,,Tracepoint event,,,,,,
syscalls:sys_exit_kexec_file_load,,Tracepoint event,,,,,,
syscalls:sys_exit_kexec_load,,Tracepoint event,,,,,,
syscalls:sys_exit_keyctl,,Tracepoint event,,,,,,
syscalls:sys_exit_kill,,Tracepoint event,,,,,,
syscalls:sys_exit_landlock_add_rule,,Tracepoint event,,,,,,
syscalls:sys_exit_landlock_create_ruleset,,Tracepoint event,,,,,,
syscalls:sys_exit_landlock_restrict_self,,Tracepoint event,,,,,,
syscalls:sys_exit_lchown,,Tracepoint event,,,,,,
syscalls:sys_exit_lgetxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_link,,Tracepoint event,,,,,,
syscalls:sys_exit_linkat,,Tracepoint event,,,,,,
syscalls:sys_exit_listen,,Tracepoint event,,,,,,
syscalls:sys_exit_listxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_llistxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_lremovexattr,,Tracepoint event,,,,,,
syscalls:sys_exit_lseek,,Tracepoint event,,,,,,
syscalls:sys_exit_lsetxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_madvise,,Tracepoint event,,,,,,
syscalls:sys_exit_mbind,,Tracepoint event,,,,,,
syscalls:sys_exit_membarrier,,Tracepoint event,,,,,,
syscalls:sys_exit_memfd_create,,Tracepoint event,,,,,,
syscalls:sys_exit_memfd_secret,,Tracepoint event,,,,,,
syscalls:sys_exit_migrate_pages,,Tracepoint event,,,,,,
syscalls:sys_exit_mincore,,Tracepoint event,,,,,,
syscalls:sys_exit_mkdir,,Tracepoint event,,,,,,
syscalls:sys_exit_mkdirat,,Tracepoint event,,,,,,
syscalls:sys_exit_mknod,,Tracepoint event,,,,,,
syscalls:sys_exit_mknodat,,Tracepoint event,,,,,,
syscalls:sys_exit_mlock,,Tracepoint event,,,,,,
syscalls:sys_exit_mlock2,,Tracepoint event,,,,,,
syscalls:sys_exit_mlockall,,Tracepoint event,,,,,,
syscalls:sys_exit_mmap,,Tracepoint event,,,,,,
syscalls:sys_exit_modify_ldt,,Tracepoint event,,,,,,
syscalls:sys_exit_mount,,Tracepoint event,,,,,,
syscalls:sys_exit_mount_setattr,,Tracepoint event,,,,,,
syscalls:sys_exit_move_mount,,Tracepoint event,,,,,,
syscalls:sys_exit_move_pages,,Tracepoint event,,,,,,
syscalls:sys_exit_mprotect,,Tracepoint event,,,,,,
syscalls:sys_exit_mq_getsetattr,,Tracepoint event,,,,,,
syscalls:sys_exit_mq_notify,,Tracepoint event,,,,,,
syscalls:sys_exit_mq_open,,Tracepoint event,,,,,,
syscalls:sys_exit_mq_timedreceive,,Tracepoint event,,,,,,
syscalls:sys_exit_mq_timedsend,,Tracepoint event,,,,,,
syscalls:sys_exit_mq_unlink,,Tracepoint event,,,,,,
syscalls:sys_exit_mremap,,Tracepoint event,,,,,,
syscalls:sys_exit_msgctl,,Tracepoint event,,,,,,
syscalls:sys_exit_msgget,,Tracepoint event,,,,,,
syscalls:sys_exit_msgrcv,,Tracepoint event,,,,,,
syscalls:sys_exit_msgsnd,,Tracepoint event,,,,,,
syscalls:sys_exit_msync,,Tracepoint event,,,,,,
syscalls:sys_exit_munlock,,Tracepoint event,,,,,,
syscalls:sys_exit_munlockall,,Tracepoint event,,,,,,
syscalls:sys_exit_munmap,,Tracepoint event,,,,,,
syscalls:sys_exit_name_to_handle_at,,Tracepoint event,,,,,,
syscalls:sys_exit_nanosleep,,Tracepoint event,,,,,,
syscalls:sys_exit_newfstat,,Tracepoint event,,,,,,
syscalls:sys_exit_newfstatat,,Tracepoint event,,,,,,
syscalls:sys_exit_newlstat,,Tracepoint event,,,,,,
syscalls:sys_exit_newstat,,Tracepoint event,,,,,,
syscalls:sys_exit_newuname,,Tracepoint event,,,,,,
syscalls:sys_exit_open,,Tracepoint event,,,,,,
syscalls:sys_exit_open_by_handle_at,,Tracepoint event,,,,,,
syscalls:sys_exit_open_tree,,Tracepoint event,,,,,,
syscalls:sys_exit_openat,,Tracepoint event,,,,,,
syscalls:sys_exit_openat2,,Tracepoint event,,,,,,
syscalls:sys_exit_pause,,Tracepoint event,,,,,,
syscalls:sys_exit_perf_event_open,,Tracepoint event,,,,,,
syscalls:sys_exit_personality,,Tracepoint event,,,,,,
syscalls:sys_exit_pidfd_getfd,,Tracepoint event,,,,,,
syscalls:sys_exit_pidfd_open,,Tracepoint event,,,,,,
syscalls:sys_exit_pidfd_send_signal,,Tracepoint event,,,,,,
syscalls:sys_exit_pipe,,Tracepoint event,,,,,,
syscalls:sys_exit_pipe2,,Tracepoint event,,,,,,
syscalls:sys_exit_pivot_root,,Tracepoint event,,,,,,
syscalls:sys_exit_pkey_alloc,,Tracepoint event,,,,,,
syscalls:sys_exit_pkey_free,,Tracepoint event,,,,,,
syscalls:sys_exit_pkey_mprotect,,Tracepoint event,,,,,,
syscalls:sys_exit_poll,,Tracepoint event,,,,,,
syscalls:sys_exit_ppoll,,Tracepoint event,,,,,,
syscalls:sys_exit_prctl,,Tracepoint event,,,,,,
syscalls:sys_exit_pread64,,Tracepoint event,,,,,,
syscalls:sys_exit_preadv,,Tracepoint event,,,,,,
syscalls:sys_exit_preadv2,,Tracepoint event,,,,,,
syscalls:sys_exit_prlimit64,,Tracepoint event,,,,,,
syscalls:sys_exit_process_madvise,,Tracepoint event,,,,,,
syscalls:sys_exit_process_mrelease,,Tracepoint event,,,,,,
syscalls:sys_exit_process_vm_readv,,Tracepoint event,,,,,,
syscalls:sys_exit_process_vm_writev,,Tracepoint event,,,,,,
syscalls:sys_exit_pselect6,,Tracepoint event,,,,,,
syscalls:sys_exit_ptrace,,Tracepoint event,,,,,,
syscalls:sys_exit_pwrite64,,Tracepoint event,,,,,,
syscalls:sys_exit_pwritev,,Tracepoint event,,,,,,
syscalls:sys_exit_pwritev2,,Tracepoint event,,,,,,
syscalls:sys_exit_quotactl,,Tracepoint event,,,,,,
syscalls:sys_exit_quotactl_fd,,Tracepoint event,,,,,,
syscalls:sys_exit_read,,Tracepoint event,,,,,,
syscalls:sys_exit_readahead,,Tracepoint event,,,,,,
syscalls:sys_exit_readlink,,Tracepoint event,,,,,,
syscalls:sys_exit_readlinkat,,Tracepoint event,,,,,,
syscalls:sys_exit_readv,,Tracepoint event,,,,,,
syscalls:sys_exit_reboot,,Tracepoint event,,,,,,
syscalls:sys_exit_recvfrom,,Tracepoint event,,,,,,
syscalls:sys_exit_recvmmsg,,Tracepoint event,,,,,,
syscalls:sys_exit_recvmsg,,Tracepoint event,,,,,,
syscalls:sys_exit_remap_file_pages,,Tracepoint event,,,,,,
syscalls:sys_exit_removexattr,,Tracepoint event,,,,,,
syscalls:sys_exit_rename,,Tracepoint event,,,,,,
syscalls:sys_exit_renameat,,Tracepoint event,,,,,,
syscalls:sys_exit_renameat2,,Tracepoint event,,,,,,
syscalls:sys_exit_request_key,,Tracepoint event,,,,,,
syscalls:sys_exit_restart_syscall,,Tracepoint event,,,,,,
syscalls:sys_exit_rmdir,,Tracepoint event,,,,,,
syscalls:sys_exit_rseq,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_sigaction,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_sigpending,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_sigprocmask,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_sigqueueinfo,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_sigreturn,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_sigsuspend,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_sigtimedwait,,Tracepoint event,,,,,,
syscalls:sys_exit_rt_tgsigqueueinfo,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_get_priority_max,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_get_priority_min,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_getaffinity,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_getattr,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_getparam,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_getscheduler,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_rr_get_interval,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_setaffinity,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_setattr,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_setparam,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_setscheduler,,Tracepoint event,,,,,,
syscalls:sys_exit_sched_yield,,Tracepoint event,,,,,,
syscalls:sys_exit_seccomp,,Tracepoint event,,,,,,
syscalls:sys_exit_select,,Tracepoint event,,,,,,
syscalls:sys_exit_semctl,,Tracepoint event,,,,,,
syscalls:sys_exit_semget,,Tracepoint event,,,,,,
syscalls:sys_exit_semop,,Tracepoint event,,,,,,
syscalls:sys_exit_semtimedop,,Tracepoint event,,,,,,
syscalls:sys_exit_sendfile64,,Tracepoint event,,,,,,
syscalls:sys_exit_sendmmsg,,Tracepoint event,,,,,,
syscalls:sys_exit_sendmsg,,Tracepoint event,,,,,,
syscalls:sys_exit_sendto,,Tracepoint event,,,,,,
syscalls:sys_exit_set_mempolicy,,Tracepoint event,,,,,,
syscalls:sys_exit_set_mempolicy_home_node,,Tracepoint event,,,,,,
syscalls:sys_exit_set_robust_list,,Tracepoint event,,,,,,
syscalls:sys_exit_set_tid_address,,Tracepoint event,,,,,,
syscalls:sys_exit_setdomainname,,Tracepoint event,,,,,,
syscalls:sys_exit_setfsgid,,Tracepoint event,,,,,,
syscalls:sys_exit_setfsuid,,Tracepoint event,,,,,,
syscalls:sys_exit_setgid,,Tracepoint event,,,,,,
syscalls:sys_exit_setgroups,,Tracepoint event,,,,,,
syscalls:sys_exit_sethostname,,Tracepoint event,,,,,,
syscalls:sys_exit_setitimer,,Tracepoint event,,,,,,
syscalls:sys_exit_setns,,Tracepoint event,,,,,,
syscalls:sys_exit_setpgid,,Tracepoint event,,,,,,
syscalls:sys_exit_setpriority,,Tracepoint event,,,,,,
syscalls:sys_exit_setregid,,Tracepoint event,,,,,,
syscalls:sys_exit_setresgid,,Tracepoint event,,,,,,
syscalls:sys_exit_setresuid,,Tracepoint event,,,,,,
syscalls:sys_exit_setreuid,,Tracepoint event,,,,,,
syscalls:sys_exit_setrlimit,,Tracepoint event,,,,,,
syscalls:sys_exit_setsid,,Tracepoint event,,,,,,
syscalls:sys_exit_setsockopt,,Tracepoint event,,,,,,
syscalls:sys_exit_settimeofday,,Tracepoint event,,,,,,
syscalls:sys_exit_setuid,,Tracepoint event,,,,,,
syscalls:sys_exit_setxattr,,Tracepoint event,,,,,,
syscalls:sys_exit_shmat,,Tracepoint event,,,,,,
syscalls:sys_exit_shmctl,,Tracepoint event,,,,,,
syscalls:sys_exit_shmdt,,Tracepoint event,,,,,,
syscalls:sys_exit_shmget,,Tracepoint event,,,,,,
syscalls:sys_exit_shutdown,,Tracepoint event,,,,,,
syscalls:sys_exit_sigaltstack,,Tracepoint event,,,,,,
syscalls:sys_exit_signalfd,,Tracepoint event,,,,,,
syscalls:sys_exit_signalfd4,,Tracepoint event,,,,,,
syscalls:sys_exit_socket,,Tracepoint event,,,,,,
syscalls:sys_exit_socketpair,,Tracepoint event,,,,,,
syscalls:sys_exit_splice,,Tracepoint event,,,,,,
syscalls:sys_exit_statfs,,Tracepoint event,,,,,,
syscalls:sys_exit_statx,,Tracepoint event,,,,,,
syscalls:sys_exit_swapoff,,Tracepoint event,,,,,,
syscalls:sys_exit_swapon,,Tracepoint event,,,,,,
syscalls:sys_exit_symlink,,Tracepoint event,,,,,,
syscalls:sys_exit_symlinkat,,Tracepoint event,,,,,,
syscalls:sys_exit_sync,,Tracepoint event,,,,,,
syscalls:sys_exit_sync_file_range,,Tracepoint event,,,,,,
syscalls:sys_exit_syncfs,,Tracepoint event,,,,,,
syscalls:sys_exit_sysfs,,Tracepoint event,,,,,,
syscalls:sys_exit_sysinfo,,Tracepoint event,,,,,,
syscalls:sys_exit_syslog,,Tracepoint event,,,,,,
syscalls:sys_exit_tee,,Tracepoint event,,,,,,
syscalls:sys_exit_tgkill,,Tracepoint event,,,,,,
syscalls:sys_exit_time,,Tracepoint event,,,,,,
syscalls:sys_exit_timer_create,,Tracepoint event,,,,,,
syscalls:sys_exit_timer_delete,,Tracepoint event,,,,,,
syscalls:sys_exit_timer_getoverrun,,Tracepoint event,,,,,,
syscalls:sys_exit_timer_gettime,,Tracepoint event,,,,,,
syscalls:sys_exit_timer_settime,,Tracepoint event,,,,,,
syscalls:sys_exit_timerfd_create,,Tracepoint event,,,,,,
syscalls:sys_exit_timerfd_gettime,,Tracepoint event,,,,,,
syscalls:sys_exit_timerfd_settime,,Tracepoint event,,,,,,
syscalls:sys_exit_times,,Tracepoint event,,,,,,
syscalls:sys_exit_tkill,,Tracepoint event,,,,,,
syscalls:sys_exit_truncate,,Tracepoint event,,,,,,
syscalls:sys_exit_umask,,Tracepoint event,,,,,,
syscalls:sys_exit_umount,,Tracepoint event,,,,,,
syscalls:sys_exit_unlink,,Tracepoint event,,,,,,
syscalls:sys_exit_unlinkat,,Tracepoint event,,,,,,
syscalls:sys_exit_unshare,,Tracepoint event,,,,,,
syscalls:sys_exit_userfaultfd,,Tracepoint event,,,,,,
syscalls:sys_exit_ustat,,Tracepoint event,,,,,,
syscalls:sys_exit_utime,,Tracepoint event,,,,,,
syscalls:sys_exit_utimensat,,Tracepoint event,,,,,,
syscalls:sys_exit_utimes,,Tracepoint event,,,,,,
syscalls:sys_exit_vfork,,Tracepoint event,,,,,,
syscalls:sys_exit_vhangup,,Tracepoint event,,,,,,
syscalls:sys_exit_vmsplice,,Tracepoint event,,,,,,
syscalls:sys_exit_wait4,,Tracepoint event,,,,,,
syscalls:sys_exit_waitid,,Tracepoint event,,,,,,
syscalls:sys_exit_write,,Tracepoint event,,,,,,
syscalls:sys_exit_writev,,Tracepoint event,,,,,,
task:task_newtask,,Tracepoint event,,,,,,
task:task_rename,,Tracepoint event,,,,,,
tcp:tcp_bad_csum,,Tracepoint event,,,,,,
tcp:tcp_cong_state_set,,Tracepoint event,,,,,,
tcp:tcp_destroy_sock,,Tracepoint event,,,,,,
tcp:tcp_probe,,Tracepoint event,,,,,,
tcp:tcp_rcv_space_adjust,,Tracepoint event,,,,,,
tcp:tcp_receive_reset,,Tracepoint event,,,,,,
tcp:tcp_retransmit_skb,,Tracepoint event,,,,,,
tcp:tcp_retransmit_synack,,Tracepoint event,,,,,,
tcp:tcp_send_reset,,Tracepoint event,,,,,,
thermal:cdev_update,,Tracepoint event,,,,,,
thermal:thermal_power_devfreq_get_power,,Tracepoint event,,,,,,
thermal:thermal_power_devfreq_limit,,Tracepoint event,,,,,,
thermal:thermal_temperature,,Tracepoint event,,,,,,
thermal:thermal_zone_trip,,Tracepoint event,,,,,,
thermal_power_allocator:thermal_power_allocator,,Tracepoint event,,,,,,
thermal_power_allocator:thermal_power_allocator_pid,,Tracepoint event,,,,,,
thp:hugepage_set_pmd,,Tracepoint event,,,,,,
thp:hugepage_update,,Tracepoint event,,,,,,
thp:remove_migration_pmd,,Tracepoint event,,,,,,
thp:set_migration_pmd,,Tracepoint event,,,,,,
timer:hrtimer_cancel,,Tracepoint event,,,,,,
timer:hrtimer_expire_entry,,Tracepoint event,,,,,,
timer:hrtimer_expire_exit,,Tracepoint event,,,,,,
timer:hrtimer_init,,Tracepoint event,,,,,,
timer:hrtimer_start,,Tracepoint event,,,,,,
timer:itimer_expire,,Tracepoint event,,,,,,
timer:itimer_state,,Tracepoint event,,,,,,
timer:tick_stop,,Tracepoint event,,,,,,
timer:timer_cancel,,Tracepoint event,,,,,,
timer:timer_expire_entry,,Tracepoint event,,,,,,
timer:timer_expire_exit,,Tracepoint event,,,,,,
timer:timer_init,,Tracepoint event,,,,,,
timer:timer_start,,Tracepoint event,,,,,,
tlb:tlb_flush,,Tracepoint event,,,,,,
tls:tls_device_decrypted,,Tracepoint event,,,,,,
tls:tls_device_offload_set,,Tracepoint event,,,,,,
tls:tls_device_rx_resync_nh_delay,,Tracepoint event,,,,,,
tls:tls_device_rx_resync_nh_schedule,,Tracepoint event,,,,,,
tls:tls_device_rx_resync_send,,Tracepoint event,,,,,,
tls:tls_device_tx_resync_req,,Tracepoint event,,,,,,
tls:tls_device_tx_resync_send,,Tracepoint event,,,,,,
udp:udp_fail_queue_rcv_skb,,Tracepoint event,,,,,,
vmalloc:alloc_vmap_area,,Tracepoint event,,,,,,
vmalloc:free_vmap_area_noflush,,Tracepoint event,,,,,,
vmalloc:purge_vmap_area_lazy,,Tracepoint event,,,,,,
vmscan:mm_shrink_slab_end,,Tracepoint event,,,,,,
vmscan:mm_shrink_slab_start,,Tracepoint event,,,,,,
vmscan:mm_vmscan_direct_reclaim_begin,,Tracepoint event,,,,,,
vmscan:mm_vmscan_direct_reclaim_end,,Tracepoint event,,,,,,
vmscan:mm_vmscan_kswapd_sleep,,Tracepoint event,,,,,,
vmscan:mm_vmscan_kswapd_wake,,Tracepoint event,,,,,,
vmscan:mm_vmscan_lru_isolate,,Tracepoint event,,,,,,
vmscan:mm_vmscan_lru_shrink_active,,Tracepoint event,,,,,,
vmscan:mm_vmscan_lru_shrink_inactive,,Tracepoint event,,,,,,
vmscan:mm_vmscan_memcg_reclaim_begin,,Tracepoint event,,,,,,
vmscan:mm_vmscan_memcg_reclaim_end,,Tracepoint event,,,,,,
vmscan:mm_vmscan_memcg_softlimit_reclaim_begin,,Tracepoint event,,,,,,
vmscan:mm_vmscan_memcg_softlimit_reclaim_end,,Tracepoint event,,,,,,
vmscan:mm_vmscan_node_reclaim_begin,,Tracepoint event,,,,,,
vmscan:mm_vmscan_node_reclaim_end,,Tracepoint event,,,,,,
vmscan:mm_vmscan_throttled,,Tracepoint event,,,,,,
vmscan:mm_vmscan_wakeup_kswapd,,Tracepoint event,,,,,,
vmscan:mm_vmscan_write_folio,,Tracepoint event,,,,,,
vsyscall:emulate_vsyscall,,Tracepoint event,,,,,,
watchdog:watchdog_ping,,Tracepoint event,,,,,,
watchdog:watchdog_set_timeout,,Tracepoint event,,,,,,
watchdog:watchdog_start,,Tracepoint event,,,,,,
watchdog:watchdog_stop,,Tracepoint event,,,,,,
wbt:wbt_lat,,Tracepoint event,,,,,,
wbt:wbt_stat,,Tracepoint event,,,,,,
wbt:wbt_step,,Tracepoint event,,,,,,
wbt:wbt_timer,,Tracepoint event,,,,,,
workqueue:workqueue_activate_work,,Tracepoint event,,,,,,
workqueue:workqueue_execute_end,,Tracepoint event,,,,,,
workqueue:workqueue_execute_start,,Tracepoint event,,,,,,
workqueue:workqueue_queue_work,,Tracepoint event,,,,,,
writeback:balance_dirty_pages,,Tracepoint event,,,,,,
writeback:bdi_dirty_ratelimit,,Tracepoint event,,,,,,
writeback:flush_foreign,,Tracepoint event,,,,,,
writeback:folio_wait_writeback,,Tracepoint event,,,,,,
writeback:global_dirty_state,,Tracepoint event,,,,,,
writeback:inode_foreign_history,,Tracepoint event,,,,,,
writeback:inode_switch_wbs,,Tracepoint event,,,,,,
writeback:sb_clear_inode_writeback,,Tracepoint event,,,,,,
writeback:sb_mark_inode_writeback,,Tracepoint event,,,,,,
writeback:track_foreign_dirty,,Tracepoint event,,,,,,
writeback:wbc_writepage,,Tracepoint event,,,,,,
writeback:writeback_bdi_register,,Tracepoint event,,,,,,
writeback:writeback_dirty_folio,,Tracepoint event,,,,,,
writeback:writeback_dirty_inode,,Tracepoint event,,,,,,
writeback:writeback_dirty_inode_enqueue,,Tracepoint event,,,,,,
writeback:writeback_dirty_inode_start,,Tracepoint event,,,,,,
writeback:writeback_exec,,Tracepoint event,,,,,,
writeback:writeback_lazytime,,Tracepoint event,,,,,,
writeback:writeback_lazytime_iput,,Tracepoint event,,,,,,
writeback:writeback_mark_inode_dirty,,Tracepoint event,,,,,,
writeback:writeback_pages_written,,Tracepoint event,,,,,,
writeback:writeback_queue,,Tracepoint event,,,,,,
writeback:writeback_queue_io,,Tracepoint event,,,,,,
writeback:writeback_sb_inodes_requeue,,Tracepoint event,,,,,,
writeback:writeback_single_inode,,Tracepoint event,,,,,,
writeback:writeback_single_inode_start,,Tracepoint event,,,,,,
writeback:writeback_start,,Tracepoint event,,,,,,
writeback:writeback_wait,,Tracepoint event,,,,,,
writeback:writeback_wake_background,,Tracepoint event,,,,,,
writeback:writeback_write_inode,,Tracepoint event,,,,,,
writeback:writeback_write_inode_start,,Tracepoint event,,,,,,
writeback:writeback_written,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_after_restore,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_after_save,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_before_restore,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_before_save,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_copy_dst,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_copy_src,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_dropped,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_init_state,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_regs_activated,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_regs_deactivated,,Tracepoint event,,,,,,
x86_fpu:x86_fpu_xstate_check_failed,,Tracepoint event,,,,,,
xdp:mem_connect,,Tracepoint event,,,,,,
xdp:mem_disconnect,,Tracepoint event,,,,,,
xdp:mem_return_failed,,Tracepoint event,,,,,,
xdp:xdp_bulk_tx,,Tracepoint event,,,,,,
xdp:xdp_cpumap_enqueue,,Tracepoint event,,,,,,
xdp:xdp_cpumap_kthread,,Tracepoint event,,,,,,
xdp:xdp_devmap_xmit,,Tracepoint event,,,,,,
xdp:xdp_exception,,Tracepoint event,,,,,,
xdp:xdp_redirect,,Tracepoint event,,,,,,
xdp:xdp_redirect_err,,Tracepoint event,,,,,,
xdp:xdp_redirect_map,,Tracepoint event,,,,,,
xdp:xdp_redirect_map_err,,Tracepoint event,,,,,,
xen:xen_cpu_load_idt,,Tracepoint event,,,,,,
xen:xen_cpu_set_ldt,,Tracepoint event,,,,,,
xen:xen_cpu_write_gdt_entry,,Tracepoint event,,,,,,
xen:xen_cpu_write_idt_entry,,Tracepoint event,,,,,,
xen:xen_cpu_write_ldt_entry,,Tracepoint event,,,,,,
xen:xen_mc_batch,,Tracepoint event,,,,,,
xen:xen_mc_callback,,Tracepoint event,,,,,,
xen:xen_mc_entry,,Tracepoint event,,,,,,
xen:xen_mc_entry_alloc,,Tracepoint event,,,,,,
xen:xen_mc_extend_args,,Tracepoint event,,,,,,
xen:xen_mc_flush,,Tracepoint event,,,,,,
xen:xen_mc_flush_reason,,Tracepoint event,,,,,,
xen:xen_mc_issue,,Tracepoint event,,,,,,
xen:xen_mmu_alloc_ptpage,,Tracepoint event,,,,,,
xen:xen_mmu_flush_tlb_multi,,Tracepoint event,,,,,,
xen:xen_mmu_flush_tlb_one_user,,Tracepoint event,,,,,,
xen:xen_mmu_pgd_pin,,Tracepoint event,,,,,,
xen:xen_mmu_pgd_unpin,,Tracepoint event,,,,,,
xen:xen_mmu_ptep_modify_prot_commit,,Tracepoint event,,,,,,
xen:xen_mmu_ptep_modify_prot_start,,Tracepoint event,,,,,,
xen:xen_mmu_release_ptpage,,Tracepoint event,,,,,,
xen:xen_mmu_set_p4d,,Tracepoint event,,,,,,
xen:xen_mmu_set_pmd,,Tracepoint event,,,,,,
xen:xen_mmu_set_pte,,Tracepoint event,,,,,,
xen:xen_mmu_set_pud,,Tracepoint event,,,,,,
xen:xen_mmu_write_cr3,,Tracepoint event,,,,,,
xhci-hcd:xhci_add_endpoint,,Tracepoint event,,,,,,
xhci-hcd:xhci_address_ctrl_ctx,,Tracepoint event,,,,,,
xhci-hcd:xhci_address_ctx,,Tracepoint event,,,,,,
xhci-hcd:xhci_alloc_dev,,Tracepoint event,,,,,,
xhci-hcd:xhci_alloc_virt_device,,Tracepoint event,,,,,,
xhci-hcd:xhci_configure_endpoint,,Tracepoint event,,,,,,
xhci-hcd:xhci_configure_endpoint_ctrl_ctx,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbc_alloc_request,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbc_free_request,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbc_gadget_ep_queue,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbc_giveback_request,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbc_handle_event,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbc_handle_transfer,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbc_queue_request,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbg_address,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbg_cancel_urb,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbg_context_change,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbg_init,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbg_quirks,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbg_reset_ep,,Tracepoint event,,,,,,
xhci-hcd:xhci_dbg_ring_expansion,,Tracepoint event,,,,,,
xhci-hcd:xhci_discover_or_reset_device,,Tracepoint event,,,,,,
xhci-hcd:xhci_free_dev,,Tracepoint event,,,,,,
xhci-hcd:xhci_free_virt_device,,Tracepoint event,,,,,,
xhci-hcd:xhci_get_port_status,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_addr_dev,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_config_ep,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_disable_slot,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_reset_dev,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_reset_ep,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_set_deq,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_set_deq_ep,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_cmd_stop_ep,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_command,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_event,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_port_status,,Tracepoint event,,,,,,
xhci-hcd:xhci_handle_transfer,,Tracepoint event,,,,,,
xhci-hcd:xhci_hub_status_data,,Tracepoint event,,,,,,
xhci-hcd:xhci_inc_deq,,Tracepoint event,,,,,,
xhci-hcd:xhci_inc_enq,,Tracepoint event,,,,,,
xhci-hcd:xhci_queue_trb,,Tracepoint event,,,,,,
xhci-hcd:xhci_ring_alloc,,Tracepoint event,,,,,,
xhci-hcd:xhci_ring_ep_doorbell,,Tracepoint event,,,,,,
xhci-hcd:xhci_ring_expansion,,Tracepoint event,,,,,,
xhci-hcd:xhci_ring_free,,Tracepoint event,,,,,,
xhci-hcd:xhci_ring_host_doorbell,,Tracepoint event,,,,,,
xhci-hcd:xhci_setup_addressable_virt_device,,Tracepoint event,,,,,,
xhci-hcd:xhci_setup_device,,Tracepoint event,,,,,,
xhci-hcd:xhci_setup_device_slot,,Tracepoint event,,,,,,
xhci-hcd:xhci_stop_device,,Tracepoint event,,,,,,
xhci-hcd:xhci_urb_dequeue,,Tracepoint event,,,,,,
xhci-hcd:xhci_urb_enqueue,,Tracepoint event,,,,,,
xhci-hcd:xhci_urb_giveback,,Tracepoint event,,,,,,
